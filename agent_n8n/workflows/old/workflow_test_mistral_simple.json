{
  "name": "üß™ Test Mistral Simple",
  "nodes": [
    {
      "parameters": {},
      "id": "start-test",
      "name": "Start",
      "type": "n8n-nodes-base.start",
      "typeVersion": 1,
      "position": [0, 100]
    },
    {
      "parameters": {
        "jsCode": "// TEST SIMPLE MISTRAL\nconsole.log('üß™ === TEST API MISTRAL ===');\n\nconst testData = {\n  title: 'Contrat d\\'apprentissage - Analyste Cybers√©curit√© SOC H/F',\n  company: 'ANSSI - Agence Nationale S√©curit√©',\n  contract_type: 'Contrat d\\'apprentissage',\n  description: 'Formation alternance 24 mois - Analyste SOC junior. Surveillance syst√®mes, analyse incidents s√©curit√©.'\n};\n\n// Payload Mistral minimal\nconst mistralPayload = {\n  model: \"mistral-large-latest\",\n  messages: [\n    {\n      role: \"user\",\n      content: `Analyse cette offre et r√©ponds par VALIDE ou INVALIDE:\\n\\nTitre: ${testData.title}\\nEntreprise: ${testData.company}\\nContrat: ${testData.contract_type}\\nDescription: ${testData.description}\\n\\nEst-ce une vraie alternance en cybers√©curit√© ? R√©ponds juste VALIDE ou INVALIDE.`\n    }\n  ],\n  temperature: 0.1,\n  max_tokens: 50\n};\n\nconsole.log('üìã Test payload cr√©√©');\nconsole.log('üéØ Titre test:', testData.title);\n\nreturn {\n  json: {\n    test_data: testData,\n    mistral_payload: JSON.stringify(mistralPayload),\n    test_status: 'READY_FOR_MISTRAL_TEST'\n  }\n};"
      },
      "id": "prepare-test",
      "name": "Pr√©parer Test",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [200, 100]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.mistral.ai/v1/chat/completions",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer fe8GdBIIBwYk8Dj1GvclASPE3j0Zbt95"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "contentType": "raw",
        "body": "={{ $json.mistral_payload }}",
        "options": {
          "timeout": 30000
        }
      },
      "id": "api-test",
      "name": "Test API Mistral",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [400, 100],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "jsCode": "// R√âSULTAT TEST MISTRAL\nconst testData = $('Pr√©parer Test').item.json;\nconst response = $input.item.json;\n\nconsole.log('üß™ === R√âSULTAT TEST MISTRAL ===');\n\nif (response.choices && response.choices[0] && response.choices[0].message) {\n  const content = response.choices[0].message.content.trim();\n  console.log('‚úÖ API Mistral fonctionne !');\n  console.log('üìù R√©ponse:', content);\n  \n  return {\n    json: {\n      api_status: 'SUCCESS',\n      mistral_response: content,\n      test_title: testData.test_data.title,\n      tokens_used: response.usage,\n      message: 'API Mistral op√©rationnelle'\n    }\n  };\n} else {\n  console.log('‚ùå R√©ponse API malform√©e');\n  console.log('üîç R√©ponse re√ßue:', JSON.stringify(response, null, 2));\n  \n  return {\n    json: {\n      api_status: 'ERROR_RESPONSE',\n      error_details: response,\n      test_title: testData.test_data.title,\n      message: 'API r√©pond mais format incorrect'\n    }\n  };\n}"
      },
      "id": "process-success",
      "name": "Traiter Succ√®s",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [600, 0]
    },
    {
      "parameters": {
        "jsCode": "// ERREUR TEST MISTRAL\nconst testData = $('Pr√©parer Test').item.json;\nconst error = $input.item;\n\nconsole.log('‚ùå === ERREUR TEST MISTRAL ===');\nconsole.log('üîç Code erreur:', error.httpCode);\nconsole.log('üìã Message:', error.message);\nconsole.log('üîó URL test√©e:', error.url || 'https://api.mistral.ai/v1/chat/completions');\n\nlet diagnostic = 'Erreur inconnue';\nlet suggestion = 'V√©rifier la configuration';\n\nswitch(error.httpCode) {\n  case 401:\n    diagnostic = 'Cl√© API invalide ou expir√©e';\n    suggestion = 'V√©rifier la cl√© API Mistral';\n    break;\n  case 422:\n    diagnostic = 'Format de requ√™te incorrect';\n    suggestion = 'V√©rifier le format JSON du payload';\n    break;\n  case 429:\n    diagnostic = 'Limite de d√©bit d√©pass√©e';\n    suggestion = 'Attendre et r√©essayer';\n    break;\n  case 500:\n  case 502:\n  case 503:\n    diagnostic = 'Probl√®me serveur Mistral';\n    suggestion = 'R√©essayer plus tard';\n    break;\n  case undefined:\n    diagnostic = 'Probl√®me r√©seau ou timeout';\n    suggestion = 'V√©rifier la connexion internet';\n    break;\n}\n\nconsole.log('üè∑Ô∏è Diagnostic:', diagnostic);\nconsole.log('üí° Suggestion:', suggestion);\n\nreturn {\n  json: {\n    api_status: 'ERROR',\n    error_code: error.httpCode,\n    error_message: error.message,\n    diagnostic: diagnostic,\n    suggestion: suggestion,\n    test_title: testData.test_data.title,\n    message: `Test API √©chou√©: ${diagnostic}`\n  }\n};"
      },
      "id": "process-error",
      "name": "Traiter Erreur",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [600, 200]
    }
  ],
  "connections": {
    "Start": {
      "main": [
        [
          {
            "node": "Pr√©parer Test",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Pr√©parer Test": {
      "main": [
        [
          {
            "node": "Test API Mistral",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Test API Mistral": {
      "main": [
        [
          {
            "node": "Traiter Succ√®s",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Traiter Erreur",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "tags": ["test", "mistral", "api"]
}