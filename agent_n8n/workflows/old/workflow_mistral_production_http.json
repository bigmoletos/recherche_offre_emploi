{
  "name": "Classification Mistral - PRODUCTION HTTP",
  "nodes": [
    {
      "parameters": {},
      "id": "start-production-http",
      "name": "Start",
      "type": "n8n-nodes-base.start",
      "typeVersion": 1,
      "position": [240, 300]
    },
    {
      "parameters": {
        "jsCode": "// G√âN√âRATEUR D'OFFRES TEST R√âALISTES\nconsole.log('üß™ === G√âN√âRATION OFFRES TEST R√âALISTES ===');\n\nconst offresTest = [\n  {\n    id: 'test-valide-1',\n    title: 'Contrat d\\'apprentissage - Analyste Cybers√©curit√© SOC',\n    company: 'Orange Cyberdefense',\n    description: 'Contrat d\\'apprentissage de 24 mois pour former un analyste cybers√©curit√© au sein de notre SOC. Missions : surveillance des syst√®mes, analyse incidents de s√©curit√©, r√©ponse aux alertes SIEM.',\n    location: 'Paris, France',\n    contract_type: 'Contrat d\\'apprentissage',\n    keywords: ['apprentissage', 'cybers√©curit√©', 'SOC', 'alternance'],\n    attendu: 'VALIDE'\n  },\n  {\n    id: 'test-invalide-1',\n    title: 'Stage - Marketing Digital et Communication',\n    company: 'AgenceComm',\n    description: 'Stage de 6 mois en marketing digital. Missions : gestion des r√©seaux sociaux, cr√©ation de contenu, campagnes publicitaires.',\n    location: 'Lyon, France',\n    contract_type: 'Stage',\n    keywords: ['stage', 'marketing', 'digital'],\n    attendu: 'INVALIDE'\n  },\n  {\n    id: 'test-valide-2',\n    title: 'Alternance - Pentesteur Junior en Formation',\n    company: 'Wavestone Cybersecurity',\n    description: 'Formation alternance de 2 ans pour devenir pentesteur. Missions : tests d\\'intrusion sur applications web, audit de s√©curit√© r√©seau.',\n    location: 'Marseille, France',\n    contract_type: 'Contrat de professionnalisation',\n    keywords: ['alternance', 'pentest', 'cybers√©curit√©'],\n    attendu: 'VALIDE'\n  },\n  {\n    id: 'test-invalide-2',\n    title: 'CDI - Ing√©nieur Cybers√©curit√© Senior 7+ ans',\n    company: 'Thales Group',\n    description: 'Poste d\\'ing√©nieur cybers√©curit√© senior avec 7+ ann√©es d\\'exp√©rience. Architecture s√©curit√©, gestion d\\'√©quipe.',\n    location: 'Toulouse, France',\n    contract_type: 'CDI',\n    keywords: ['CDI', 'senior', 'cybers√©curit√©'],\n    attendu: 'INVALIDE'\n  }\n];\n\nconsole.log('üìã Offres test g√©n√©r√©es:', offresTest.length);\nconsole.log('‚úÖ Offres VALIDES attendues: 2');\nconsole.log('‚ùå Offres INVALIDES attendues: 2');\n\noffresTest.forEach((offre, index) => {\n  console.log(`${index + 1}. ${offre.title} ‚Üí ${offre.attendu}`);\n});\n\nreturn offresTest.map(offre => ({ json: offre }));"
      },
      "id": "generator-http",
      "name": "üß™ G√©n√©rateur Test",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 300]
    },
    {
      "parameters": {
        "jsCode": "// PR√âPARATION PAYLOAD MISTRAL\nconst offre = $input.item.json;\n\nconsole.log(`ü§ñ === PR√âPARATION PAYLOAD POUR: ${offre.title} ===`);\nconsole.log('üéØ R√©sultat attendu:', offre.attendu);\n\nconst prompt = `ANALYSE CETTE OFFRE D'EMPLOI :\n\nTITRE: ${offre.title}\nENTREPRISE: ${offre.company}\nTYPE: ${offre.contract_type}\nDESCRIPTION: ${offre.description}\n\nCRIT√àRES DE VALIDATION :\n1. CONTRAT = apprentissage OU alternance OU contrat pro\n2. DOMAINE = cybers√©curit√© OU s√©curit√© informatique\n\nR√âPONDS UNIQUEMENT PAR :\n- CLASSIFICATION: VALIDE (si les 2 crit√®res sont remplis)\n- CLASSIFICATION: INVALIDE (sinon)\n- JUSTIFICATION: [explique pourquoi]`;\n\nconst payload = {\n  model: \"mistral-large-latest\",\n  messages: [\n    {\n      role: \"system\",\n      content: \"Tu es un classificateur pr√©cis. Tu r√©ponds toujours avec le format exact demand√©.\"\n    },\n    {\n      role: \"user\",\n      content: prompt\n    }\n  ],\n  temperature: 0.05,\n  max_tokens: 200\n};\n\nconsole.log('üìã Payload cr√©√© pour Mistral');\n\nreturn {\n  json: {\n    ...offre,\n    payload_string: JSON.stringify(payload),\n    processing_index: $itemIndex\n  }\n};"
      },
      "id": "prepare-payload",
      "name": "üìã Pr√©parer Payload",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [680, 300]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.mistral.ai/v1/chat/completions",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer fe8GdBIIBwYk8Dj1GvclASPE3j0Zbt95"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "contentType": "raw",
        "body": "={{ $json.payload_string }}",
        "options": {
          "timeout": 30000
        }
      },
      "id": "call-mistral-http",
      "name": "üåê Appel Mistral HTTP",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [900, 300],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "jsCode": "// TRAITEMENT SUCC√àS - CLASSIFICATION AM√âLIOR√âE\nconst originalData = $('üìã Pr√©parer Payload').item.json;\nconst apiResponse = $input.item.json;\n\nconsole.log(`‚úÖ === TRAITEMENT SUCC√àS POUR: ${originalData.title} ===`);\nconsole.log('üéØ R√©sultat attendu:', originalData.attendu);\n\nif (apiResponse.choices && apiResponse.choices[0] && apiResponse.choices[0].message) {\n  const content = apiResponse.choices[0].message.content.trim();\n  console.log(`üìù R√©ponse Mistral:`, content);\n\n  // CLASSIFICATION AM√âLIOR√âE - Recherche de patterns pr√©cis\n  let classification, isValid, confidence;\n  \n  // Patterns sp√©cifiques pour √©viter les faux positifs\n  const validExact = /CLASSIFICATION:\\s*VALIDE/i.test(content);\n  const invalidExact = /CLASSIFICATION:\\s*INVALIDE/i.test(content);\n  \n  console.log(`üîç Pattern VALIDE exact trouv√©: ${validExact}`);\n  console.log(`üîç Pattern INVALIDE exact trouv√©: ${invalidExact}`);\n\n  if (validExact && !invalidExact) {\n    classification = 'VALIDE';\n    isValid = true;\n    confidence = 0.95;\n    console.log(`‚úÖ CLASS√â VALIDE`);\n  } else if (invalidExact) {\n    classification = 'INVALIDE';\n    isValid = false;\n    confidence = 0.95;\n    console.log(`‚ùå CLASS√â INVALIDE`);\n  } else {\n    // Fallback plus intelligent\n    const contentLower = content.toLowerCase();\n    \n    // Recherche d'indicateurs positifs forts\n    const positiveIndicators = [\n      'offre valide',\n      'crit√®res remplis',\n      'correspond aux crit√®res',\n      'r√©pond aux exigences'\n    ];\n    \n    // Recherche d'indicateurs n√©gatifs forts\n    const negativeIndicators = [\n      'offre invalide',\n      'ne correspond pas',\n      'crit√®res non remplis',\n      'ne r√©pond pas aux crit√®res',\n      'pas d\\'alternance',\n      'pas de cybers√©curit√©'\n    ];\n    \n    const hasPositive = positiveIndicators.some(indicator => contentLower.includes(indicator));\n    const hasNegative = negativeIndicators.some(indicator => contentLower.includes(indicator));\n    \n    if (hasPositive && !hasNegative) {\n      classification = 'VALIDE';\n      isValid = true;\n      confidence = 0.8;\n      console.log(`‚úÖ CLASS√â VALIDE (fallback positif)`);\n    } else if (hasNegative) {\n      classification = 'INVALIDE';\n      isValid = false;\n      confidence = 0.8;\n      console.log(`‚ùå CLASS√â INVALIDE (fallback n√©gatif)`);\n    } else {\n      classification = 'INCERTAIN';\n      isValid = false;\n      confidence = 0.3;\n      console.log(`‚ö†Ô∏è CLASSIFICATION INCERTAINE`);\n    }\n  }\n\n  // V√©rification avec le r√©sultat attendu\n  const isCorrect = classification === originalData.attendu;\n  console.log(`üéØ Attendu: ${originalData.attendu}, Obtenu: ${classification}, Correct: ${isCorrect}`);\n\n  return {\n    json: {\n      ...originalData,\n      mistral_response: content,\n      classification: classification,\n      is_valid: isValid,\n      confidence: confidence,\n      is_correct: isCorrect,\n      model_used: apiResponse.model || 'mistral-large-latest',\n      usage: apiResponse.usage || {},\n      processed_at: new Date().toISOString(),\n      status: 'SUCCESS'\n    }\n  };\n} else {\n  console.log(`‚ùå Structure r√©ponse API invalide`);\n  return {\n    json: {\n      ...originalData,\n      mistral_response: 'STRUCTURE_INVALIDE',\n      classification: 'ERREUR',\n      is_valid: false,\n      confidence: 0,\n      is_correct: false,\n      processed_at: new Date().toISOString(),\n      status: 'ERROR_STRUCTURE'\n    }\n  };\n}"
      },
      "id": "process-success",
      "name": "‚úÖ Traiter Succ√®s",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1120, 200]
    },
    {
      "parameters": {
        "jsCode": "// TRAITEMENT ERREUR - ANALYSE D√âTAILL√âE\nconst originalData = $('üìã Pr√©parer Payload').item.json;\nconst errorData = $input.item;\n\nconsole.log(`‚ùå === ERREUR POUR: ${originalData.title} ===`);\nconsole.log('üîç Erreur compl√®te:', JSON.stringify(errorData, null, 2));\n\n// Analyser l'erreur sp√©cifiquement\nlet errorType = 'UNKNOWN';\nlet suggestion = 'V√©rifier manuellement';\n\nif (errorData.httpCode === 422) {\n  errorType = 'VALIDATION_ERROR';\n  if (errorData.message && errorData.message.includes('messages')) {\n    suggestion = 'Champ messages manquant dans le payload';\n  }\n} else if (errorData.httpCode === 401) {\n  errorType = 'AUTH_ERROR';\n  suggestion = 'Cl√© API invalide ou expir√©e';\n} else if (errorData.httpCode === 429) {\n  errorType = 'RATE_LIMIT';\n  suggestion = 'Trop de requ√™tes, attendre et r√©essayer';\n}\n\nconsole.log('üè∑Ô∏è Type d\\'erreur:', errorType);\nconsole.log('üí° Suggestion:', suggestion);\n\nreturn {\n  json: {\n    ...originalData,\n    mistral_response: 'ERREUR_API',\n    classification: 'ERREUR',\n    is_valid: false,\n    confidence: 0,\n    is_correct: false,\n    error_type: errorType,\n    error_code: errorData.httpCode,\n    error_message: errorData.message,\n    suggestion: suggestion,\n    processed_at: new Date().toISOString(),\n    status: 'ERROR'\n  }\n};"
      },
      "id": "process-error",
      "name": "‚ùå Traiter Erreur",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1120, 400]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition-valid-http",
              "leftValue": "={{ $json.classification }}",
              "rightValue": "VALIDE",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "check-valid-http",
      "name": "Classification ?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [1340, 300]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "action-valid-http",
              "name": "action",
              "value": "OFFRE_ACCEPTEE",
              "type": "string"
            },
            {
              "id": "message-valid-http",
              "name": "message",
              "value": "‚úÖ {{ $json.title }} - VALID√âE (conf: {{ $json.confidence }})",
              "type": "string"
            },
            {
              "id": "check-valid-http",
              "name": "verification",
              "value": "Attendu: {{ $json.attendu }}, Obtenu: {{ $json.classification }}, Correct: {{ $json.is_correct }}",
              "type": "string"
            },
            {
              "id": "summary-valid",
              "name": "summary",
              "value": "{{ $json.company }} | {{ $json.contract_type }} | Cybers√©curit√©: ‚úÖ",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "result-valid-http",
      "name": "‚úÖ Offre Valide",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [1560, 200]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "action-invalid-http",
              "name": "action",
              "value": "OFFRE_REJETEE",
              "type": "string"
            },
            {
              "id": "message-invalid-http",
              "name": "message",
              "value": "‚ùå {{ $json.title }} - REJET√âE ({{ $json.classification }})",
              "type": "string"
            },
            {
              "id": "check-invalid-http",
              "name": "verification",
              "value": "Attendu: {{ $json.attendu }}, Obtenu: {{ $json.classification }}, Correct: {{ $json.is_correct }}",
              "type": "string"
            },
            {
              "id": "summary-invalid",
              "name": "summary",
              "value": "{{ $json.company }} | {{ $json.contract_type }} | Raison: {{ $json.classification }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "result-invalid-http",
      "name": "‚ùå Offre Rejet√©e",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [1560, 400]
    }
  ],
  "pinData": {},
  "connections": {
    "Start": {
      "main": [
        [
          {
            "node": "üß™ G√©n√©rateur Test",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üß™ G√©n√©rateur Test": {
      "main": [
        [
          {
            "node": "üìã Pr√©parer Payload",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üìã Pr√©parer Payload": {
      "main": [
        [
          {
            "node": "üåê Appel Mistral HTTP",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üåê Appel Mistral HTTP": {
      "main": [
        [
          {
            "node": "‚úÖ Traiter Succ√®s",
            "type": "main",
            "index": 0
          }
        ]
      ],
      "error": [
        [
          {
            "node": "‚ùå Traiter Erreur",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "‚úÖ Traiter Succ√®s": {
      "main": [
        [
          {
            "node": "Classification ?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "‚ùå Traiter Erreur": {
      "main": [
        [
          {
            "node": "Classification ?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Classification ?": {
      "main": [
        [
          {
            "node": "‚úÖ Offre Valide",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "‚ùå Offre Rejet√©e",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1",
    "saveManualExecutions": true
  },
  "versionId": "production-http-v1",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "id": "workflow-production-http",
  "tags": ["production", "http", "classification", "working"]
}