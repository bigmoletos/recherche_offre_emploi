{
  "name": "Test API R√©elle - La Bonne Alternance",
  "nodes": [
    {
      "parameters": {},
      "id": "start-test-lba",
      "name": "Start",
      "type": "n8n-nodes-base.start",
      "typeVersion": 1,
      "position": [240, 300]
    },
    {
      "parameters": {
        "method": "GET",
        "url": "https://labonnealternance.pole-emploi.fr/api/v1/jobs/search",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "latitude",
              "value": "48.8566"
            },
            {
              "name": "longitude",
              "value": "2.3522"
            },
            {
              "name": "radius",
              "value": "50"
            },
            {
              "name": "romes",
              "value": "M1802,M1810"
            },
            {
              "name": "caller",
              "value": "n8n-test-cybersecurity"
            }
          ]
        },
        "options": {
          "timeout": 30000
        }
      },
      "id": "call-lba-api-real",
      "name": "üåê Test API LBA",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [460, 300],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "jsCode": "// ANALYSE R√âPONSE API LA BONNE ALTERNANCE R√âELLE\nconst apiResponse = $input.item.json;\n\nconsole.log('üìä === ANALYSE R√âPONSE LBA R√âELLE ===');\nconsole.log('üîç Structure compl√®te:', JSON.stringify(apiResponse, null, 2));\n\n// Analyser la structure\nlet analysisResult = {\n  success: false,\n  structure_analysis: {},\n  offers_found: 0,\n  sample_offers: [],\n  next_steps: []\n};\n\nif (apiResponse && typeof apiResponse === 'object') {\n  console.log('‚úÖ R√©ponse JSON valide re√ßue');\n  \n  // Analyser les propri√©t√©s principales\n  const mainKeys = Object.keys(apiResponse);\n  console.log('üîë Cl√©s principales:', mainKeys);\n  \n  analysisResult.structure_analysis = {\n    main_keys: mainKeys,\n    has_jobs_array: Array.isArray(apiResponse.jobs),\n    has_results_array: Array.isArray(apiResponse.results),\n    has_data_array: Array.isArray(apiResponse.data),\n    total_properties: mainKeys.length\n  };\n  \n  // Chercher le tableau d'offres\n  let offersArray = null;\n  let offersKey = null;\n  \n  if (Array.isArray(apiResponse.jobs)) {\n    offersArray = apiResponse.jobs;\n    offersKey = 'jobs';\n  } else if (Array.isArray(apiResponse.results)) {\n    offersArray = apiResponse.results;\n    offersKey = 'results';\n  } else if (Array.isArray(apiResponse.data)) {\n    offersArray = apiResponse.data;\n    offersKey = 'data';\n  } else if (Array.isArray(apiResponse.offres)) {\n    offersArray = apiResponse.offres;\n    offersKey = 'offres';\n  }\n  \n  if (offersArray) {\n    console.log(`üìã Tableau d'offres trouv√©: ${offersKey} (${offersArray.length} items)`);\n    analysisResult.offers_found = offersArray.length;\n    analysisResult.offers_key = offersKey;\n    \n    // Analyser 2-3 offres exemple\n    const sampleSize = Math.min(3, offersArray.length);\n    for (let i = 0; i < sampleSize; i++) {\n      const offer = offersArray[i];\n      console.log(`üìÑ Offre ${i + 1}:`, JSON.stringify(offer, null, 2));\n      \n      analysisResult.sample_offers.push({\n        index: i,\n        keys: Object.keys(offer),\n        title: offer.title || offer.intitule || offer.libelle || 'Titre non trouv√©',\n        company: offer.company?.name || offer.entreprise?.nom || offer.entreprise?.raison_sociale || 'Entreprise non trouv√©e',\n        location: offer.lieu || offer.place || offer.localisation || 'Lieu non trouv√©',\n        full_object: offer\n      });\n    }\n    \n    analysisResult.success = true;\n    analysisResult.next_steps = [\n      'Adapter le workflow de traitement',\n      'Mapper les champs vers format unifi√©',\n      'Tester classification Mistral',\n      'Impl√©menter filtrage cybers√©curit√©'\n    ];\n  } else {\n    console.log('‚ö†Ô∏è Aucun tableau d\\'offres identifi√©');\n    analysisResult.next_steps = [\n      'V√©rifier la documentation API LBA',\n      'Tester avec diff√©rents param√®tres',\n      'Contacter support API si n√©cessaire'\n    ];\n  }\n} else {\n  console.log('‚ùå R√©ponse invalide ou vide');\n  analysisResult.error = 'R√©ponse API invalide';\n  analysisResult.next_steps = [\n    'V√©rifier URL API',\n    'V√©rifier param√®tres de requ√™te',\n    'Tester avec curl direct'\n  ];\n}\n\nconsole.log('üéØ R√©sultat analyse:', analysisResult.success ? 'SUCC√àS' : '√âCHEC');\nconsole.log('üìä Offres trouv√©es:', analysisResult.offers_found);\n\nreturn {\n  json: {\n    test_name: 'LBA API Real Test',\n    test_timestamp: new Date().toISOString(),\n    api_endpoint: 'https://labonnealternance.pole-emploi.fr/api/v1/jobs/search',\n    search_params: {\n      latitude: 48.8566,\n      longitude: 2.3522,\n      radius: 50,\n      romes: 'M1802,M1810',\n      caller: 'n8n-test-cybersecurity'\n    },\n    analysis_result: analysisResult,\n    raw_response: apiResponse\n  }\n};"
      },
      "id": "analyze-lba-response",
      "name": "üìä Analyser R√©ponse LBA",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [680, 200]
    },
    {
      "parameters": {
        "jsCode": "// ANALYSE ERREUR API LA BONNE ALTERNANCE\nconst errorData = $input.item;\n\nconsole.log('‚ùå === ERREUR API LBA R√âELLE ===');\nconsole.log('üîç Code erreur HTTP:', errorData.httpCode);\nconsole.log('üìã Message:', errorData.message);\nconsole.log('üåê URL tent√©e:', errorData.config?.url);\nconsole.log('üìä D√©tails complets:', JSON.stringify(errorData, null, 2));\n\n// Analyse de l'erreur\nlet errorAnalysis = {\n  error_type: 'UNKNOWN',\n  probable_cause: 'Ind√©termin√©e',\n  suggested_fixes: [],\n  is_api_available: false,\n  retry_recommended: false\n};\n\nswitch(errorData.httpCode) {\n  case 400:\n    errorAnalysis = {\n      error_type: 'BAD_REQUEST',\n      probable_cause: 'Param√®tres de requ√™te invalides',\n      suggested_fixes: [\n        'V√©rifier format latitude/longitude',\n        'V√©rifier codes ROME valides',\n        'Tester avec param√®tres minimaux'\n      ],\n      is_api_available: true,\n      retry_recommended: true\n    };\n    break;\n    \n  case 404:\n    errorAnalysis = {\n      error_type: 'NOT_FOUND',\n      probable_cause: 'Endpoint API modifi√© ou supprim√©',\n      suggested_fixes: [\n        'V√©rifier documentation API LBA',\n        'Tester URL alternative',\n        'Contacter support LBA'\n      ],\n      is_api_available: false,\n      retry_recommended: false\n    };\n    break;\n    \n  case 403:\n    errorAnalysis = {\n      error_type: 'FORBIDDEN',\n      probable_cause: 'Acc√®s non autoris√©',\n      suggested_fixes: [\n        'V√©rifier si authentification requise',\n        'Modifier User-Agent',\n        'Respecter rate limiting'\n      ],\n      is_api_available: true,\n      retry_recommended: true\n    };\n    break;\n    \n  case 429:\n    errorAnalysis = {\n      error_type: 'RATE_LIMITED',\n      probable_cause: 'Trop de requ√™tes',\n      suggested_fixes: [\n        'Attendre avant retry',\n        'Impl√©menter rate limiting',\n        'Espacer les requ√™tes'\n      ],\n      is_api_available: true,\n      retry_recommended: true\n    };\n    break;\n    \n  case 500:\n  case 502:\n  case 503:\n    errorAnalysis = {\n      error_type: 'SERVER_ERROR',\n      probable_cause: 'Probl√®me serveur LBA',\n      suggested_fixes: [\n        'R√©essayer plus tard',\n        'V√©rifier status page LBA',\n        'Utiliser source alternative temporairement'\n      ],\n      is_api_available: false,\n      retry_recommended: true\n    };\n    break;\n    \n  default:\n    if (!errorData.httpCode) {\n      errorAnalysis = {\n        error_type: 'NETWORK_ERROR',\n        probable_cause: 'Probl√®me r√©seau ou timeout',\n        suggested_fixes: [\n          'V√©rifier connexion internet',\n          'Augmenter timeout',\n          'Tester avec proxy si n√©cessaire'\n        ],\n        is_api_available: false,\n        retry_recommended: true\n      };\n    }\n}\n\nconsole.log('üîç Type erreur identifi√©:', errorAnalysis.error_type);\nconsole.log('üí° Cause probable:', errorAnalysis.probable_cause);\nconsole.log('üõ†Ô∏è Solutions sugg√©r√©es:', errorAnalysis.suggested_fixes);\n\nreturn {\n  json: {\n    test_name: 'LBA API Real Test - ERROR',\n    test_timestamp: new Date().toISOString(),\n    error_details: {\n      http_code: errorData.httpCode,\n      message: errorData.message,\n      url: errorData.config?.url,\n      analysis: errorAnalysis\n    },\n    investigation_needed: !errorAnalysis.is_api_available,\n    next_actions: errorAnalysis.suggested_fixes,\n    raw_error: errorData\n  }\n};"
      },
      "id": "analyze-lba-error",
      "name": "‚ùå Analyser Erreur LBA",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [680, 400]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition-offers-found",
              "leftValue": "={{ $json.analysis_result.offers_found }}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "check-offers-found",
      "name": "üîç Offres Trouv√©es ?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [900, 300]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "success-status",
              "name": "status",
              "value": "API_LBA_FUNCTIONAL",
              "type": "string"
            },
            {
              "id": "success-offers",
              "name": "offers_count",
              "value": "={{ $json.analysis_result.offers_found }}",
              "type": "number"
            },
            {
              "id": "success-endpoint",
              "name": "working_endpoint",
              "value": "{{ $json.api_endpoint }}",
              "type": "string"
            },
            {
              "id": "success-structure",
              "name": "data_structure",
              "value": "{{ $json.analysis_result.offers_key }}",
              "type": "string"
            },
            {
              "id": "success-samples",
              "name": "sample_offers",
              "value": "={{ JSON.stringify($json.analysis_result.sample_offers) }}",
              "type": "string"
            },
            {
              "id": "success-next",
              "name": "next_steps",
              "value": "{{ $json.analysis_result.next_steps.join(', ') }}",
              "type": "string"
            },
            {
              "id": "success-summary",
              "name": "summary",
              "value": "‚úÖ API La Bonne Alternance fonctionnelle - {{ $json.analysis_result.offers_found }} offres trouv√©es",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "format-success-result",
      "name": "‚úÖ API Fonctionnelle",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [1120, 200]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "fail-status",
              "name": "status",
              "value": "API_LBA_NOT_WORKING",
              "type": "string"
            },
            {
              "id": "fail-reason",
              "name": "failure_reason",
              "value": "Aucune offre trouv√©e ou structure invalide",
              "type": "string"
            },
            {
              "id": "fail-structure",
              "name": "response_structure",
              "value": "={{ JSON.stringify($json.analysis_result.structure_analysis) }}",
              "type": "string"
            },
            {
              "id": "fail-actions",
              "name": "required_actions",
              "value": "{{ $json.analysis_result.next_steps.join(', ') }}",
              "type": "string"
            },
            {
              "id": "fail-summary",
              "name": "summary",
              "value": "‚ùå API La Bonne Alternance - Probl√®me de structure ou absence de donn√©es",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "format-fail-result",
      "name": "‚ùå API Probl√©matique",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [1120, 400]
    }
  ],
  "pinData": {},
  "connections": {
    "Start": {
      "main": [
        [
          {
            "node": "üåê Test API LBA",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üåê Test API LBA": {
      "main": [
        [
          {
            "node": "üìä Analyser R√©ponse LBA",
            "type": "main",
            "index": 0
          }
        ]
      ],
      "error": [
        [
          {
            "node": "‚ùå Analyser Erreur LBA",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üìä Analyser R√©ponse LBA": {
      "main": [
        [
          {
            "node": "üîç Offres Trouv√©es ?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "‚ùå Analyser Erreur LBA": {
      "main": [
        [
          {
            "node": "üîç Offres Trouv√©es ?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üîç Offres Trouv√©es ?": {
      "main": [
        [
          {
            "node": "‚úÖ API Fonctionnelle",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "‚ùå API Probl√©matique",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "v1",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "id": "workflow-test-lba",
  "tags": ["test", "lba"]
}