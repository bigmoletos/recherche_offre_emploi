{
  "name": "DEBUG - Mistral API 404 Error",
  "nodes": [
    {
      "parameters": {},
      "id": "start-debug-404",
      "name": "Start",
      "type": "n8n-nodes-base.start",
      "typeVersion": 1,
      "position": [240, 300]
    },
    {
      "parameters": {
        "jsCode": "// TEST CONFIGURATION MISTRAL API\nconsole.log('üîç === DIAGNOSTIC MISTRAL API 404 ===');\n\n// URLs √† tester\nconst urlsToTest = [\n  {\n    name: 'URL_CORRECTE_MISTRAL',\n    url: 'https://api.mistral.ai/v1/chat/completions',\n    description: 'URL officielle document√©e'\n  },\n  {\n    name: 'URL_ALTERNATIVE_1', \n    url: 'https://api.mistral.ai/v1/completions',\n    description: 'Alternative sans chat'\n  },\n  {\n    name: 'URL_ALTERNATIVE_2',\n    url: 'https://api.mistral.ai/completions',\n    description: 'Sans version'\n  }\n];\n\n// Payload de test minimal\nconst testPayload = {\n  model: \"mistral-large-latest\",\n  messages: [\n    {\n      role: \"user\",\n      content: \"Test simple\"\n    }\n  ],\n  max_tokens: 10\n};\n\nconsole.log('üéØ URLs √† tester:', urlsToTest.length);\nconsole.log('üìã Payload test:', JSON.stringify(testPayload, null, 2));\n\nreturn urlsToTest.map((urlTest, index) => {\n  return {\n    json: {\n      test_id: `mistral-url-test-${index + 1}`,\n      test_name: urlTest.name,\n      test_url: urlTest.url,\n      test_description: urlTest.description,\n      payload_string: JSON.stringify(testPayload),\n      api_key: 'fe8GdBIIBwYk8Dj1GvclASPE3j0Zbt95',\n      timestamp: new Date().toISOString()\n    }\n  };\n});"
      },
      "id": "generate-url-tests",
      "name": "üîç G√©n√©rer Tests URL",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 300]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $json.test_url }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer {{ $json.api_key }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "User-Agent",
              "value": "n8n-debug-mistral/1.0"
            }
          ]
        },
        "sendBody": true,
        "contentType": "raw",
        "body": "={{ $json.payload_string }}",
        "options": {
          "timeout": 15000
        }
      },
      "id": "test-mistral-urls",
      "name": "üåê Tester URLs Mistral",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [680, 300],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "jsCode": "// ANALYSE SUCC√àS API MISTRAL\nconst testConfig = $('üîç G√©n√©rer Tests URL').item.json;\nconst apiResponse = $input.item.json;\n\nconsole.log(`‚úÖ === SUCC√àS: ${testConfig.test_name} ===`);\nconsole.log('üåê URL test√©e:', testConfig.test_url);\nconsole.log('üìä R√©ponse re√ßue:', JSON.stringify(apiResponse, null, 2));\n\n// V√©rifier structure r√©ponse\nlet analysisResult = {\n  test_name: testConfig.test_name,\n  url_tested: testConfig.test_url,\n  success: true,\n  response_valid: false,\n  has_choices: false,\n  has_content: false,\n  recommendation: 'UNKNOWN'\n};\n\nif (apiResponse && apiResponse.choices && Array.isArray(apiResponse.choices)) {\n  analysisResult.has_choices = true;\n  \n  if (apiResponse.choices.length > 0 && apiResponse.choices[0].message && apiResponse.choices[0].message.content) {\n    analysisResult.has_content = true;\n    analysisResult.response_valid = true;\n    analysisResult.recommendation = 'URL_FONCTIONNELLE';\n    \n    console.log('‚úÖ URL fonctionnelle!');\n    console.log('üìù Contenu re√ßu:', apiResponse.choices[0].message.content);\n  }\n}\n\nif (!analysisResult.response_valid) {\n  analysisResult.recommendation = 'URL_REPONSE_INVALIDE';\n  console.log('‚ö†Ô∏è URL r√©pond mais structure invalide');\n}\n\nreturn {\n  json: {\n    ...analysisResult,\n    model_used: apiResponse.model,\n    usage: apiResponse.usage,\n    full_response: apiResponse,\n    tested_at: new Date().toISOString()\n  }\n};"
      },
      "id": "analyze-success",
      "name": "‚úÖ Analyser Succ√®s",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [900, 200]
    },
    {
      "parameters": {
        "jsCode": "// ANALYSE ERREUR API MISTRAL\nconst testConfig = $('üîç G√©n√©rer Tests URL').item.json;\nconst errorData = $input.item;\n\nconsole.log(`‚ùå === ERREUR: ${testConfig.test_name} ===`);\nconsole.log('üåê URL test√©e:', testConfig.test_url);\nconsole.log('üîç Code erreur:', errorData.httpCode);\nconsole.log('üìã Message:', errorData.message);\n\n// Analyser le type d'erreur\nlet errorAnalysis = {\n  test_name: testConfig.test_name,\n  url_tested: testConfig.test_url,\n  success: false,\n  error_code: errorData.httpCode,\n  error_type: 'UNKNOWN',\n  diagnosis: '√Ä investiguer',\n  recommendation: 'TESTER_AUTRE_URL'\n};\n\nswitch(errorData.httpCode) {\n  case 404:\n    errorAnalysis.error_type = 'NOT_FOUND';\n    errorAnalysis.diagnosis = 'Endpoint inexistant';\n    errorAnalysis.recommendation = 'URL_INCORRECTE';\n    break;\n  case 401:\n    errorAnalysis.error_type = 'UNAUTHORIZED';\n    errorAnalysis.diagnosis = 'Cl√© API invalide';\n    errorAnalysis.recommendation = 'VERIFIER_CLE_API';\n    break;\n  case 403:\n    errorAnalysis.error_type = 'FORBIDDEN';\n    errorAnalysis.diagnosis = 'Acc√®s refus√©';\n    errorAnalysis.recommendation = 'VERIFIER_PERMISSIONS';\n    break;\n  case 429:\n    errorAnalysis.error_type = 'RATE_LIMIT';\n    errorAnalysis.diagnosis = 'Trop de requ√™tes';\n    errorAnalysis.recommendation = 'ATTENDRE_ET_REESSAYER';\n    break;\n  case 500:\n    errorAnalysis.error_type = 'SERVER_ERROR';\n    errorAnalysis.diagnosis = 'Probl√®me serveur Mistral';\n    errorAnalysis.recommendation = 'REESSAYER_PLUS_TARD';\n    break;\n}\n\nconsole.log('üè∑Ô∏è Type erreur:', errorAnalysis.error_type);\nconsole.log('üí° Diagnostic:', errorAnalysis.diagnosis);\nconsole.log('üéØ Recommandation:', errorAnalysis.recommendation);\n\nreturn {\n  json: {\n    ...errorAnalysis,\n    raw_error: errorData,\n    tested_at: new Date().toISOString()\n  }\n};"
      },
      "id": "analyze-error",
      "name": "‚ùå Analyser Erreur",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [900, 400]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition-url-works",
              "leftValue": "={{ $json.success }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equal"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "check-working-url",
      "name": "üîç URL Fonctionne ?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [1120, 300]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "working-url",
              "name": "working_url",
              "value": "{{ $json.url_tested }}",
              "type": "string"
            },
            {
              "id": "working-test",
              "name": "test_name",
              "value": "{{ $json.test_name }}",
              "type": "string"
            },
            {
              "id": "working-valid",
              "name": "response_valid",
              "value": "{{ $json.response_valid }}",
              "type": "boolean"
            },
            {
              "id": "working-model",
              "name": "model_confirmed",
              "value": "{{ $json.model_used }}",
              "type": "string"
            },
            {
              "id": "working-recommendation",
              "name": "action",
              "value": "UTILISER_CETTE_URL",
              "type": "string"
            },
            {
              "id": "working-summary",
              "name": "summary",
              "value": "‚úÖ URL Mistral fonctionnelle: {{ $json.url_tested }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "format-working-url",
      "name": "‚úÖ URL Fonctionnelle",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [1340, 200]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "failed-url",
              "name": "failed_url",
              "value": "{{ $json.url_tested }}",
              "type": "string"
            },
            {
              "id": "failed-test",
              "name": "test_name",
              "value": "{{ $json.test_name }}",
              "type": "string"
            },
            {
              "id": "failed-error",
              "name": "error_type",
              "value": "{{ $json.error_type }}",
              "type": "string"
            },
            {
              "id": "failed-code",
              "name": "error_code",
              "value": "{{ $json.error_code }}",
              "type": "number"
            },
            {
              "id": "failed-diagnosis",
              "name": "diagnosis",
              "value": "{{ $json.diagnosis }}",
              "type": "string"
            },
            {
              "id": "failed-action",
              "name": "action",
              "value": "{{ $json.recommendation }}",
              "type": "string"
            },
            {
              "id": "failed-summary",
              "name": "summary",
              "value": "‚ùå URL √©choue: {{ $json.url_tested }} ({{ $json.error_type }})",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "format-failed-url",
      "name": "‚ùå URL √âchoue",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [1340, 400]
    }
  ],
  "pinData": {},
  "connections": {
    "Start": {
      "main": [
        [
          {
            "node": "üîç G√©n√©rer Tests URL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üîç G√©n√©rer Tests URL": {
      "main": [
        [
          {
            "node": "üåê Tester URLs Mistral",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üåê Tester URLs Mistral": {
      "main": [
        [
          {
            "node": "‚úÖ Analyser Succ√®s",
            "type": "main",
            "index": 0
          }
        ]
      ],
      "error": [
        [
          {
            "node": "‚ùå Analyser Erreur",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "‚úÖ Analyser Succ√®s": {
      "main": [
        [
          {
            "node": "üîç URL Fonctionne ?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "‚ùå Analyser Erreur": {
      "main": [
        [
          {
            "node": "üîç URL Fonctionne ?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üîç URL Fonctionne ?": {
      "main": [
        [
          {
            "node": "‚úÖ URL Fonctionnelle",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "‚ùå URL √âchoue",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1",
    "saveManualExecutions": true
  },
  "versionId": "debug-404-v1",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "id": "workflow-debug-404",
  "tags": ["debug", "mistral", "404"]
}