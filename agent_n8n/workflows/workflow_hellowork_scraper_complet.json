{
    "name": "HelloWork_Scraper_Complet",
    "nodes": [
        {
            "parameters": {},
            "id": "d2e683e9-d4bd-4813-a35d-420b6b9cc14b",
            "name": "üöÄ Start",
            "type": "n8n-nodes-base.start",
            "typeVersion": 1,
            "position": [
                -2060,
                440
            ]
        },
        {
            "parameters": {
                "jsCode": "// CONFIGURATION HELLOWORK CYBERS√âCURIT√â - MULTI-REQU√äTES AVEC LIEUX\nconsole.log('üîç === RECHERCHE HELLOWORK CYBERS√âCURIT√â (multi-combinaisons + lieux) ===');\n\nconst site_name = 'HelloWork';\nconst base_url = 'https://www.hellowork.com';\nconst keywords_main = ['cybers√©curit√©', 'reseau et telecom'];\nconst alternance_types = ['alternance', 'apprentissage'];\nconst contract_types = ['apprentissage', 'contrat-professionnalisation'];\nconst locations = ['Marseille', 'Paris', 'Aix-en-Provence'];\nconst experience_level = 'd√©butant';\n\nconst urls = [];\nconst configs = [];\n\nfor (const kw of keywords_main) {\n  for (const alt of alternance_types) {\n    for (const loc of locations) {\n      const query = encodeURIComponent(`${kw} ${alt}`);\n      const location_encoded = encodeURIComponent(loc);\n      const url = `${base_url}/fr-fr/emploi/recherche.html?k=${query}&l=${location_encoded}&c=${contract_types.join(',')}`;\n      urls.push(url);\n\n      configs.push({\n        site_name,\n        base_url,\n        search_params: {\n          url,\n          keywords: [kw, alt],\n          location: loc,\n          contract_types,\n          experience_level\n        },\n        scraping_config: {\n          timeout: 30000,\n          retry_attempts: 3,\n          user_agent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',\n          headers: {\n            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',\n            'Accept-Language': 'fr-FR,fr;q=0.9,en;q=0.8',\n            'Accept-Encoding': 'gzip, deflate, br',\n            'DNT': '1',\n            'Connection': 'keep-alive',\n            'Upgrade-Insecure-Requests': '1'\n          }\n        },\n        expected_results: {\n          min_offers: 1,\n          max_offers: 20,\n          target_alternance: true,\n          target_cybersecurity: true\n        }\n      });\n    }\n  }\n}\n\nconsole.log('üéØ Site cible:', site_name);\nconsole.log('üîó URLs g√©n√©r√©es:', urls);\nconsole.log('üìã Nombre de requ√™tes g√©n√©r√©es:', configs.length);\n\n// Retourne chaque configuration comme un item s√©par√© pour n8n\nreturn configs.map(cfg => ({ json: cfg }));"
            },
            "id": "config-node",
            "name": "‚öôÔ∏è Config HelloWork",
            "type": "n8n-nodes-base.code",
            "typeVersion": 2,
            "position": [
                -1660,
                160
            ]
        },
        {
            "parameters": {
                "method": "GET",
                "url": "={{ $json.search_params.url }}",
                "sendHeaders": true,
                "headerParameters": {
                    "parameters": [
                        {
                            "name": "User-Agent",
                            "value": "={{ $json.scraping_config.user_agent }}"
                        },
                        {
                            "name": "Accept",
                            "value": "={{ $json.scraping_config.headers.Accept }}"
                        },
                        {
                            "name": "Accept-Language",
                            "value": "={{ $json.scraping_config.headers['Accept-Language'] }}"
                        }
                    ]
                },
                "options": {
                    "timeout": "={{ $json.scraping_config.timeout }}"
                }
            },
            "id": "e8cce86f-29af-40fc-9c4d-9b3927cae677",
            "name": "üåê Fetch Page",
            "type": "n8n-nodes-base.httpRequest",
            "typeVersion": 4.2,
            "position": [
                -1440,
                -140
            ],
            "onError": "continueErrorOutput"
        },
        {
            "parameters": {
                "jsCode": "const input = $input.item.json;\nif (!input) { throw new Error('Aucune donn√©e en entr√©e'); }\nconst config = input.config;\nif (!config || !config.search_params) { throw new Error('Configuration invalide: search_params manquant'); }\n\nconst offers = [];\nconst html = input.offers_html;\nconsole.log('üìÑ Longueur HTML √† analyser:', html.length);\n\nconst offerItems = html.match(/<li[^>]*data-id-storage-target=\"item\"[^>]*>([\\s\\S]*?)<\\/li>/gi) ||\n                   html.match(/<div[^>]*data-id-storage-target=\"item\"[^>]*>([\\s\\S]*?)<\\/div>/gi) ||\n                   html.match(/<article[^>]*>([\\s\\S]*?)<\\/article>/gi) ||\n                   html.match(/<div[^>]*class=\"[^\"]*offer-item[^\"]*\"[^>]*>([\\s\\S]*?)<\\/div>/gi) || [];\n\nconsole.log(`üîç Nombre d'offres trouv√©es: ${offerItems.length}`);\n\nfor (let index = 0; index < offerItems.length; index++) {\n    try {\n        const itemHtml = offerItems[index];\n        console.log(`\\nüìå Analyse offre ${index + 1}/${offerItems.length}`);\n        \n        const titleMatch = itemHtml.match(/<h3[^>]*>\\s*<p[^>]*class=\"[^\"]*tw-typo-l[^\"]*\"[^>]*>([^<]+)<\\/p>/i) ||\n                          itemHtml.match(/<h3[^>]*>([^<]+)<\\/h3>/i) ||\n                          itemHtml.match(/<p[^>]*class=\"[^\"]*tw-typo-l[^\"]*\"[^>]*>([^<]+)<\\/p>/i) ||\n                          itemHtml.match(/<a[^>]*data-cy=\"offerTitle\"[^>]*>([^<]+)<\\/a>/i);\n        \n        const companyMatch = itemHtml.match(/<p[^>]*class=\"[^\"]*tw-typo-s[^\"]*\"[^>]*>([^<]+)<\\/p>/i) ||\n                            itemHtml.match(/<div[^>]*class=\"[^\"]*company[^\"]*\"[^>]*>([^<]+)<\\/div>/i) ||\n                            itemHtml.match(/<span[^>]*class=\"[^\"]*company[^\"]*\"[^>]*>([^<]+)<\\/span>/i);\n        \n        const linkMatch = itemHtml.match(/<a[^>]*data-cy=\"offerTitle\"[^>]*href=\"([^\"]+)\"/i) ||\n                         itemHtml.match(/<a[^>]*href=\"([^\"]+)\"[^>]*>\\s*<h3/i) ||\n                         itemHtml.match(/<a[^>]*class=\"[^\"]*offer-link[^\"]*\"[^>]*href=\"([^\"]+)\"/i);\n        \n        const locationMatch = itemHtml.match(/<div[^>]*data-cy=\"localisationCard\"[^>]*>([^<]+)<\\/div>/i) ||\n                             itemHtml.match(/<div[^>]*class=\"[^\"]*location[^\"]*\"[^>]*>([^<]+)<\\/div>/i) ||\n                             itemHtml.match(/<span[^>]*class=\"[^\"]*location[^\"]*\"[^>]*>([^<]+)<\\/span>/i);\n        \n        const contractMatch = itemHtml.match(/<div[^>]*data-cy=\"contractCard\"[^>]*>([^<]+)<\\/div>/i) ||\n                             itemHtml.match(/<div[^>]*class=\"[^\"]*contract[^\"]*\"[^>]*>([^<]+)<\\/div>/i) ||\n                             itemHtml.match(/<span[^>]*class=\"[^\"]*contract[^\"]*\"[^>]*>([^<]+)<\\/span>/i);\n        \n        const salaryMatch = itemHtml.match(/<div[^>]*class=\"[^\"]*tw-typo-s-bold[^\"]*\"[^>]*>([^<]+)<\\/div>/i) ||\n                           itemHtml.match(/<div[^>]*class=\"[^\"]*salary[^\"]*\"[^>]*>([^<]+)<\\/div>/i) ||\n                           itemHtml.match(/<span[^>]*class=\"[^\"]*salary[^\"]*\"[^>]*>([^<]+)<\\/span>/i);\n        \n        const dateMatch = itemHtml.match(/<div[^>]*class=\"[^\"]*tw-typo-s tw-text-grey[^\"]*\"[^>]*>([^<]+)<\\/div>/i) ||\n                         itemHtml.match(/<div[^>]*class=\"[^\"]*date[^\"]*\"[^>]*>([^<]+)<\\/div>/i) ||\n                         itemHtml.match(/<span[^>]*class=\"[^\"]*date[^\"]*\"[^>]*>([^<]+)<\\/span>/i);\n        \n        let duration = null;\n        const durationMatch = itemHtml.match(/<div[^>]*data-cy=\"contractTag\"[^>]*>([^<]+)<\\/div>/i) ||\n                             itemHtml.match(/<div[^>]*class=\"[^\"]*duration[^\"]*\"[^>]*>([^<]+)<\\/div>/i) ||\n                             itemHtml.match(/<span[^>]*class=\"[^\"]*duration[^\"]*\"[^>]*>([^<]+)<\\/span>/i);\n        if (durationMatch && (durationMatch[1].includes('an') || durationMatch[1].includes('mois'))) {\n            duration = durationMatch[1].trim();\n        }\n        \n        const idMatch = itemHtml.match(/data-id-storage-item-id=\"([^\"]+)\"/i) ||\n                       itemHtml.match(/id=\"offer-([^\"]+)\"/i) ||\n                       itemHtml.match(/data-offer-id=\"([^\"]+)\"/i);\n        \n        const offer = {\n            id: idMatch ? idMatch[1] : `offer-${index}`,\n            title: titleMatch ? titleMatch[1].trim() : null,\n            company: companyMatch ? companyMatch[1].trim() : null,\n            location: locationMatch ? locationMatch[1].trim() : null,\n            contract_type: contractMatch ? contractMatch[1].trim() : null,\n            salary_range: salaryMatch ? salaryMatch[1].trim() : null,\n            duration: duration,\n            posted_date: dateMatch ? dateMatch[1].trim() : null,\n            url: linkMatch ? config.base_url + linkMatch[1] : null,\n            source_platform: config.site_name,\n            scraped_at: new Date().toISOString(),\n            search_metadata: {\n                source_url: config.search_params.url,\n                keywords: config.search_params.keywords,\n                location_search: config.search_params.location\n            }\n        };\n        \n        const isAlternanceContract = ['alternance', 'apprentissage', 'professionnalisation'].some(type => \n            (offer.contract_type || '').toLowerCase().includes(type)\n        );\n        \n        const isCyberSecurity = ['cyber', 's√©curit√©', 'security', 'soc', 'pentest', 'r√©seau', 't√©l√©com'].some(keyword => \n            ((offer.title || '') + ' ' + (offer.company || '')).toLowerCase().includes(keyword)\n        );\n        \n        offer.preliminary_analysis = {\n            is_alternance_contract: isAlternanceContract,\n            is_cybersecurity_domain: isCyberSecurity,\n            matches_criteria: isAlternanceContract && isCyberSecurity,\n            confidence_preliminary: (isAlternanceContract && isCyberSecurity) ? 0.8 : 0.3\n        };\n        \n        if (offer.title && offer.company) {\n            console.log(`‚úÖ Offre extraite: ${offer.title} - ${offer.company}`);\n            offers.push(offer);\n        } else {\n            console.log(`‚ö†Ô∏è Offre ignor√©e: donn√©es incompl√®tes`);\n        }\n    } catch (error) {\n        console.log(`‚ùå Erreur extraction offre ${index}:`, error.message);\n    }\n}\n\nconsole.log(`\\nüìä R√©sum√©: ${offers.length} offres valides extraites sur ${offerItems.length} trouv√©es`);\n\nreturn offers.map(offer => ({ json: offer }));"
            },
            "id": "scraper-liste-offres",
            "name": "üï∑Ô∏è Scraper Liste Offres",
            "type": "n8n-nodes-base.code",
            "typeVersion": 2,
            "position": [
                -840,
                -60
            ]
        },
        {
            "parameters": {
                "conditions": {
                    "options": {
                        "caseSensitive": true,
                        "leftValue": "",
                        "typeValidation": "strict",
                        "version": 1
                    },
                    "conditions": [
                        {
                            "id": "has-url",
                            "leftValue": "={{ $json.url }}",
                            "rightValue": "",
                            "operator": {
                                "type": "string",
                                "operation": "isNotEmpty"
                            }
                        },
                        {
                            "id": "valid-title",
                            "leftValue": "={{ $json.title }}",
                            "rightValue": "",
                            "operator": {
                                "type": "string",
                                "operation": "isNotEmpty"
                            }
                        }
                    ],
                    "combinator": "and"
                },
                "options": {}
            },
            "id": "filter-valid",
            "name": "üîç Filtrer Offres Valides",
            "type": "n8n-nodes-base.if",
            "typeVersion": 2,
            "position": [
                -1060,
                160
            ],
            "alwaysOutputData": true
        },
        {
            "parameters": {
                "method": "GET",
                "url": "={{ $json.url }}",
                "sendHeaders": true,
                "headerParameters": {
                    "parameters": [
                        {
                            "name": "User-Agent",
                            "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"
                        },
                        {
                            "name": "Accept",
                            "value": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"
                        }
                    ]
                },
                "options": {
                    "timeout": 20000
                }
            },
            "id": "fetch-detail",
            "name": "üåê Fetch D√©tail Offre",
            "type": "n8n-nodes-base.httpRequest",
            "typeVersion": 4.2,
            "position": [
                -860,
                60
            ],
            "onError": "continueErrorOutput"
        },
        {
            "parameters": {
                "jsCode": "const offerBase = $('üîç Filtrer Offres Valides').item.json;\nconst detailResponse = $input.item.json;\n\nconsole.log(`üìÑ === SCRAPING D√âTAIL: ${offerBase.title} ===`);\n\nif (!detailResponse || detailResponse.statusCode !== 200) {\n    console.log('‚ùå Erreur r√©cup√©ration d√©tail:', detailResponse.statusCode);\n    return [{ json: { ...offerBase, detail_error: 'FETCH_ERROR' } }];\n}\n\nconst cheerio = require('cheerio');\nconst $ = cheerio.load(detailResponse.body);\n\ntry {\n    const jobTitle = $('span[data-cy=\"jobTitle\"]').text().trim() ||\n                    $('h1#main-content > span.tw-contents').text().trim() ||\n                    $('h1.tw-typo-xl').text().trim();\n\n    const company = $('h1#main-content > span.tw-contents').text().trim() ||\n                   $('div.tw-typo-l').first().text().trim() ||\n                   $('span.company-name').text().trim();\n\n    let missions = null;\n    $('h2, h3').each((i, h) => {\n        const text = $(h).text().toLowerCase();\n        if (text.includes('mission') || text.includes('description')) {\n            const nextP = $(h).next('p.tw-typo-long-m, p.tw-typo-m, div.tw-typo-long-m');\n            if (nextP.length) {\n                missions = nextP.text().trim();\n            }\n        }\n    });\n\n    let profil = null;\n    $('h2, h3').each((i, h) => {\n        const text = $(h).text().toLowerCase();\n        if (text.includes('profil') || text.includes('profil recherch√©') || text.includes('qualification')) {\n            const nextP = $(h).next('p.tw-typo-long-m, p.tw-typo-m, div.tw-typo-long-m');\n            if (nextP.length) {\n                profil = nextP.text().trim();\n            }\n        }\n    });\n\n    let avantages = null;\n    $('h2, h3').each((i, h) => {\n        const text = $(h).text().toLowerCase();\n        if (text.includes('compl√©mentaires') || text.includes('avantage') || text.includes('b√©n√©fice')) {\n            const nextP = $(h).next('p.tw-typo-long-m, p.tw-typo-m, div.tw-typo-long-m');\n            if (nextP.length) {\n                avantages = nextP.text().trim();\n            }\n        }\n    });\n\n    const resumeTags = [];\n    $('section, div.section').each((i, section) => {\n        const header = $(section).find('div.tw-typo-xl, div.tw-typo-l, h2, h3').text();\n        if (header.includes('R√©sum√©') || header.includes('Tags')) {\n            $(section).find('li.tw-tag-secondary-s, span.tag, div.tag').each((j, tag) => {\n                resumeTags.push($(tag).text().trim());\n            });\n        }\n    });\n\n    const datePublication = $('span.tw-block.tw-typo-xs.tw-text-grey.tw-break-words').text().trim() ||\n                          $('div.date-published').text().trim() ||\n                          $('span.publication-date').text().trim();\n\n    const enrichedOffer = {\n        ...offerBase,\n        detail_scraped: true,\n        detail: {\n            job_title_detail: jobTitle || offerBase.title,\n            company_detail: company || offerBase.company,\n            missions: missions,\n            profil_recherche: profil,\n            avantages: avantages,\n            resume_tags: resumeTags,\n            date_publication_detail: datePublication,\n            scraped_detail_at: new Date().toISOString()\n        },\n        enriched_analysis: {\n            has_detailed_description: !!(missions || profil),\n            description_length: (missions || '').length + (profil || '').length,\n            has_advantages: !!avantages,\n            tags_count: resumeTags.length\n        }\n    };\n\n    console.log(`‚úÖ D√©tail extrait pour: ${enrichedOffer.title}`);\n    console.log(`üìã Missions: ${missions ? 'Oui' : 'Non'}`);\n    console.log(`üë§ Profil: ${profil ? 'Oui' : 'Non'}`);\n    console.log(`üéÅ Avantages: ${avantages ? 'Oui' : 'Non'}`);\n\n    return [{ json: enrichedOffer }];\n} catch (error) {\n    console.log(`‚ùå Erreur extraction d√©tail:`, error.message);\n    return [{ json: { ...offerBase, detail_error: error.message } }];\n}"
            },
            "id": "scraper-detail",
            "name": "üìÑ Scraper D√©tail Offre",
            "type": "n8n-nodes-base.code",
            "typeVersion": 2,
            "position": [
                -660,
                60
            ]
        },
        {
            "parameters": {
                "jsCode": "// PR√âPARATION CLASSIFICATION MISTRAL AVEC DONN√âES ENRICHIES\nconst offer = $input.item.json;\n\nconsole.log(`ü§ñ === PR√âPARATION MISTRAL: ${offer.title} ===`);\n\n// Construction du prompt avec toutes les donn√©es disponibles\nconst fullDescription = [\n  offer.title,\n  offer.detail?.missions || '',\n  offer.detail?.profil_recherche || '',\n  offer.detail?.avantages || ''\n].filter(Boolean).join('\\n\\n');\n\nconst expertPrompt = `EXPERT CLASSIFICATION ALTERNANCE CYBERS√âCURIT√â\n\n=== OFFRE COMPL√àTE √Ä ANALYSER ===\nTITRE: ${offer.title}\nENTREPRISE: ${offer.company}\nLIEU: ${offer.location}\nTYPE CONTRAT: ${offer.contract_type}\nDUR√âE: ${offer.duration || 'Non sp√©cifi√©e'}\nSALAIRE: ${offer.salary_range || 'Non communiqu√©'}\n\n=== DESCRIPTION COMPL√àTE ===\n${fullDescription}\n\n=== TAGS R√âSUM√â ===\n${offer.detail?.resume_tags ? offer.detail.resume_tags.join(', ') : 'Aucun'}\n\n=== CRIT√àRES VALIDATION STRICTE ===\n\n1. üéØ TYPE CONTRAT (OBLIGATOIRE):\n   ‚úÖ VALIDE: alternance, apprentissage, contrat professionnalisation\n   ‚ùå INVALIDE: stage, CDI, CDD, mission, freelance\n\n2. üõ°Ô∏è DOMAINE CYBERS√âCURIT√â/R√âSEAU (OBLIGATOIRE):\n   ‚úÖ VALIDE: cybers√©curit√©, s√©curit√© informatique, SOC, SIEM, pentest, audit s√©curit√©\n   ‚úÖ VALIDE: r√©seau, t√©l√©com, infrastructure, syst√®mes\n   ‚ùå INVALIDE: d√©veloppement g√©n√©ral, marketing, commercial, RH\n\n3. üìö NIVEAU FORMATION (IMPORTANT):\n   ‚úÖ PR√âF√âR√â: master, bac+4, bac+5, junior, d√©butant, formation\n   ‚ùå EXCLUSION: senior 5+ ans, expert, manager\n\n4. üéì DUR√âE APPROPRI√âE:\n   ‚úÖ VALIDE: 1 an, 2 ans, 12-24 mois\n   ‚ùå INVALIDE: < 6 mois, > 3 ans\n\n=== FORMAT R√âPONSE OBLIGATOIRE ===\nCLASSIFICATION: VALIDE ou INVALIDE\nJUSTIFICATION: [Explication pr√©cise en 1 phrase]\nCONFIANCE: [0.1 √† 1.0]\n\nAnalyse cette offre maintenant.`;\n\nconst mistralPayload = {\n  model: \"mistral-large-latest\",\n  messages: [\n    {\n      role: \"system\",\n      content: \"Tu es un expert RH sp√©cialis√© dans l'analyse d'offres d'alternance en cybers√©curit√© et r√©seaux/t√©l√©com. Tu appliques des crit√®res stricts et √©values la pertinence pour un √©tudiant en Master cybers√©curit√©.\"\n    },\n    {\n      role: \"user\",\n      content: expertPrompt\n    }\n  ],\n  temperature: 0.05,\n  max_tokens: 300\n};\n\nconsole.log('üìã Payload Mistral pr√©par√©');\nconsole.log('üìä Longueur description:', fullDescription.length);\n\nreturn {\n  json: {\n    ...offer,\n    mistral_request: {\n      payload_json: JSON.stringify(mistralPayload),\n      model: mistralPayload.model,\n      prompt_length: expertPrompt.length,\n      has_full_description: !!offer.detail?.missions\n    },\n    classification_prompt: expertPrompt,\n    prepared_at: new Date().toISOString()\n  }\n};"
            },
            "id": "prepare-mistral",
            "name": "üéØ Pr√©parer Mistral",
            "type": "n8n-nodes-base.code",
            "typeVersion": 2,
            "position": [
                -460,
                60
            ]
        },
        {
            "parameters": {
                "method": "POST",
                "url": "https://api.mistral.ai/v1/chat/completions",
                "sendHeaders": true,
                "headerParameters": {
                    "parameters": [
                        {
                            "name": "Authorization",
                            "value": "Bearer fe8GdBIIBwYk8Dj1GvclASPE3j0Zbt95"
                        },
                        {
                            "name": "Content-Type",
                            "value": "application/json"
                        }
                    ]
                },
                "sendBody": true,
                "contentType": "raw",
                "body": "={{ $json.mistral_request.payload_json }}",
                "options": {
                    "timeout": 30000
                }
            },
            "id": "api-mistral",
            "name": "üß† API Mistral",
            "type": "n8n-nodes-base.httpRequest",
            "typeVersion": 4.2,
            "position": [
                -260,
                60
            ],
            "onError": "continueErrorOutput"
        },
        {
            "parameters": {
                "jsCode": "// STOCKAGE FINAL DES OFFRES ANALYS√âES\nconst offer = $('üéØ Pr√©parer Mistral').item.json;\nconst mistralResponse = $input.item.json;\n\nconsole.log(`üíæ === STOCKAGE FINAL: ${offer.title} ===`);\n\n// Traitement de la r√©ponse Mistral\nlet classification = 'ERREUR';\nlet justification = 'Erreur traitement';\nlet confidence = 0;\nlet isValid = false;\n\nif (mistralResponse && mistralResponse.choices && mistralResponse.choices[0]) {\n  const content = mistralResponse.choices[0].message.content;\n  \n  // Parsing de la r√©ponse\n  const classMatch = content.match(/CLASSIFICATION:\\s*(VALIDE|INVALIDE)/i);\n  const justifMatch = content.match(/JUSTIFICATION:\\s*([^\\n]+)/i);\n  const confMatch = content.match(/CONFIANCE:\\s*([0-9.]+)/i);\n  \n  classification = classMatch ? classMatch[1].toUpperCase() : 'INCERTAIN';\n  justification = justifMatch ? justifMatch[1].trim() : 'Non trouv√©e';\n  confidence = confMatch ? parseFloat(confMatch[1]) : 0.5;\n  isValid = classification === 'VALIDE';\n}\n\n// Cr√©ation de l'objet final complet\nconst finalOffer = {\n  // M√©tadonn√©es\n  id: offer.id,\n  scraped_at: offer.scraped_at,\n  source_platform: offer.source_platform,\n  source_url: offer.url,\n  search_metadata: offer.search_metadata,\n  \n  // Donn√©es de base\n  title: offer.title,\n  company: offer.company,\n  location: offer.location,\n  contract_type: offer.contract_type,\n  salary_range: offer.salary_range,\n  duration: offer.duration,\n  posted_date: offer.posted_date,\n  \n  // D√©tails enrichis\n  detail: offer.detail || {},\n  \n  // Analyse IA\n  ai_classification: {\n    classification: classification,\n    justification: justification,\n    confidence: confidence,\n    is_valid_offer: isValid,\n    mistral_model: 'mistral-large-latest',\n    classified_at: new Date().toISOString()\n  },\n  \n  // Analyses pr√©liminaires\n  preliminary_analysis: offer.preliminary_analysis,\n  enriched_analysis: offer.enriched_analysis,\n  \n  // Score final\n  final_score: {\n    matches_criteria: isValid,\n    overall_quality: confidence,\n    has_full_details: !!offer.detail?.missions,\n    recommended: isValid && confidence > 0.7\n  }\n};\n\n// Log du r√©sultat\nif (isValid) {\n  console.log('üéâ ‚úÖ OFFRE VALID√âE ET STOCK√âE');\n  console.log(`üè¢ ${offer.company}`);\n  console.log(`üìç ${offer.location}`);\n  console.log(`üìä Confiance: ${confidence}`);\n} else {\n  console.log(`‚ùå OFFRE REJET√âE: ${justification}`);\n}\n\nreturn { json: finalOffer };"
            },
            "id": "store-final",
            "name": "üíæ Stocker Offre Finale",
            "type": "n8n-nodes-base.code",
            "typeVersion": 2,
            "position": [
                -60,
                60
            ]
        },
        {
            "parameters": {
                "assignments": {
                    "assignments": [
                        {
                            "id": "error-type",
                            "name": "error_type",
                            "value": "INVALID_OFFER",
                            "type": "string"
                        },
                        {
                            "id": "error-title",
                            "name": "title",
                            "value": "={{ $json.title }}",
                            "type": "string"
                        },
                        {
                            "id": "error-reason",
                            "name": "error_reason",
                            "value": "Offre invalide ou URL manquante",
                            "type": "string"
                        }
                    ]
                },
                "options": {}
            },
            "id": "handle-errors",
            "name": "‚ùå G√©rer Erreurs",
            "type": "n8n-nodes-base.set",
            "typeVersion": 3.4,
            "position": [
                -860,
                260
            ]
        }
    ],
    "connections": {
        "üöÄ Start": {
            "main": [
                [
                    {
                        "node": "‚öôÔ∏è Config HelloWork",
                        "type": "main",
                        "index": 0
                    }
                ]
            ]
        },
        "‚öôÔ∏è Config HelloWork": {
            "main": [
                [
                    {
                        "node": "üåê Fetch Page",
                        "type": "main",
                        "index": 0
                    }
                ]
            ]
        },
        "üåê Fetch Page": {
            "main": [
                [
                    {
                        "node": "üï∑Ô∏è Scraper Liste Offres",
                        "type": "main",
                        "index": 0
                    }
                ],
                [
                    {
                        "node": "‚ùå G√©rer Erreurs",
                        "type": "main",
                        "index": 0
                    }
                ]
            ]
        },
        "üï∑Ô∏è Scraper Liste Offres": {
            "main": [
                [
                    {
                        "node": "üîç Filtrer Offres Valides",
                        "type": "main",
                        "index": 0
                    }
                ]
            ]
        },
        "üîç Filtrer Offres Valides": {
            "main": [
                [
                    {
                        "node": "üåê Fetch D√©tail Offre",
                        "type": "main",
                        "index": 0
                    }
                ],
                [
                    {
                        "node": "‚ùå G√©rer Erreurs",
                        "type": "main",
                        "index": 0
                    }
                ]
            ]
        },
        "üåê Fetch D√©tail Offre": {
            "main": [
                [
                    {
                        "node": "üìÑ Scraper D√©tail Offre",
                        "type": "main",
                        "index": 0
                    }
                ]
            ]
        },
        "üìÑ Scraper D√©tail Offre": {
            "main": [
                [
                    {
                        "node": "üéØ Pr√©parer Mistral",
                        "type": "main",
                        "index": 0
                    }
                ]
            ]
        },
        "üéØ Pr√©parer Mistral": {
            "main": [
                [
                    {
                        "node": "üß† API Mistral",
                        "type": "main",
                        "index": 0
                    }
                ]
            ]
        },
        "üß† API Mistral": {
            "main": [
                [
                    {
                        "node": "üíæ Stocker Offre Finale",
                        "type": "main",
                        "index": 0
                    }
                ]
            ]
        }
    },
    "active": false,
    "settings": {
        "executionOrder": "v1"
    },
    "versionId": "scraper-complet-v1",
    "meta": {
        "instanceId": "hellowork-scraper-complet"
    },
    "id": "HelloWorkScraperComplet",
    "tags": [
        "scraping",
        "hellowork",
        "cybersecurite",
        "alternance"
    ]
}