{
  "name": "Agent Alternance API - Workflow Simple",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "cronExpression": "0 9 * * 1-5"
            }
          ]
        }
      },
      "id": "cron-trigger",
      "name": "D√©clencheur Quotidien",
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1,
      "position": [240, 240]
    },
    {
      "parameters": {
        "url": "http://host.docker.internal:9555/health",
        "options": {
          "response": {
            "response": {
              "responseFormat": "json"
            }
          }
        }
      },
      "id": "test-api-health",
      "name": "Test API Sant√©",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [460, 240]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://host.docker.internal:9555/scrape-offres",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "contentType": "json",
        "jsonBody": "={\n  \"termes\": [\"alternance cybers√©curit√©\", \"alternance s√©curit√© informatique\"],\n  \"max_offres\": 10,\n  \"sources\": [\"pole_emploi\", \"apec\"]\n}",
        "options": {
          "response": {
            "response": {
              "responseFormat": "json"
            }
          }
        }
      },
      "id": "collecte-offres-api",
      "name": "Collecte Offres API",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [680, 240]
    },
    {
      "parameters": {
        "fieldToSplitOut": "results.offres",
        "options": {}
      },
      "id": "separer-offres",
      "name": "S√©parer Offres",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [900, 240]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.mistral.ai/v1/chat/completions",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "mistralApi",
        "sendBody": true,
        "contentType": "json",
        "jsonBody": "={\n  \"model\": \"mistral-large-latest\",\n  \"messages\": [\n    {\n      \"role\": \"system\",\n      \"content\": \"Tu es un expert en filtrage d'offres d'alternance. Analyse l'offre et r√©ponds UNIQUEMENT par :\\n- 'VALIDE' si c'est une vraie offre d'alternance en cybers√©curit√©/informatique\\n- 'INVALIDE: raison' si ce n'est pas adapt√©\"\n    },\n    {\n      \"role\": \"user\",\n      \"content\": \"Analyse cette offre:\\n\\nTitre: {{ $json.title }}\\nEntreprise: {{ $json.company }}\\nLieu: {{ $json.location }}\\nDescription: {{ $json.description }}\\nSource: {{ $json.scraper_source }}\"\n    }\n  ],\n  \"temperature\": 0.1,\n  \"max_tokens\": 100\n}",
        "options": {
          "response": {
            "response": {
              "responseFormat": "json"
            }
          }
        }
      },
      "id": "classification-mistral",
      "name": "Classification IA Mistral",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [1120, 240]
    },
    {
      "parameters": {
        "keepOnlySet": false,
        "values": {
          "string": [
            {
              "name": "ai_response",
              "value": "={{ $json.choices[0].message.content }}"
            },
            {
              "name": "is_valid",
              "value": "={{ $json.choices[0].message.content.startsWith('VALIDE') }}"
            },
            {
              "name": "original_title",
              "value": "={{ $('S√©parer Offres').item.json.title }}"
            },
            {
              "name": "original_company",
              "value": "={{ $('S√©parer Offres').item.json.company }}"
            },
            {
              "name": "original_location",
              "value": "={{ $('S√©parer Offres').item.json.location }}"
            },
            {
              "name": "original_url",
              "value": "={{ $('S√©parer Offres').item.json.url }}"
            },
            {
              "name": "original_description",
              "value": "={{ $('S√©parer Offres').item.json.description }}"
            },
            {
              "name": "scraper_source",
              "value": "={{ $('S√©parer Offres').item.json.scraper_source }}"
            }
          ]
        }
      },
      "id": "enrichissement-donnees",
      "name": "Enrichissement Donn√©es",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3,
      "position": [1340, 240]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.ai_response }}",
              "operation": "startsWith",
              "value2": "VALIDE"
            }
          ]
        }
      },
      "id": "filtrage-offres-valides",
      "name": "Filtrage Offres Valides",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [1560, 240]
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "destinationFieldName": "offres_validees",
        "options": {}
      },
      "id": "agregation-finale",
      "name": "Agr√©gation Finale",
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [1780, 180]
    },
    {
      "parameters": {
        "functionCode": "// G√©n√©ration du rapport final\nconst offers = $json.offres_validees;\nif (!offers || offers.length === 0) {\n  console.log('‚ùå Aucune offre valid√©e trouv√©e');\n  return [{ \n    json: {\n      rapport: {\n        total_offres: 0,\n        timestamp: new Date().toISOString(),\n        sources: [],\n        locations: [],\n        message: 'Aucune offre valid√©e'\n      },\n      offres: []\n    }\n  }];\n}\n\nconst stats = {\n  total_offres: offers.length,\n  timestamp: new Date().toISOString(),\n  sources: [...new Set(offers.map(o => o.scraper_source))],\n  locations: [...new Set(offers.map(o => o.original_location))].slice(0, 5)\n};\n\nconsole.log('üìä Rapport g√©n√©r√©:', JSON.stringify(stats, null, 2));\n\nreturn [{ \n  json: {\n    rapport: stats,\n    offres: offers\n  }\n}];"
      },
      "id": "formatage-rapport",
      "name": "Formatage Rapport",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [2000, 180]
    }
  ],
  "connections": {
    "D√©clencheur Quotidien": {
      "main": [
        [
          {
            "node": "Test API Sant√©",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Test API Sant√©": {
      "main": [
        [
          {
            "node": "Collecte Offres API",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Collecte Offres API": {
      "main": [
        [
          {
            "node": "S√©parer Offres",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "S√©parer Offres": {
      "main": [
        [
          {
            "node": "Classification IA Mistral",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Classification IA Mistral": {
      "main": [
        [
          {
            "node": "Enrichissement Donn√©es",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Enrichissement Donn√©es": {
      "main": [
        [
          {
            "node": "Filtrage Offres Valides",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filtrage Offres Valides": {
      "main": [
        [
          {
            "node": "Agr√©gation Finale",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    },
    "Agr√©gation Finale": {
      "main": [
        [
          {
            "node": "Formatage Rapport",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [
    {
      "id": "alternance-api",
      "name": "Alternance API"
    }
  ],
  "triggerCount": 1,
  "updatedAt": "2025-06-03T10:00:00.000Z",
  "versionId": "1.1.0"
}