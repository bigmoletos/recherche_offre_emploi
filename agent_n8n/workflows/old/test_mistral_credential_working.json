{
  "name": "Test Mistral avec Credential N8N",
  "nodes": [
    {
      "parameters": {},
      "id": "manual-trigger",
      "name": "Test Manuel",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [240, 300]
    },
    {
      "parameters": {
        "functionCode": "// Pr√©paration du payload Mistral avec validation\n// Utilise la cl√© MISTRAL_API_KEY_CURSOR_MCP_SERVER valid√©e\n\nconst mistralPayload = {\n  model: \"mistral-small-latest\",\n  messages: [\n    {\n      role: \"user\",\n      content: \"Analyse cette offre d'emploi : Titre: Alternance Cybers√©curit√© chez TechCorp √† Paris. Cette offre correspond-elle √† une alternance en cybers√©curit√© ? R√©ponds uniquement par: VALIDE ou INVALIDE\"\n    }\n  ],\n  temperature: 0.1,\n  max_tokens: 50\n};\n\nconsole.log('üß™ === PAYLOAD MISTRAL AVEC CREDENTIAL ===');\nconsole.log('‚úÖ API Key: MISTRAL_API_KEY_CURSOR_MCP_SERVER (dans credential)');\nconsole.log('‚úÖ Endpoint: https://api.mistral.ai/v1/chat/completions');\nconsole.log('‚úÖ Model:', mistralPayload.model);\nconsole.log('üìù Prompt (preview):', mistralPayload.messages[0].content.substring(0, 60) + '...');\nconsole.log('üìä Taille payload:', JSON.stringify(mistralPayload).length, 'caract√®res');\n\n// Validation du payload\nif (!mistralPayload.model || !mistralPayload.messages || mistralPayload.messages.length === 0) {\n  console.log('‚ùå Payload invalide!');\n  throw new Error('Payload Mistral invalide');\n}\n\nconsole.log('‚úÖ Payload valid√© - pr√™t pour envoi');\n\n// Retour du payload complet\nreturn {\n  json: mistralPayload\n};"
      },
      "id": "preparation-payload",
      "name": "Pr√©paration Payload",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [460, 300]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.mistral.ai/v1/chat/completions",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "contentType": "json",
        "jsonBody": "={{ $json }}",
        "options": {
          "response": {
            "response": {
              "responseFormat": "json"
            }
          },
          "timeout": 30000,
          "redirect": {
            "redirect": {
              "followRedirects": true
            }
          }
        }
      },
      "id": "mistral-api",
      "name": "Mistral API avec Credential",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [680, 300]
    },
    {
      "parameters": {
        "functionCode": "// Analyse compl√®te de la r√©ponse Mistral\nconsole.log('üéØ === ANALYSE R√âPONSE MISTRAL ===');\nconsole.log('üìä Type de donn√©es re√ßues:', typeof $json);\nconsole.log('üîç Propri√©t√©s disponibles:', Object.keys($json || {}));\n\n// Log de la r√©ponse compl√®te pour debugging\nconsole.log('üìã === R√âPONSE COMPL√àTE ===');\nconsole.log(JSON.stringify($json, null, 2));\n\n// V√©rification de la structure standard OpenAI/Mistral\nif ($json && typeof $json === 'object') {\n  \n  // Cas 1: R√©ponse standard avec choices\n  if ($json.choices && Array.isArray($json.choices) && $json.choices.length > 0) {\n    const choice = $json.choices[0];\n    \n    if (choice.message && choice.message.content) {\n      const content = choice.message.content.trim();\n      \n      console.log('‚úÖ === SUCC√àS ! ===');\n      console.log('üìù R√©ponse Mistral:', content);\n      \n      // Classification intelligente\n      const contentUpper = content.toUpperCase();\n      let classification;\n      let isValid;\n      \n      if (contentUpper.includes('VALIDE') && !contentUpper.includes('INVALIDE')) {\n        classification = 'VALIDE';\n        isValid = true;\n      } else if (contentUpper.includes('INVALIDE')) {\n        classification = 'INVALIDE';\n        isValid = false;\n      } else {\n        // Fallback si la r√©ponse ne contient ni VALIDE ni INVALIDE\n        classification = 'IND√âTERMIN√â';\n        isValid = false;\n        console.log('‚ö†Ô∏è  R√©ponse ambigu√´ - classification par d√©faut: INVALIDE');\n      }\n      \n      console.log('üîç Classification finale:', classification);\n      console.log('‚ö° Mod√®le utilis√©:', $json.model || 'non sp√©cifi√©');\n      \n      if ($json.usage) {\n        console.log('üìà Tokens utilis√©s:', JSON.stringify($json.usage));\n      }\n      \n      return {\n        json: {\n          success: true,\n          mistral_response: content,\n          classification: classification,\n          is_valid: isValid,\n          test_status: 'SUCCESS',\n          model_used: $json.model || 'mistral-small-latest',\n          usage: $json.usage || 'Non disponible',\n          api_method: 'credential_auth',\n          response_id: $json.id || 'non sp√©cifi√©',\n          timestamp: new Date().toISOString()\n        }\n      };\n    } else {\n      console.log('‚ùå Message manquant dans la choice');\n      console.log('üîç Structure de choice:', JSON.stringify(choice, null, 2));\n    }\n  }\n  \n  // Cas 2: Erreur API\n  else if ($json.error) {\n    console.log('üö® === ERREUR API ===');\n    console.log('Type erreur:', $json.error.type || 'non sp√©cifi√©');\n    console.log('Message erreur:', $json.error.message || 'non sp√©cifi√©');\n    console.log('Code erreur:', $json.error.code || 'non sp√©cifi√©');\n    \n    return {\n      json: {\n        success: false,\n        error: `API Error: ${$json.error.type || 'unknown'} - ${$json.error.message || 'no message'}`,\n        test_status: 'API_ERROR',\n        error_details: $json.error,\n        timestamp: new Date().toISOString()\n      }\n    };\n  }\n  \n  // Cas 3: Structure inattendue\n  else {\n    console.log('‚ùå Structure de r√©ponse inattendue');\n    console.log('üîç Cl√©s trouv√©es:', Object.keys($json));\n  }\n} else {\n  console.log('‚ùå R√©ponse non-objet ou null');\n}\n\n// Fallback en cas d'√©chec\nconsole.log('‚ùå === √âCHEC DE L\\'ANALYSE ===');\nreturn {\n  json: {\n    success: false,\n    error: 'Structure de r√©ponse Mistral invalide ou inattendue',\n    test_status: 'FAILED',\n    received_data: $json,\n    data_type: typeof $json,\n    timestamp: new Date().toISOString()\n  }\n};"
      },
      "id": "analyse-reponse",
      "name": "Analyse R√©ponse",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [900, 300]
    }
  ],
  "connections": {
    "Test Manuel": {
      "main": [
        [
          {
            "node": "Pr√©paration Payload",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Pr√©paration Payload": {
      "main": [
        [
          {
            "node": "Mistral API avec Credential",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mistral API avec Credential": {
      "main": [
        [
          {
            "node": "Analyse R√©ponse",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [
    {
      "id": "test-mistral-credential-working",
      "name": "Credential Solution"
    }
  ],
  "triggerCount": 1,
  "updatedAt": "2025-06-05T06:45:00.000Z",
  "versionId": "5.0.0"
}