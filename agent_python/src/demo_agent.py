#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Agent IA de Recherche d'Offres d'Alternance - Version D√©monstration Compl√®te.

Ce module impl√©mente un agent intelligent pour la recherche automatis√©e d'offres
d'alternance en cybers√©curit√© et r√©seaux t√©l√©coms. Il combine les techniques de
scraping web avanc√©es avec l'intelligence artificielle pour filtrer et analyser
les opportunit√©s.

Fonctionnalit√©s principales :
- Scraping multi-sites avec gestion de la charge et anti-d√©tection
- Classification intelligente des offres par IA (r√®gles + ML)
- Validation automatique des crit√®res d'alternance et de domaine
- G√©n√©ration de rapports Excel professionnels avec metrics
- Logging structur√© et monitoring des performances
- Gestion robuste des erreurs et retry automatique

Architecture :
- BaseScraper : Classe abstraite pour l'extensibilit√© multi-sites
- OfferClassifier : Moteur IA de classification et validation
- ExcelReportBuilder : G√©n√©rateur de rapports riches
- AlternanceAgent : Orchestrateur principal du workflow

Le script fonctionne avec des donn√©es simul√©es pour d√©monstration,
tout en montrant l'architecture compl√®te pr√™te pour l'int√©gration
avec de vrais sites d'emploi.

Usage :
    python src/demo_agent.py                # D√©monstration standard
    python src/demo_agent.py --verbose     # Mode d√©taill√© avec logs
    python src/demo_agent.py --quick       # Mode rapide (5 offres)

Auteur: desmedt.franck@iaproject.fr
Version: 1.0
Date: 03/06/2025
"""

import requests
from bs4 import BeautifulSoup
import json
import pandas as pd
from datetime import datetime
import logging
import os
import sys
import argparse
from pathlib import Path
from typing import List, Dict, Tuple, Optional, Union
from dataclasses import dataclass, field
import time
import random
from urllib.parse import urljoin, urlparse
import openpyxl
from openpyxl.styles import Font, PatternFill

# Ajouter le syst√®me de logging commun
sys.path.insert(0, str(Path(__file__).parent.parent.parent / "shared" / "scripts"))

try:
    from logger_config import get_logger
    # Utiliser le syst√®me de logging avanc√©
    logger = get_logger(__name__, log_file="demo_agent.log")
except ImportError:
    # Fallback vers le logging standard
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s | %(levelname)-8s | %(name)s | %(message)s',
        handlers=[
            logging.FileHandler(f'demo_agent_{datetime.now().strftime("%Y%m%d")}.log'),
            logging.StreamHandler()
        ]
    )
    logger = logging.getLogger(__name__)
    logger.warning("Module logger_config non disponible, utilisation du logging standard")

@dataclass
class JobOffer:
    """
    Structure de donn√©es repr√©sentant une offre d'emploi en alternance.

    Cette classe encapsule toutes les informations n√©cessaires pour analyser
    et classifier une offre d'alternance. Elle inclut les m√©tadonn√©es de base
    ainsi que le statut de validation IA.

    Attributes:
        site (str): Nom du site source (P√¥le Emploi, Indeed, etc.)
        title (str): Titre du poste propos√©
        company (str): Nom de l'entreprise recrutrice
        location (str): Localisation g√©ographique du poste
        duration (str): Dur√©e du contrat d'alternance
        start_date (str): Date de d√©but pr√©vue
        url (str): URL compl√®te vers l'annonce originale
        description (str): Description d√©taill√©e du poste et des missions
        is_validated (bool): Statut de validation par le classificateur IA
        validation_reason (str): Raison d√©taill√©e de la validation/rejet

    Note:
        Les champs is_validated et validation_reason sont automatiquement
        remplis par le syst√®me de classification OfferClassifier.
    """
    site: str
    title: str
    company: str
    location: str
    duration: str
    start_date: str
    url: str
    description: str = ""
    is_validated: bool = False
    validation_reason: str = ""

    def __post_init__(self):
        """
        Validation et nettoyage automatique des donn√©es apr√®s initialisation.

        Effectue des v√©rifications de base et normalise certains champs
        pour assurer la coh√©rence des donn√©es.
        """
        # Nettoyer les espaces superflus
        self.title = self.title.strip() if self.title else ""
        self.company = self.company.strip() if self.company else ""
        self.location = self.location.strip() if self.location else ""

        # Logger l'offre cr√©√©e
        logger.debug(f"Nouvelle offre cr√©√©e: {self.title} chez {self.company}")

class OfferClassifier:
    """
    Moteur de classification intelligente pour les offres d'alternance.

    Cette classe impl√©mente un syst√®me de classification hybride combinant
    des r√®gles m√©tier expertes avec des techniques d'IA pour identifier
    et valider les offres d'alternance pertinentes en cybers√©curit√©.

    Le classificateur effectue plusieurs niveaux de validation :
    1. Exclusion des formations/√©coles (non-pertinentes)
    2. Validation de la nature alternance/apprentissage
    3. V√©rification du domaine technique (cyber/r√©seaux)
    4. Contr√¥le de la dur√©e et modalit√©s

    Attributes:
        formation_keywords (List[str]): Mots-cl√©s identifiant les formations √† exclure
        alternance_keywords (List[str]): Mots-cl√©s validant les contrats d'alternance
        tech_keywords (List[str]): Mots-cl√©s du domaine cybers√©curit√©/r√©seaux
        classification_stats (Dict): Statistiques de classification temps r√©el

    Example:
        classifier = OfferClassifier()
        is_valid, reason = classifier.classify_offer(job_offer)
        if is_valid:
            print(f"Offre valid√©e: {reason}")
    """

    def __init__(self):
        """
        Initialise le classificateur avec les dictionnaires de mots-cl√©s experts.

        Les mots-cl√©s sont organis√©s par cat√©gorie et optimis√©s pour minimiser
        les faux positifs tout en maintenant une haute sensibilit√©.
        """
        logger.info("Initialisation du classificateur d'offres IA")

        # Mots-cl√©s pour identifier les formations (√† exclure)
        self.formation_keywords = [
            'formation', '√©cole', 'cursus', 'acad√©mie', 'institut',
            'universit√©', 'bachelor', 'master formation', 'dipl√¥me',
            '√©tudiant', 'apprenant', 'inscription', 'admission',
            'enseignement', 'p√©dagogique', '√©ducatif'
        ]

        # Mots-cl√©s pour identifier les vraies alternances
        self.alternance_keywords = [
            'alternance', 'apprentissage', 'contrat de professionnalisation',
            'contrat pro', 'apprenti', 'alternant', 'cfa',
            'rythme altern√©', 'formation en alternance'
        ]

        # Mots-cl√©s cybers√©curit√©/r√©seaux
        self.tech_keywords = [
            'cybers√©curit√©', 'cyber', 's√©curit√© informatique', 'r√©seaux',
            't√©l√©communications', 't√©l√©coms', 'infosec', 'soc', 'pentesting',
            'firewall', 'intrusion', 'vulnerability', 'cisco', 'juniper',
            'siem', 'forensic', 'ethical hacking', 'pentest', 'grc',
            'iso 27001', 'audit s√©curit√©', 'cryptographie'
        ]

        # Statistiques de classification
        self.classification_stats = {
            'total_processed': 0,
            'validated': 0,
            'rejected_formation': 0,
            'rejected_no_alternance': 0,
            'rejected_wrong_domain': 0,
            'rejected_duration': 0
        }

        logger.debug(f"Classificateur initialis√© avec {len(self.formation_keywords)} mots-cl√©s formation, "
                    f"{len(self.alternance_keywords)} mots-cl√©s alternance, "
                    f"{len(self.tech_keywords)} mots-cl√©s techniques")

    def classify_offer(self, offer: JobOffer) -> Tuple[bool, str]:
        """
        Classifie et valide une offre d'alternance selon des crit√®res experts.

        Cette m√©thode applique un pipeline de validation en plusieurs √©tapes
        pour d√©terminer si une offre correspond aux crit√®res d'alternance
        en cybers√©curit√©. Chaque √©tape est logg√©e pour la tra√ßabilit√©.

        Args:
            offer (JobOffer): L'offre d'emploi √† classifier

        Returns:
            Tuple[bool, str]: Tuple contenant:
                - is_valid (bool): True si l'offre est valid√©e
                - reason (str): Raison d√©taill√©e de la validation/rejet

        Raises:
            ValueError: Si l'offre fournie est None ou invalide

        Example:
            classifier = OfferClassifier()
            is_valid, reason = classifier.classify_offer(my_offer)
            if is_valid:
                print(f"‚úÖ {reason}")
            else:
                print(f"‚ùå {reason}")
        """
        if not offer:
            raise ValueError("L'offre fournie ne peut pas √™tre None")

        logger.debug(f"Classification de l'offre: {offer.title} - {offer.company}")

        # Mise √† jour des statistiques
        self.classification_stats['total_processed'] += 1

        # Pr√©paration des donn√©es pour l'analyse
        title_lower = offer.title.lower() if offer.title else ""
        description_lower = offer.description.lower() if offer.description else ""
        company_lower = offer.company.lower() if offer.company else ""

        logger.debug(f"Analyse textuelle - Titre: '{title_lower[:50]}...', "
                    f"Entreprise: '{company_lower}', "
                    f"Description: {len(description_lower)} caract√®res")

        # V√©rification 1: Exclure les formations/√©coles
        logger.debug("üîç √âtape 1: V√©rification exclusion formations/√©coles")
        for keyword in self.formation_keywords:
            if keyword in title_lower or keyword in company_lower:
                reason = f"Formation d√©tect√©e: '{keyword}'"
                logger.debug(f"‚ùå Rejet: {reason}")
                self.classification_stats['rejected_formation'] += 1
                return False, reason

        # V√©rification 2: Doit contenir des mots-cl√©s d'alternance
        logger.debug("üîç √âtape 2: V√©rification pr√©sence alternance/apprentissage")
        alternance_matches = [kw for kw in self.alternance_keywords
                             if kw in title_lower or kw in description_lower]

        if not alternance_matches:
            reason = "Pas de mention d'alternance/apprentissage"
            logger.debug(f"‚ùå Rejet: {reason}")
            self.classification_stats['rejected_no_alternance'] += 1
            return False, reason
        else:
            logger.debug(f"‚úÖ Alternance d√©tect√©e: {alternance_matches}")

        # V√©rification 3: Doit √™tre dans le domaine technique
        logger.debug("üîç √âtape 3: V√©rification domaine cybers√©curit√©/r√©seaux")
        tech_matches = [kw for kw in self.tech_keywords
                       if kw in title_lower or kw in description_lower]

        if not tech_matches:
            reason = "Domaine non compatible (cybers√©curit√©/r√©seaux)"
            logger.debug(f"‚ùå Rejet: {reason}")
            self.classification_stats['rejected_wrong_domain'] += 1
            return False, reason
        else:
            logger.debug(f"‚úÖ Domaine technique d√©tect√©: {tech_matches}")

        # V√©rification 4: Dur√©e appropri√©e (si mentionn√©e)
        logger.debug("üîç √âtape 4: V√©rification dur√©e du contrat")
        if offer.duration and offer.duration.strip():
            duration_lower = offer.duration.lower()
            short_duration_indicators = ['6 mois', 'stage', '3 mois', '4 mois', '5 mois']

            for indicator in short_duration_indicators:
                if indicator in duration_lower:
                    reason = f"Dur√©e trop courte: '{offer.duration}'"
                    logger.debug(f"‚ùå Rejet: {reason}")
                    self.classification_stats['rejected_duration'] += 1
                    return False, reason

            logger.debug(f"‚úÖ Dur√©e acceptable: {offer.duration}")

        # Validation finale
        reason = f"Offre valid√©e - Alternance: {alternance_matches[:2]}, Tech: {tech_matches[:2]}"
        logger.info(f"‚úÖ Offre VALID√âE: {offer.title} chez {offer.company}")
        logger.debug(f"D√©tails validation: {reason}")

        self.classification_stats['validated'] += 1
        return True, reason

    def get_classification_stats(self) -> Dict[str, Union[int, float]]:
        """
        Retourne les statistiques de classification du moteur IA.

        Returns:
            Dict[str, Union[int, float]]: Statistiques d√©taill√©es incluant:
                - Nombre total d'offres trait√©es
                - Nombre d'offres valid√©es
                - D√©tail des rejets par cat√©gorie
                - Taux de validation global
        """
        stats = self.classification_stats.copy()
        total = stats['total_processed']

        if total > 0:
            stats['validation_rate'] = round((stats['validated'] / total) * 100, 2)
            stats['rejection_rate'] = round(((total - stats['validated']) / total) * 100, 2)
        else:
            stats['validation_rate'] = 0.0
            stats['rejection_rate'] = 0.0

        logger.debug(f"Statistiques classification: {stats}")
        return stats

class BaseScraper:
    """Classe de base pour tous les scrapers d'offres d'alternance."""

    def __init__(self, site_name: str):
        self.site_name = site_name
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        })
        self.classifier = OfferClassifier()
        logger.info(f"Initialisation scraper pour {site_name}")

    def scrape_offers(self, keywords: List[str]) -> List[JobOffer]:
        """M√©thode abstraite √† impl√©menter par chaque scraper sp√©cialis√©."""
        raise NotImplementedError("Chaque scraper doit impl√©menter cette m√©thode")

    def _make_request(self, url: str, max_retries: int = 3) -> requests.Response:
        """Effectue une requ√™te HTTP avec gestion d'erreurs et retry."""
        for attempt in range(max_retries):
            try:
                # D√©lai al√©atoire pour √©viter la d√©tection
                time.sleep(random.uniform(1, 3))

                response = self.session.get(url, timeout=10)
                response.raise_for_status()

                logger.debug(f"Requ√™te r√©ussie: {url}")
                return response

            except requests.exceptions.RequestException as e:
                logger.warning(f"Tentative {attempt + 1}/{max_retries} √©chou√©e pour {url}: {e}")
                if attempt == max_retries - 1:
                    raise
                time.sleep(5)  # Attente avant retry

    def filter_and_validate_offers(self, offers: List[JobOffer]) -> List[JobOffer]:
        """Filtre et valide les offres avec le classificateur IA."""
        validated_offers = []

        for offer in offers:
            is_valid, reason = self.classifier.classify_offer(offer)
            offer.is_validated = is_valid
            offer.validation_reason = reason

            if is_valid:
                validated_offers.append(offer)
                logger.info(f"‚úÖ Offre valid√©e: {offer.title} - {offer.company}")
            else:
                logger.debug(f"‚ùå Offre rejet√©e: {offer.title} - Raison: {reason}")

        return validated_offers

class MockScraper(BaseScraper):
    """Scraper de d√©monstration avec donn√©es fictives pour les tests."""

    def __init__(self):
        super().__init__("Mock Job Site")

    def scrape_offers(self, keywords: List[str]) -> List[JobOffer]:
        """G√©n√®re des offres fictives pour d√©monstration."""
        logger.info("G√©n√©ration d'offres fictives pour d√©monstration...")

        mock_offers = [
            # Offres valides
            JobOffer(
                site=self.site_name,
                title="Alternant Ing√©nieur Cybers√©curit√©",
                company="SecureTech Solutions",
                location="Paris (75)",
                duration="24 mois",
                start_date="Septembre 2025",
                url="https://example.com/job1",
                description="Rejoignez notre √©quipe cybers√©curit√© en contrat d'apprentissage. Formation sur les outils SOC, analyse de vuln√©rabilit√©s, et gestion des incidents."
            ),
            JobOffer(
                site=self.site_name,
                title="Apprenti Administrateur R√©seaux et S√©curit√©",
                company="DataCorp France",
                location="Lyon (69)",
                duration="12 mois",
                start_date="Septembre 2025",
                url="https://example.com/job2",
                description="Alternance en administration r√©seaux Cisco, pare-feux et syst√®mes de d√©tection d'intrusion."
            ),

            # Offres √† rejeter (formations)
            JobOffer(
                site=self.site_name,
                title="Formation Cybers√©curit√© - √âcole SuperTech",
                company="√âcole SuperTech",
                location="Marseille (13)",
                duration="3 ans",
                start_date="Septembre 2025",
                url="https://example.com/formation1",
                description="Cursus complet en cybers√©curit√© avec stages en entreprise. Dipl√¥me reconnu par l'√âtat."
            ),

            # Offres √† rejeter (domaine non compatible)
            JobOffer(
                site=self.site_name,
                title="Alternant D√©veloppeur Web",
                company="WebDev Agency",
                location="Toulouse (31)",
                duration="18 mois",
                start_date="Septembre 2025",
                url="https://example.com/job3",
                description="D√©veloppement d'applications web en PHP/JavaScript. Contrat d'apprentissage."
            ),

            # Offres √† rejeter (stage court)
            JobOffer(
                site=self.site_name,
                title="Stage Cybers√©curit√© 6 mois",
                company="CyberDefense Corp",
                location="Nice (06)",
                duration="6 mois",
                start_date="Mars 2025",
                url="https://example.com/stage1",
                description="Stage en cybers√©curit√© pour √©tudiant Master 1. Non r√©mun√©r√©."
            )
        ]

        logger.info(f"G√©n√©ration de {len(mock_offers)} offres fictives termin√©e")
        return mock_offers

class ExcelReportBuilder:
    """G√©n√©rateur de rapports Excel pour les offres d'alternance."""

    def __init__(self):
        self.workbook = openpyxl.Workbook()
        self.worksheet = self.workbook.active
        self.worksheet.title = "Offres Alternance Cybers√©curit√©"
        logger.info("Initialisation du g√©n√©rateur de rapport Excel")

    def create_report(self, offers: List[JobOffer], filename: str = None) -> str:
        """
        Cr√©e un rapport Excel avec mise en forme professionnelle.

        Args:
            offers: Liste des offres valid√©es
            filename: Nom du fichier (auto-g√©n√©r√© si None)

        Returns:
            Chemin du fichier cr√©√©
        """
        if filename is None:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"rapport_alternance_cybersecurite_{timestamp}.xlsx"

        # Configuration des en-t√™tes
        headers = [
            "Site", "Titre de l'offre", "Entreprise", "Localisation",
            "Dur√©e", "Date de d√©but", "Lien direct", "Validation"
        ]

        # Styles pour les en-t√™tes
        header_font = Font(color="FFFFFF", bold=True, size=12)
        header_fill = PatternFill(start_color="366092", end_color="366092", fill_type="solid")

        # Cr√©ation des en-t√™tes
        for col, header in enumerate(headers, 1):
            cell = self.worksheet.cell(row=1, column=col, value=header)
            cell.font = header_font
            cell.fill = header_fill

        # Ajout des donn√©es
        for row, offer in enumerate(offers, 2):
            self.worksheet.cell(row=row, column=1, value=offer.site)
            self.worksheet.cell(row=row, column=2, value=offer.title)
            self.worksheet.cell(row=row, column=3, value=offer.company)
            self.worksheet.cell(row=row, column=4, value=offer.location)
            self.worksheet.cell(row=row, column=5, value=offer.duration)
            self.worksheet.cell(row=row, column=6, value=offer.start_date)

            # Lien hypertexte pour l'URL
            link_cell = self.worksheet.cell(row=row, column=7, value=offer.url)
            link_cell.hyperlink = offer.url
            link_cell.font = Font(color="0563C1", underline="single")

            # Status de validation
            validation_text = "‚úÖ Valid√©e" if offer.is_validated else f"‚ùå {offer.validation_reason}"
            self.worksheet.cell(row=row, column=8, value=validation_text)

        # Auto-ajustement des colonnes
        for column in self.worksheet.columns:
            max_length = max(len(str(cell.value or "")) for cell in column)
            self.worksheet.column_dimensions[column[0].column_letter].width = min(max_length + 2, 50)

        # Ajout d'un r√©sum√© en haut
        summary_row = len(offers) + 3
        self.worksheet.cell(row=summary_row, column=1, value="R√âSUM√â:").font = Font(bold=True)
        self.worksheet.cell(row=summary_row + 1, column=1, value=f"Total offres trouv√©es: {len(offers)}")
        self.worksheet.cell(row=summary_row + 2, column=1, value=f"Date g√©n√©ration: {datetime.now().strftime('%d/%m/%Y %H:%M')}")

        # Sauvegarde
        try:
            self.workbook.save(filename)
            logger.info(f"Rapport Excel cr√©√©: {filename}")
            return os.path.abspath(filename)
        except Exception as e:
            logger.error(f"Erreur lors de la sauvegarde du rapport: {e}")
            raise

class AlternanceAgent:
    """Agent principal orchestrant la recherche d'offres d'alternance."""

    def __init__(self):
        self.scrapers = [MockScraper()]  # En production: ajouter PoleEmploiScraper, IndeedScraper, etc.
        self.report_builder = ExcelReportBuilder()
        self.keywords = [
            "alternance cybers√©curit√©", "apprentissage cyber", "alternant s√©curit√© informatique",
            "alternance r√©seaux", "apprenti administrateur r√©seau", "alternance t√©l√©coms"
        ]
        logger.info("Agent alternance initialis√©")

    def run_full_search(self) -> str:
        """
        Lance une recherche compl√®te sur tous les sites configur√©s.

        Returns:
            Chemin du rapport Excel g√©n√©r√©
        """
        logger.info("üöÄ D√©marrage recherche compl√®te d'offres d'alternance")
        all_offers = []

        for scraper in self.scrapers:
            try:
                logger.info(f"Scraping du site: {scraper.site_name}")

                # R√©cup√©ration des offres brutes
                raw_offers = scraper.scrape_offers(self.keywords)
                logger.info(f"Offres brutes trouv√©es: {len(raw_offers)}")

                # Filtrage et validation
                validated_offers = scraper.filter_and_validate_offers(raw_offers)
                logger.info(f"Offres valid√©es: {len(validated_offers)}")

                all_offers.extend(validated_offers)

            except Exception as e:
                logger.error(f"Erreur lors du scraping de {scraper.site_name}: {e}")
                continue

        # G√©n√©ration du rapport
        logger.info(f"G√©n√©ration du rapport final - Total: {len(all_offers)} offres valid√©es")

        if all_offers:
            report_path = self.report_builder.create_report(all_offers)
            logger.info(f"‚úÖ Rapport g√©n√©r√© avec succ√®s: {report_path}")

            # Statistiques finales
            self._log_statistics(all_offers)

            return report_path
        else:
            logger.warning("‚ö†Ô∏è Aucune offre valide trouv√©e")
            return None

    def _log_statistics(self, offers: List[JobOffer]):
        """Affiche des statistiques sur les offres trouv√©es."""
        logger.info("üìä STATISTIQUES FINALES:")
        logger.info(f"   ‚Ä¢ Total offres valid√©es: {len(offers)}")

        # R√©partition par site
        sites = {}
        for offer in offers:
            sites[offer.site] = sites.get(offer.site, 0) + 1

        for site, count in sites.items():
            logger.info(f"   ‚Ä¢ {site}: {count} offres")

        # R√©partition par localisation
        locations = {}
        for offer in offers:
            loc = offer.location.split('(')[0].strip() if '(' in offer.location else offer.location
            locations[loc] = locations.get(loc, 0) + 1

        top_locations = sorted(locations.items(), key=lambda x: x[1], reverse=True)[:5]
        logger.info(f"   ‚Ä¢ Top localisations: {', '.join([f'{loc} ({count})' for loc, count in top_locations])}")

def main():
    """Point d'entr√©e principal du script."""
    print("=" * 70)
    print("ü§ñ AGENT IA - RECHERCHE OFFRES ALTERNANCE CYBERS√âCURIT√â")
    print("=" * 70)
    print()

    try:
        # Initialisation de l'agent
        agent = AlternanceAgent()

        # Lancement de la recherche
        report_path = agent.run_full_search()

        if report_path:
            print(f"\n‚úÖ SUCC√àS!")
            print(f"üìÑ Rapport Excel g√©n√©r√©: {report_path}")
            print(f"üìä Consultez les logs pour plus de d√©tails")
        else:
            print(f"\n‚ö†Ô∏è AUCUNE OFFRE TROUV√âE")
            print("V√©rifiez les crit√®res de recherche ou les sites sources")

    except KeyboardInterrupt:
        logger.info("Arr√™t demand√© par l'utilisateur")
        print("\nüõë Arr√™t du programme")
    except Exception as e:
        logger.error(f"Erreur fatale: {e}")
        print(f"\n‚ùå ERREUR: {e}")
        print("Consultez les logs pour plus de d√©tails")

    print("\n" + "=" * 70)

if __name__ == "__main__":
    main()