{
  "name": "Test Mistral SANS Credential - Debug",
  "nodes": [
    {
      "parameters": {},
      "id": "manual-trigger",
      "name": "Test Manuel",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [240, 300]
    },
    {
      "parameters": {
        "functionCode": "// Pr√©paration payload ultra-simple pour debug\n// Pas de credential, juste headers hardcod√©s\n\nconst payload = {\n  model: \"mistral-small-latest\",\n  messages: [\n    {\n      role: \"user\",\n      content: \"Test simple: Cette offre 'Alternance Cybers√©curit√©' est-elle valide ? R√©ponds VALIDE ou INVALIDE seulement.\"\n    }\n  ],\n  temperature: 0.1,\n  max_tokens: 10\n};\n\nconsole.log('üß™ === DEBUG SANS CREDENTIAL ===');\nconsole.log('‚úÖ Payload pr√©par√©:', JSON.stringify(payload, null, 2));\nconsole.log('üìè Taille JSON:', JSON.stringify(payload).length, 'caract√®res');\nconsole.log('üîë Auth: Headers hardcod√©s (pas de credential)');\nconsole.log('üåê URL: https://api.mistral.ai/v1/chat/completions');\n\n// Validation basique\nif (!payload.model) {\n  throw new Error('Model manquant!');\n}\nif (!payload.messages || !Array.isArray(payload.messages) || payload.messages.length === 0) {\n  throw new Error('Messages manquants!');\n}\nif (!payload.messages[0].content) {\n  throw new Error('Content manquant!');\n}\n\nconsole.log('‚úÖ Payload valid√© - envoi...');\n\nreturn { json: payload };"
      },
      "id": "preparation",
      "name": "Pr√©paration",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [460, 300]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.mistral.ai/v1/chat/completions",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Authorization",
              "value": "Bearer fe8GdBIIBwYk8Dj1GvclASPE3j0Zbt95"
            }
          ]
        },
        "sendBody": true,
        "contentType": "json",
        "jsonBody": "={{ $json }}",
        "options": {
          "response": {
            "response": {
              "responseFormat": "json"
            }
          },
          "timeout": 30000
        }
      },
      "id": "api-call",
      "name": "API Call Direct",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [680, 300]
    },
    {
      "parameters": {
        "functionCode": "// Debug complet de la r√©ponse\nconsole.log('üéØ === R√âPONSE API DEBUG ===');\nconsole.log('üìä Type:', typeof $json);\nconsole.log('üîç Cl√©s:', Object.keys($json || {}));\nconsole.log('üìã R√©ponse compl√®te:');\nconsole.log(JSON.stringify($json, null, 2));\n\n// Test de pr√©sence des champs essentiels\nif ($json) {\n  console.log('‚úÖ $json existe');\n  \n  if ($json.choices) {\n    console.log('‚úÖ choices existe, length:', $json.choices.length);\n    \n    if ($json.choices[0]) {\n      console.log('‚úÖ choices[0] existe');\n      \n      if ($json.choices[0].message) {\n        console.log('‚úÖ message existe');\n        \n        if ($json.choices[0].message.content) {\n          const content = $json.choices[0].message.content;\n          console.log('‚úÖ === SUCC√àS ! ===');\n          console.log('üìù Contenu:', content);\n          \n          return {\n            json: {\n              success: true,\n              response: content,\n              full_response: $json,\n              test: 'SANS_CREDENTIAL_SUCCESS'\n            }\n          };\n        } else {\n          console.log('‚ùå content manquant');\n        }\n      } else {\n        console.log('‚ùå message manquant');\n      }\n    } else {\n      console.log('‚ùå choices[0] manquant');\n    }\n  } else {\n    console.log('‚ùå choices manquant');\n  }\n  \n  // V√©rification erreur API\n  if ($json.error) {\n    console.log('üö® Erreur API:', $json.error);\n    return {\n      json: {\n        success: false,\n        error: $json.error,\n        test: 'API_ERROR'\n      }\n    };\n  }\n} else {\n  console.log('‚ùå $json est null/undefined');\n}\n\n// √âchec\nconsole.log('‚ùå === √âCHEC ===');\nreturn {\n  json: {\n    success: false,\n    error: 'Structure r√©ponse invalide',\n    received: $json,\n    test: 'SANS_CREDENTIAL_FAILED'\n  }\n};"
      },
      "id": "debug-response",
      "name": "Debug Response",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [900, 300]
    }
  ],
  "connections": {
    "Test Manuel": {
      "main": [
        [
          {
            "node": "Pr√©paration",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Pr√©paration": {
      "main": [
        [
          {
            "node": "API Call Direct",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "API Call Direct": {
      "main": [
        [
          {
            "node": "Debug Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [
    {
      "id": "debug-sans-credential",
      "name": "Debug Sans Credential"
    }
  ],
  "triggerCount": 1,
  "updatedAt": "2025-06-05T08:30:00.000Z",
  "versionId": "6.0.0"
}