{
  "name": "Classification Mistral - PRODUCTION CORRIG√âE",
  "nodes": [
    {
      "parameters": {},
      "id": "start-production-fix",
      "name": "Start",
      "type": "n8n-nodes-base.start",
      "typeVersion": 1,
      "position": [240, 300]
    },
    {
      "parameters": {
        "jsCode": "// G√âN√âRATEUR D'OFFRES TEST R√âALISTES\nconsole.log('üß™ === G√âN√âRATION OFFRES TEST R√âALISTES ===');\n\nconst offresTest = [\n  {\n    id: 'test-valide-1',\n    title: 'Contrat d\\'apprentissage - Analyste Cybers√©curit√© SOC',\n    company: 'Orange Cyberdefense',\n    description: 'Contrat d\\'apprentissage de 24 mois pour former un analyste cybers√©curit√© au sein de notre SOC. Missions : surveillance des syst√®mes, analyse incidents de s√©curit√©, r√©ponse aux alertes SIEM.',\n    location: 'Paris, France',\n    contract_type: 'Contrat d\\'apprentissage',\n    keywords: ['apprentissage', 'cybers√©curit√©', 'SOC', 'alternance'],\n    attendu: 'VALIDE'\n  },\n  {\n    id: 'test-invalide-1',\n    title: 'Stage - Marketing Digital et Communication',\n    company: 'AgenceComm',\n    description: 'Stage de 6 mois en marketing digital. Missions : gestion des r√©seaux sociaux, cr√©ation de contenu, campagnes publicitaires.',\n    location: 'Lyon, France',\n    contract_type: 'Stage',\n    keywords: ['stage', 'marketing', 'digital'],\n    attendu: 'INVALIDE'\n  },\n  {\n    id: 'test-valide-2',\n    title: 'Alternance - Pentesteur Junior en Formation',\n    company: 'Wavestone Cybersecurity',\n    description: 'Formation alternance de 2 ans pour devenir pentesteur. Missions : tests d\\'intrusion sur applications web, audit de s√©curit√© r√©seau.',\n    location: 'Marseille, France',\n    contract_type: 'Contrat de professionnalisation',\n    keywords: ['alternance', 'pentest', 'cybers√©curit√©'],\n    attendu: 'VALIDE'\n  },\n  {\n    id: 'test-invalide-2',\n    title: 'CDI - Ing√©nieur Cybers√©curit√© Senior 7+ ans',\n    company: 'Thales Group',\n    description: 'Poste d\\'ing√©nieur cybers√©curit√© senior avec 7+ ann√©es d\\'exp√©rience. Architecture s√©curit√©, gestion d\\'√©quipe.',\n    location: 'Toulouse, France',\n    contract_type: 'CDI',\n    keywords: ['CDI', 'senior', 'cybers√©curit√©'],\n    attendu: 'INVALIDE'\n  }\n];\n\nconsole.log('üìã Offres test g√©n√©r√©es:', offresTest.length);\nconsole.log('‚úÖ Offres VALIDES attendues: 2');\nconsole.log('‚ùå Offres INVALIDES attendues: 2');\n\noffresTest.forEach((offre, index) => {\n  console.log(`${index + 1}. ${offre.title} ‚Üí ${offre.attendu}`);\n});\n\nreturn offresTest.map(offre => ({ json: offre }));"
      },
      "id": "generator-fix",
      "name": "üß™ G√©n√©rateur Test",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 300]
    },
    {
      "parameters": {
        "runOnceForAllItems": true,
        "jsCode": "// TRAITEMENT CORRIG√â AVEC CLASSIFICATION AM√âLIOR√âE\nconsole.log('üî¢ === D√âBUT TRAITEMENT GLOBAL CORRIG√â ===');\nconst allItems = $input.all();\nconsole.log('üìã Nombre total d\\'items √† traiter:', allItems.length);\n\n// Configuration Mistral\nconst config = {\n  apiKey: 'fe8GdBIIBwYk8Dj1GvclASPE3j0Zbt95',\n  apiUrl: 'https://api.mistral.ai/v1/chat/completions',\n  model: 'mistral-large-latest',\n  temperature: 0.05,\n  max_tokens: 200\n};\n\n// Fonction am√©lior√©e pour classer une offre\nasync function classifyOfferImproved(offre, index) {\n  console.log(`\\nü§ñ === CLASSIFICATION ${index + 1}/${allItems.length}: ${offre.title} ===`);\n  console.log('üéØ R√©sultat attendu:', offre.attendu);\n\n  const prompt = `ANALYSE CETTE OFFRE D'EMPLOI :\n\nTITRE: ${offre.title}\nENTREPRISE: ${offre.company}\nTYPE: ${offre.contract_type}\nDESCRIPTION: ${offre.description}\n\nCRIT√àRES DE VALIDATION :\n1. CONTRAT = apprentissage OU alternance OU contrat pro\n2. DOMAINE = cybers√©curit√© OU s√©curit√© informatique\n\nR√âPONDS UNIQUEMENT PAR :\n- CLASSIFICATION: VALIDE (si les 2 crit√®res sont remplis)\n- CLASSIFICATION: INVALIDE (sinon)\n- JUSTIFICATION: [explique pourquoi]`;\n\n  const payload = {\n    model: config.model,\n    messages: [\n      {\n        role: \"system\",\n        content: \"Tu es un classificateur pr√©cis. Tu r√©ponds toujours avec le format exact demand√©.\"\n      },\n      {\n        role: \"user\",\n        content: prompt\n      }\n    ],\n    temperature: config.temperature,\n    max_tokens: config.max_tokens\n  };\n\n  try {\n    console.log(`üåê Appel API Mistral...`);\n    \n    const response = await fetch(config.apiUrl, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${config.apiKey}`\n      },\n      body: JSON.stringify(payload)\n    });\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      console.log(`‚ùå Erreur API:`, response.status, errorText);\n      return {\n        ...offre,\n        mistral_response: 'ERREUR_API',\n        classification: 'ERREUR',\n        is_valid: false,\n        confidence: 0,\n        error: `HTTP ${response.status}`,\n        processed_at: new Date().toISOString()\n      };\n    }\n\n    const data = await response.json();\n    \n    if (!data?.choices?.[0]?.message?.content) {\n      console.log(`‚ùå Structure r√©ponse invalide`);\n      return {\n        ...offre,\n        mistral_response: 'STRUCTURE_INVALIDE',\n        classification: 'ERREUR',\n        is_valid: false,\n        confidence: 0,\n        processed_at: new Date().toISOString()\n      };\n    }\n\n    const content = data.choices[0].message.content.trim();\n    console.log(`üìù R√©ponse brute:`, content);\n\n    // CLASSIFICATION AM√âLIOR√âE - Recherche de patterns pr√©cis\n    let classification, isValid, confidence;\n    \n    // Patterns sp√©cifiques pour √©viter les faux positifs\n    const validExact = /CLASSIFICATION:\\s*VALIDE/i.test(content);\n    const invalidExact = /CLASSIFICATION:\\s*INVALIDE/i.test(content);\n    \n    console.log(`üîç Pattern VALIDE exact trouv√©: ${validExact}`);\n    console.log(`üîç Pattern INVALIDE exact trouv√©: ${invalidExact}`);\n\n    if (validExact && !invalidExact) {\n      classification = 'VALIDE';\n      isValid = true;\n      confidence = 0.95;\n      console.log(`‚úÖ CLASS√â VALIDE`);\n    } else if (invalidExact) {\n      classification = 'INVALIDE';\n      isValid = false;\n      confidence = 0.95;\n      console.log(`‚ùå CLASS√â INVALIDE`);\n    } else {\n      // Fallback plus intelligent\n      const contentLower = content.toLowerCase();\n      \n      // Recherche d'indicateurs positifs forts\n      const positiveIndicators = [\n        'offre valide',\n        'crit√®res remplis',\n        'correspond aux crit√®res',\n        'r√©pond aux exigences'\n      ];\n      \n      // Recherche d'indicateurs n√©gatifs forts\n      const negativeIndicators = [\n        'offre invalide',\n        'ne correspond pas',\n        'crit√®res non remplis',\n        'ne r√©pond pas aux crit√®res',\n        'pas d\\'alternance',\n        'pas de cybers√©curit√©'\n      ];\n      \n      const hasPositive = positiveIndicators.some(indicator => contentLower.includes(indicator));\n      const hasNegative = negativeIndicators.some(indicator => contentLower.includes(indicator));\n      \n      if (hasPositive && !hasNegative) {\n        classification = 'VALIDE';\n        isValid = true;\n        confidence = 0.8;\n        console.log(`‚úÖ CLASS√â VALIDE (fallback positif)`);\n      } else if (hasNegative) {\n        classification = 'INVALIDE';\n        isValid = false;\n        confidence = 0.8;\n        console.log(`‚ùå CLASS√â INVALIDE (fallback n√©gatif)`);\n      } else {\n        classification = 'INCERTAIN';\n        isValid = false;\n        confidence = 0.3;\n        console.log(`‚ö†Ô∏è CLASSIFICATION INCERTAINE`);\n      }\n    }\n\n    // V√©rification avec le r√©sultat attendu\n    const isCorrect = classification === offre.attendu;\n    console.log(`üéØ Attendu: ${offre.attendu}, Obtenu: ${classification}, Correct: ${isCorrect}`);\n\n    return {\n      ...offre,\n      mistral_response: content,\n      classification: classification,\n      is_valid: isValid,\n      confidence: confidence,\n      is_correct: isCorrect,\n      model_used: data.model || config.model,\n      usage: data.usage || {},\n      processed_at: new Date().toISOString()\n    };\n\n  } catch (error) {\n    console.log(`üö® Erreur:`, error.message);\n    return {\n      ...offre,\n      mistral_response: 'ERREUR_RESEAU',\n      classification: 'ERREUR',\n      is_valid: false,\n      confidence: 0,\n      error: error.message,\n      processed_at: new Date().toISOString()\n    };\n  }\n}\n\n// Traitement s√©quentiel\nconsole.log('üöÄ D√©but du traitement...');\nconst results = [];\n\nfor (let i = 0; i < allItems.length; i++) {\n  const offre = allItems[i].json;\n  const result = await classifyOfferImproved(offre, i);\n  results.push({ json: result });\n  \n  // Pause entre les appels\n  if (i < allItems.length - 1) {\n    await new Promise(resolve => setTimeout(resolve, 1000));\n  }\n}\n\n// Statistiques finales\nconsole.log('\\nüìä === R√âSUM√â FINAL ===');\nconst validCount = results.filter(r => r.json.classification === 'VALIDE').length;\nconst invalidCount = results.filter(r => r.json.classification === 'INVALIDE').length;\nconst errorCount = results.filter(r => r.json.classification === 'ERREUR').length;\nconst correctCount = results.filter(r => r.json.is_correct === true).length;\n\nconsole.log(`‚úÖ Offres VALIDES: ${validCount}`);\nconsole.log(`‚ùå Offres INVALIDES: ${invalidCount}`);\nconsole.log(`üö® Erreurs: ${errorCount}`);\nconsole.log(`üéØ Pr√©dictions correctes: ${correctCount}/${allItems.length} (${Math.round(correctCount/allItems.length*100)}%)`);\n\nreturn results;"
      },
      "id": "classification-fix",
      "name": "ü§ñ Classification Corrig√©e",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [680, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition-valid",
              "leftValue": "={{ $json.classification }}",
              "rightValue": "VALIDE",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "check-valid",
      "name": "Classification ?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [900, 300]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "action-valid",
              "name": "action",
              "value": "OFFRE_ACCEPTEE",
              "type": "string"
            },
            {
              "id": "message-valid",
              "name": "message",
              "value": "‚úÖ {{ $json.title }} - VALID√âE ({{ $json.confidence }})",
              "type": "string"
            },
            {
              "id": "check-valid",
              "name": "verification",
              "value": "Attendu: {{ $json.attendu }}, Obtenu: {{ $json.classification }}, Correct: {{ $json.is_correct }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "result-valid",
      "name": "‚úÖ R√©sultat Valide",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [1120, 200]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "action-invalid",
              "name": "action",
              "value": "OFFRE_REJETEE",
              "type": "string"
            },
            {
              "id": "message-invalid",
              "name": "message",
              "value": "‚ùå {{ $json.title }} - REJET√âE ({{ $json.classification }})",
              "type": "string"
            },
            {
              "id": "check-invalid",
              "name": "verification",
              "value": "Attendu: {{ $json.attendu }}, Obtenu: {{ $json.classification }}, Correct: {{ $json.is_correct }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "result-invalid",
      "name": "‚ùå R√©sultat Invalide",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [1120, 400]
    }
  ],
  "pinData": {},
  "connections": {
    "Start": {
      "main": [
        [
          {
            "node": "üß™ G√©n√©rateur Test",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üß™ G√©n√©rateur Test": {
      "main": [
        [
          {
            "node": "ü§ñ Classification Corrig√©e",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ü§ñ Classification Corrig√©e": {
      "main": [
        [
          {
            "node": "Classification ?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Classification ?": {
      "main": [
        [
          {
            "node": "‚úÖ R√©sultat Valide",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "‚ùå R√©sultat Invalide",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1",
    "saveManualExecutions": true
  },
  "versionId": "production-corrige-v1",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "id": "workflow-production-corrige",
  "tags": ["production", "corrige", "classification"]
}