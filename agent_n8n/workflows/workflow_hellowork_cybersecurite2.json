{
  "name": "recherche_hello_work",
  "nodes": [
    {
      "parameters": {},
      "id": "63086598-b34f-422a-98e6-85393132e3ba",
      "name": "üöÄ Start",
      "type": "n8n-nodes-base.start",
      "typeVersion": 1,
      "position": [
        -1860,
        160
      ]
    },
    {
      "parameters": {
        "jsCode": "// CONFIGURATION HELLOWORK CYBERS√âCURIT√â - MULTI-REQU√äTES AVEC LIEUX\nconsole.log('üîç === RECHERCHE HELLOWORK CYBERS√âCURIT√â (multi-combinaisons + lieux) ===');\n\nconst site_name = 'HelloWork';\nconst base_url = 'https://www.hellowork.com';\nconst keywords_main = ['cybers√©curit√©', 'reseau et telecom'];\nconst alternance_types = ['alternance', 'apprentissage'];\nconst contract_types = ['apprentissage', 'contrat-professionnalisation'];\nconst locations = ['Marseille', 'Paris', 'Aix-en-Provence'];\nconst experience_level = 'd√©butant';\n\nconst urls = [];\nconst configs = [];\n\nfor (const kw of keywords_main) {\n  for (const alt of alternance_types) {\n    for (const loc of locations) {\n      const query = encodeURIComponent(`${kw} ${alt}`);\n      const location_encoded = encodeURIComponent(loc);\n      const url = `${base_url}/fr-fr/emploi/recherche.html?k=${query}&l=${location_encoded}&c=${contract_types.join(',')}`;\n      urls.push(url);\n\n      configs.push({\n        site_name,\n        base_url,\n        search_params: {\n          url,\n          keywords: [kw, alt],\n          location: loc,\n          contract_types,\n          experience_level\n        },\n        scraping_config: {\n          timeout: 30000,\n          retry_attempts: 3,\n          user_agent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',\n          headers: {\n            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',\n            'Accept-Language': 'fr-FR,fr;q=0.9,en;q=0.8',\n            'Accept-Encoding': 'gzip, deflate, br',\n            'DNT': '1',\n            'Connection': 'keep-alive',\n            'Upgrade-Insecure-Requests': '1'\n          }\n        },\n        expected_results: {\n          min_offers: 1,\n          max_offers: 20,\n          target_alternance: true,\n          target_cybersecurity: true\n        }\n      });\n    }\n  }\n}\n\nconsole.log('üéØ Site cible:', site_name);\nconsole.log('üîó URLs g√©n√©r√©es:', urls);\nconsole.log('üìã Nombre de requ√™tes g√©n√©r√©es:', configs.length);\n\n// Retourne chaque configuration comme un item s√©par√© pour n8n\nreturn configs.map(cfg => ({ json: cfg }));"
      },
      "id": "54bb6d68-65b2-4b77-bd02-eb3ccee04f69",
      "name": "‚öôÔ∏è Config HelloWork",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1660,
        160
      ]
    },
    {
      "parameters": {
        "jsCode": "const config = $input.item.json;\n\n// On simule une offre par config pour la d√©monstration\nconst offer = {\n  id: `offer-${config.search_params.location.replace(/\\\\s+/g, '-').toLowerCase()}-${config.search_params.keywords.join('-')}`,\n  title: `Alternance - ${config.search_params.keywords[0]} (${config.search_params.location})`,\n  company: 'Entreprise Exemple',\n  location: config.search_params.location,\n  contract_type: 'Contrat d\\'apprentissage',\n  duration: '12 √† 24 mois',\n  salary_range: '1200-1800‚Ç¨/mois',\n  start_date: '2025-09-01',\n  description: `Poste en alternance dans le domaine ${config.search_params.keywords[0]}. Missions vari√©es.`,\n  requirements: ['Motivation', 'Bases techniques'],\n  benefits: ['Formation', 'Encadrement'],\n  posted_date: '2025-06-10',\n  expires_date: '2025-07-10',\n  reference: 'EXEMPLE-ALT-2025',\n  url: config.search_params.url,\n  source_platform: config.site_name\n};\n\n// D√©tection plus large du domaine\nconst all_keywords = ['cyber', 's√©curit√©', 'security', 'soc', 'pentest', 'reseau', 't√©l√©com', 'telecom'];\nconst alternance_keywords = ['alternance', 'apprentissage', 'professionnalisation'];\n\nconst isAlternanceContract = alternance_keywords\n  .some(type => offer.contract_type.toLowerCase().includes(type) || offer.title.toLowerCase().includes(type));\nconst isCyberOrNetwork = all_keywords\n  .some(keyword => (offer.title + ' ' + offer.description).toLowerCase().includes(keyword));\n\n// On consid√®re comme valide si c'est une alternance ET un domaine cyber/r√©seau/t√©l√©com\nconst expectedClassification = (isAlternanceContract && isCyberOrNetwork) ? 'VALIDE' : 'INVALIDE';\n\nconst enrichedOffer = {\n  ...offer,\n  scraped_at: new Date().toISOString(),\n  scraping_metadata: {\n    source: config.site_name,\n    search_url: config.search_params.url,\n    extraction_method: 'simulation_realistic'\n  },\n  preliminary_analysis: {\n    is_alternance_contract: isAlternanceContract,\n    is_cybersecurity_domain: isCyberOrNetwork,\n    expected_mistral_classification: expectedClassification,\n    confidence_preliminary: (isAlternanceContract && isCyberOrNetwork) ? 0.9 : 0.7\n  },\n  ready_for_mistral: true\n};\n\nreturn [{ json: enrichedOffer }];"
      },
      "id": "0bedb25e-5f80-4deb-91f1-8b5232350bb7",
      "name": "üï∑Ô∏è Scraper HelloWork",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1460,
        160
      ]
    },
    {
      "parameters": {
        "jsCode": "// PR√âPARATION CLASSIFICATION MISTRAL OPTIMIS√âE\nconst offer = $input.item.json;\n\nconsole.log(`ü§ñ === PR√âPARATION MISTRAL: ${offer.title} ===`);\nconsole.log('üè¢ Entreprise:', offer.company);\nconsole.log('üíº Contrat:', offer.contract_type);\nconsole.log('üéØ Classification attendue:', offer.preliminary_analysis.expected_mistral_classification);\n\n// Prompt expert sp√©cialis√© alternance cybers√©curit√©\nconst expertPrompt = `EXPERT CLASSIFICATION ALTERNANCE CYBERS√âCURIT√â\n\n=== OFFRE √Ä ANALYSER ===\nTITRE: ${offer.title}\nENTREPRISE: ${offer.company}\nTYPE CONTRAT: ${offer.contract_type}\nLIEU: ${offer.location}\nDUR√âE: ${offer.duration}\nSALAIRE: ${offer.salary_range}\nDESCRIPTION: ${offer.description}\nEXIGENCES: ${offer.requirements ? offer.requirements.join(', ') : 'Non sp√©cifi√©es'}\n\n=== CRIT√àRES VALIDATION STRICTE ===\n\n1. üéØ TYPE CONTRAT (OBLIGATOIRE):\n   ‚úÖ VALIDE: apprentissage, alternance, contrat professionnalisation, contrat d'apprentissage\n   ‚ùå INVALIDE: stage, CDI, CDD, mission, freelance\n\n2. üõ°Ô∏è DOMAINE CYBERS√âCURIT√â (OBLIGATOIRE):\n   ‚úÖ VALIDE: reseau, telecom, cybers√©curit√©, s√©curit√© informatique, SOC, SIEM, pentest, audit s√©curit√©, analyse s√©curit√©\n   ‚ùå INVALIDE: d√©veloppement g√©n√©ral, marketing, communication, commercial, RH\n\n3. üìö NIVEAU FORMATION (IMPORTANT):\n   ‚úÖ PR√âF√âR√â: junior, d√©butant, formation, √©tudiant\n   ‚ùå EXCLUSION: senior 5+ ans, expert, manager\n\n=== EXCLUSIONS AUTOMATIQUES ===\n- Stages (m√™me en cybers√©curit√©)\n- Postes seniors/experts (5+ ans exp√©rience)\n- CDI/CDD classiques sans formation\n- Domaines non-cybers√©curit√© ou non reseau et telecom\n\n=== FORMAT R√âPONSE OBLIGATOIRE ===\nCLASSIFICATION: VALIDE ou INVALIDE\nJUSTIFICATION: [Explication pr√©cise en 1 phrase]\nCONFIANCE: [0.1 √† 1.0]\n\nAnalyse maintenant cette offre.`;\n\n// Configuration Mistral optimis√©e\nconst mistralPayload = {\n  model: \"mistral-large-latest\",\n  messages: [\n    {\n      role: \"system\",\n      content: \"Tu es un expert RH sp√©cialis√© dans l'analyse d'offres d'alternance en cybers√©curit√©. Tu appliques des crit√®res stricts : SEULES les vraies alternances/apprentissages EN cybers√©curit√© ET EN reseau et telecom sont VALIDES. Sois tr√®s pr√©cis dans tes classifications. La dur√©e du stage doit √™tre comprise entre 1 et 2 ans, c'est pour passer un master 1 et master 2\"\n    },\n    {\n      role: \"user\",\n      content: expertPrompt\n    }\n  ],\n  temperature: 0.05,\n  max_tokens: 300\n};\n\nconsole.log('üìã Payload Mistral Large cr√©√©');\nconsole.log('üå°Ô∏è Temp√©rature:', mistralPayload.temperature);\nconsole.log('üìè Max tokens:', mistralPayload.max_tokens);\n\nreturn {\n  json: {\n    ...offer,\n    mistral_request: {\n      payload_json: JSON.stringify(mistralPayload),\n      model: mistralPayload.model,\n      temperature: mistralPayload.temperature,\n      max_tokens: mistralPayload.max_tokens,\n      prompt_length: expertPrompt.length\n    },\n    classification_prompt: expertPrompt,\n    prepared_at: new Date().toISOString(),\n    processing_status: 'READY_FOR_MISTRAL_CLASSIFICATION'\n  }\n};"
      },
      "id": "27b549b5-4fda-455b-ac66-2d02eac84b4a",
      "name": "üéØ Pr√©parer Mistral",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1300,
        160
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.mistral.ai/v1/chat/completions",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer fe8GdBIIBwYk8Dj1GvclASPE3j0Zbt95"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "contentType": "raw",
        "body": "={{ $json.mistral_request.payload_json }}",
        "options": {
          "timeout": 30000
        }
      },
      "id": "f4a16a63-2ff0-443f-aed9-20c624bd7bdd",
      "name": "üß† API Mistral",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1060,
        160
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "condition-valid-offer",
              "leftValue": "={{ $json.mistral_result.is_valid_offer }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "is true"
              }
            },
            {
              "id": "91dc5fa4-0311-48b8-8898-b951d141c566",
              "leftValue": "={{ $json.mistral_result.is_valid_offer }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "id": "dec6fe65-eef4-4efe-a6c2-67947e08349c",
      "name": "üîç Filtrer Valides",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -660,
        160
      ],
      "alwaysOutputData": true,
      "executeOnce": true
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "action-type",
              "name": "action",
              "value": "ALTERNANCE_CYBERSECURITE_TROUVEE",
              "type": "string"
            },
            {
              "id": "offer-title",
              "name": "titre",
              "value": "{{ $json.title }}",
              "type": "string"
            },
            {
              "id": "offer-company",
              "name": "entreprise",
              "value": "{{ $json.company }}",
              "type": "string"
            },
            {
              "id": "offer-contract",
              "name": "contrat",
              "value": "{{ $json.contract_type }}",
              "type": "string"
            },
            {
              "id": "offer-location",
              "name": "lieu",
              "value": "{{ $json.location }}",
              "type": "string"
            },
            {
              "id": "offer-salary",
              "name": "salaire",
              "value": "{{ $json.salary_range }}",
              "type": "string"
            },
            {
              "id": "offer-duration",
              "name": "duree",
              "value": "{{ $json.duration }}",
              "type": "string"
            },
            {
              "id": "offer-url",
              "name": "lien_candidature",
              "value": "{{ $json.url }}",
              "type": "string"
            },
            {
              "id": "mistral-justification",
              "name": "justification_ia",
              "value": "{{ $json.mistral_result.justification }}",
              "type": "string"
            },
            {
              "id": "confidence-score",
              "name": "score_confiance",
              "value": null,
              "type": "number"
            },
            {
              "id": "summary",
              "name": "resume_offre",
              "value": "‚úÖ {{ $json.title }} chez {{ $json.company }} - {{ $json.contract_type }} ({{ $json.duration }}) √† {{ $json.location }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "eecdc103-d2e3-42eb-9bd8-2789440bdb7b",
      "name": "‚úÖ Formater Offres Retenues",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -460,
        60
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "action-rejected",
              "name": "action",
              "value": "OFFRE_REJETEE",
              "type": "string"
            },
            {
              "id": "rejected-title",
              "name": "titre",
              "value": "{{ $json.title }}",
              "type": "string"
            },
            {
              "id": "rejected-company",
              "name": "entreprise",
              "value": "{{ $json.company }}",
              "type": "string"
            },
            {
              "id": "rejection-reason",
              "name": "raison_rejet",
              "value": "{{ $json.mistral_result.classification }} - {{ $json.mistral_result.justification }}",
              "type": "string"
            },
            {
              "id": "contract-issue",
              "name": "probleme_contrat",
              "value": "{{ $json.contract_type }} (attendu: alternance/apprentissage)",
              "type": "string"
            },
            {
              "id": "summary-rejected",
              "name": "resume",
              "value": "‚ùå {{ $json.title }} chez {{ $json.company }} - Rejet√©: {{ $json.mistral_result.classification }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "14355d91-6a8f-4fda-8ef9-c729b80eaa26",
      "name": "‚ùå Formater Offres Rejet√©es",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -460,
        260
      ]
    },
    {
      "parameters": {
        "jsCode": "// TRAITEMENT R√âPONSE MISTRAL AVEC PARSING ROBUSTE\nconst originalOffer = $('üéØ Pr√©parer Mistral').item.json;\nconst mistralResponse = $input.item.json;\n\nconsole.log(`‚úÖ === CLASSIFICATION R√âUSSIE: ${originalOffer.title} ===`);\nconsole.log('üè¢ Entreprise:', originalOffer.company);\nconsole.log('üíº Type contrat:', originalOffer.contract_type);\n\n// Validation structure r√©ponse Mistral\nif (!mistralResponse.choices || !mistralResponse.choices[0] || !mistralResponse.choices[0].message) {\n  console.log('‚ùå Structure r√©ponse Mistral invalide');\n  return {\n    json: {\n      ...originalOffer,\n      mistral_result: {\n        classification: 'ERREUR_STRUCTURE',\n        justification: 'R√©ponse API Mistral malform√©e',\n        confidence: 0,\n        is_valid_offer: false,\n        error_type: 'INVALID_API_RESPONSE'\n      }\n    }\n  };\n}\n\nconst mistralContent = mistralResponse.choices[0].message.content.trim();\nconsole.log('üìù R√©ponse Mistral compl√®te:', mistralContent);\n\n// Parsing robuste avec regex\nlet classification = 'INCERTAIN';\nlet justification = 'Non trouv√©e';\nlet confidence = 0.5;\n\n// Extraction CLASSIFICATION avec patterns multiples\nconst classificationPatterns = [\n  /CLASSIFICATION:\\s*(VALIDE|INVALIDE)/i,\n  /^(VALIDE|INVALIDE)/i,\n  /(VALIDE|INVALIDE)(?!.*INVALIDE|.*VALIDE)/i\n];\n\nfor (const pattern of classificationPatterns) {\n  const match = mistralContent.match(pattern);\n  if (match) {\n    classification = match[1].toUpperCase();\n    console.log('üéØ Classification extraite:', classification);\n    break;\n  }\n}\n\n// Extraction JUSTIFICATION\nconst justificationPatterns = [\n  /JUSTIFICATION:\\s*([^\\n]+)/i,\n  /(?:VALIDE|INVALIDE)[^\\n]*:\\s*([^\\n]+)/i\n];\n\nfor (const pattern of justificationPatterns) {\n  const match = mistralContent.match(pattern);\n  if (match) {\n    justification = match[1].trim();\n    console.log('üìã Justification extraite:', justification);\n    break;\n  }\n}\n\n// Extraction CONFIANCE\nconst confidencePatterns = [\n  /CONFIANCE:\\s*([0-9.]+)/i,\n  /CONFIDENCE:\\s*([0-9.]+)/i\n];\n\nfor (const pattern of confidencePatterns) {\n  const match = mistralContent.match(pattern);\n  if (match) {\n    confidence = parseFloat(match[1]);\n    console.log('üìä Confiance extraite:', confidence);\n    break;\n  }\n}\n\n// Validation coh√©rence\nconst isValid = classification === 'VALIDE';\nconst expectedClassification = originalOffer.preliminary_analysis.expected_mistral_classification;\nconst isCorrectPrediction = classification === expectedClassification;\nconst finalConfidence = classification !== 'INCERTAIN' ? Math.max(confidence, 0.8) : 0.3;\n\n// V√©rification suppl√©mentaire pour alternance cybers√©curit√©\nconst isAlternanceContract = ['apprentissage', 'alternance', 'professionnalisation']\n  .some(type => originalOffer.contract_type.toLowerCase().includes(type));\n\nconst isCyberSecurity = ['cyber', 's√©curit√©', 'security', 'soc', 'pentest']\n  .some(keyword => \n    (originalOffer.title + ' ' + originalOffer.description).toLowerCase().includes(keyword)\n  );\n\nconst isAlternanceCybersecurity = isAlternanceContract && isCyberSecurity;\n\nconsole.log(`üéØ Classification finale: ${classification}`);\nconsole.log(`üìä Offre valide: ${isValid}`);\nconsole.log(`‚úÖ Pr√©diction correcte: ${isCorrectPrediction}`);\nconsole.log(`üìä Confiance finale: ${finalConfidence}`);\nconsole.log(`üéì Alternance Cybers√©curit√©: ${isAlternanceCybersecurity}`);\n\n// R√âSULTAT FINAL STRUCTUR√â\nconst finalResult = {\n  // Identifiants offre\n  offer_id: originalOffer.id,\n  title: originalOffer.title,\n  company: originalOffer.company,\n  contract_type: originalOffer.contract_type,\n  location: originalOffer.location,\n  duration: originalOffer.duration,\n  salary_range: originalOffer.salary_range,\n  url: originalOffer.url,\n  source_platform: originalOffer.source_platform,\n  \n  // R√©sultat classification Mistral\n  mistral_result: {\n    classification: classification,\n    justification: justification,\n    confidence: finalConfidence,\n    is_valid_offer: isValid,\n    expected_classification: expectedClassification,\n    is_correct_prediction: isCorrectPrediction,\n    processing_status: 'CLASSIFIED_SUCCESS'\n  },\n  \n  // M√©tadonn√©es techniques\n  technical_metadata: {\n    model_used: mistralResponse.model,\n    tokens_used: mistralResponse.usage,\n    raw_mistral_response: mistralContent,\n    classified_at: new Date().toISOString(),\n    processing_source: 'HelloWork_workflow'\n  },\n  \n  // Flags pour suite du traitement\n  is_alternance_cybersecurity: isAlternanceCybersecurity,\n  needs_manual_review: classification === 'INCERTAIN',\n  quality_score: finalConfidence\n};\n\nif (isValid) {\n  console.log('üéâ ‚úÖ OFFRE VALID√âE POUR ALTERNANCE CYBERS√âCURIT√â');\n} else {\n  console.log(`‚ùå OFFRE REJET√âE: ${justification}`);\n}\n\nreturn { json: finalResult };"
      },
      "id": "66c9fe8f-9603-4f48-804c-f5922fdfbc5e",
      "name": "‚úÖ Traiter Succ√®s",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -860,
        60
      ]
    },
    {
      "parameters": {
        "jsCode": "// TRAITEMENT ERREUR MISTRAL\nconst originalOffer = $('üéØ Pr√©parer Mistral').item.json;\nconst errorData = $input.item;\n\nconsole.log(`‚ùå === ERREUR MISTRAL: ${originalOffer.title} ===`);\nconsole.log('üîç Code erreur:', errorData.httpCode);\nconsole.log('üìã Message:', errorData.message);\n\n// Classification erreur\nlet errorType = 'UNKNOWN_ERROR';\nswitch(errorData.httpCode) {\n  case 401: errorType = 'AUTH_ERROR'; break;\n  case 422: errorType = 'VALIDATION_ERROR'; break;\n  case 429: errorType = 'RATE_LIMIT'; break;\n  case 500: errorType = 'SERVER_ERROR'; break;\n  default: errorType = 'NETWORK_ERROR';\n}\n\nconst errorResult = {\n  offer_id: originalOffer.id,\n  title: originalOffer.title,\n  company: originalOffer.company,\n  contract_type: originalOffer.contract_type,\n  source_platform: originalOffer.source_platform,\n  url: originalOffer.url,\n  \n  mistral_result: {\n    classification: 'ERREUR_API',\n    justification: `Erreur ${errorType}: ${errorData.message || 'Erreur inconnue'}`,\n    confidence: 0,\n    is_valid_offer: false,\n    processing_status: 'CLASSIFICATION_ERROR'\n  },\n  \n  error_details: {\n    error_type: errorType,\n    error_code: errorData.httpCode,\n    error_message: errorData.message,\n    error_timestamp: new Date().toISOString()\n  },\n  \n  is_alternance_cybersecurity: false,\n  needs_manual_review: true\n};\n\nconsole.log('üìä Erreur document√©e');\nreturn { json: errorResult };"
      },
      "id": "24ad685f-6dfb-4b4e-96b0-ec8d402f1b22",
      "name": "‚ùå Traiter Erreur",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -860,
        260
      ]
    }
  ],
  "pinData": {},
  "connections": {
    "üöÄ Start": {
      "main": [
        [
          {
            "node": "‚öôÔ∏è Config HelloWork",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "‚öôÔ∏è Config HelloWork": {
      "main": [
        [
          {
            "node": "üï∑Ô∏è Scraper HelloWork",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üï∑Ô∏è Scraper HelloWork": {
      "main": [
        [
          {
            "node": "üéØ Pr√©parer Mistral",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üéØ Pr√©parer Mistral": {
      "main": [
        [
          {
            "node": "üß† API Mistral",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üß† API Mistral": {
      "main": [
        [
          {
            "node": "‚úÖ Traiter Succ√®s",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "‚ùå Traiter Erreur",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "‚úÖ Traiter Succ√®s": {
      "main": [
        [
          {
            "node": "üîç Filtrer Valides",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "‚ùå Traiter Erreur": {
      "main": [
        [
          {
            "node": "üîç Filtrer Valides",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üîç Filtrer Valides": {
      "main": [
        [
          {
            "node": "‚úÖ Formater Offres Retenues",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "‚ùå Formater Offres Rejet√©es",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "6362c7ed-062a-4426-8ab5-7d8fe3cadef1",
  "meta": {
    "instanceId": "77649bb8ece500ac0c757974f51e9cabb1d2bb2ab3e605617a5d419377d2a6a4"
  },
  "id": "YT0Vz3kHH12ftLIe",
  "tags": []
}