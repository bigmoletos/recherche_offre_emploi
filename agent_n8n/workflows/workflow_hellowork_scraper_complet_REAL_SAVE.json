{
  "name": "hellowork_triate_toutes les_offres",
  "nodes": [
    {
      "parameters": {},
      "id": "25560eb0-fb7a-4b94-9d21-ae9bb8ed8fec",
      "name": "üöÄ Start",
      "type": "n8n-nodes-base.start",
      "typeVersion": 1,
      "position": [
        -1740,
        480
      ]
    },
    {
      "parameters": {
        "jsCode": "// CONFIGURATION HELLOWORK CYBERS√âCURIT√â - MULTI-REQU√äTES AVEC LIEUX\nconsole.log('üîç === RECHERCHE HELLOWORK CYBERS√âCURIT√â (multi-combinaisons + lieux) ===');\n\nconst site_name = 'HelloWork';\nconst base_url = 'https://www.hellowork.com';\nconst keywords_main = ['cybers√©curit√©', 'reseau et telecom'];\nconst alternance_types = ['alternance', 'apprentissage'];\nconst contract_types = ['apprentissage', 'contrat-professionnalisation'];\nconst locations = ['Marseille', 'Paris', 'Aix-en-Provence'];\nconst experience_level = 'd√©butant';\n\nconst urls = [];\nconst configs = [];\n\nfor (const kw of keywords_main) {\n  for (const alt of alternance_types) {\n    for (const loc of locations) {\n      const query = encodeURIComponent(`${kw} ${alt}`);\n      const location_encoded = encodeURIComponent(loc);\n      const url = `${base_url}/fr-fr/emploi/recherche.html?k=${query}&l=${location_encoded}&c=${contract_types.join(',')}`;\n      urls.push(url);\n\n      configs.push({\n        site_name,\n        base_url,\n        search_params: {\n          url,\n          keywords: [kw, alt],\n          location: loc,\n          contract_types,\n          experience_level\n        },\n        scraping_config: {\n          timeout: 30000,\n          retry_attempts: 3,\n          user_agent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',\n          headers: {\n            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',\n            'Accept-Language': 'fr-FR,fr;q=0.9,en;q=0.8',\n            'Accept-Encoding': 'gzip, deflate, br',\n            'DNT': '1',\n            'Connection': 'keep-alive',\n            'Upgrade-Insecure-Requests': '1'\n          }\n        },\n        expected_results: {\n          min_offers: 1,\n          max_offers: 20,\n          target_alternance: true,\n          target_cybersecurity: true\n        }\n      });\n    }\n  }\n}\n\nconsole.log('üéØ Site cible:', site_name);\nconsole.log('üîó URLs g√©n√©r√©es:', urls);\nconsole.log('üìã Nombre de requ√™tes g√©n√©r√©es:', configs.length);\n\n// Retourne chaque configuration comme un item s√©par√© pour n8n\nreturn configs.map(cfg => ({ json: cfg }));"
      },
      "id": "48825dc0-9c87-4b4f-8c27-c75cbc734a76",
      "name": "‚öôÔ∏è Config HelloWork",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1580,
        400
      ]
    },
    {
      "parameters": {
        "url": "={{ $json.search_params.url }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "User-Agent",
              "value": "={{ $json.scraping_config.user_agent }}"
            },
            {
              "name": "Accept",
              "value": "={{ $json.scraping_config.headers.Accept }}"
            },
            {
              "name": "Accept-Language",
              "value": "={{ $json.scraping_config.headers['Accept-Language'] }}"
            }
          ]
        },
        "options": {
          "redirect": {},
          "response": {
            "response": {
              "fullResponse": false,
              "neverError": true,
              "responseFormat": "autodetect"
            }
          },
          "timeout": "={{ $json.scraping_config.timeout }}"
        }
      },
      "id": "12fbce3d-6070-40a1-b39c-de71020c8499",
      "name": "üåê Fetch Page",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1400,
        200
      ],
      "alwaysOutputData": true,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "jsCode": "// EXTRACTION OPTIMIS√âE DU CONTENEUR DES OFFRES - VERSION SPLIT COMPATIBLE\nconst logger = {\n  info: (msg, data = {}) => console.log(`‚ÑπÔ∏è [${new Date().toISOString()}] ${msg}`, JSON.stringify(data)),\n  error: (msg, error = {}) => console.error(`‚ùå [${new Date().toISOString()}] ${msg}`, JSON.stringify(error))\n};\n\ntry {\n  // R√©cup√©ration directe de la r√©ponse HTTP du n≈ìud Fetch Page\n  const httpResponse = $input.item.json;\n  \n  // NOUVELLE M√âTHODE: R√©cup√©ration de la config depuis le n≈ìud Split Configs  \n  // Maintenant que nous avons un split, chaque ex√©cution a sa propre config\n  const config = $('üìã Split Configs').item.json;\n  \n  console.log('üîç Traitement de la config:', {\n    site: config?.site_name,\n    location: config?.search_params?.location,\n    keywords: config?.search_params?.keywords,\n    url: config?.search_params?.url\n  });\n  \n  if (!config || !config.search_params) {\n    logger.error('Config manquante depuis Split Configs', {\n      hasConfig: !!config,\n      configKeys: config ? Object.keys(config) : 'null'\n    });\n    throw new Error('Configuration invalide: search_params manquant depuis Split Configs');\n  }\n  \n  logger.info('Configuration r√©cup√©r√©e avec succ√®s depuis Split', {\n    site: config.site_name,\n    url: config.search_params.url,\n    keywords: config.search_params.keywords,\n    location: config.search_params.location\n  });\n  \n  const statusCode = httpResponse.statusCode || httpResponse.status;\n  if (statusCode && statusCode !== 200) {\n    throw new Error(`Erreur HTTP ${statusCode} pour ${config.search_params.url}`);\n  }\n  \n  const htmlBody = httpResponse.body || httpResponse.data;\n  if (!htmlBody) {\n    throw new Error('Body HTML manquant dans la r√©ponse');\n  }\n  \n  const html = htmlBody.toString();\n  logger.info('HTML r√©cup√©r√©', {\n    length: html.length,\n    search_location: config.search_params.location,\n    search_keywords: config.search_params.keywords\n  });\n  \n  const selectors = [\n    /<div[^>]*data-id-storage-target=\"list\"[^>]*>([\\s\\S]*?)<\\/div>/i,\n    /<div[^>]*class=\"[^\"]*job-list[^\"]*\"[^>]*>([\\s\\S]*?)<\\/div>/gi,\n    /<div[^>]*class=\"[^\"]*offers[^\"]*\"[^>]*>([\\s\\S]*?)<\\/div>/gi,\n    /<main[^>]*>([\\s\\S]*?)<\\/main>/i,\n    /<section[^>]*class=\"[^\"]*results[^\"]*\"[^>]*>([\\s\\S]*?)<\\/section>/gi\n  ];\n  \n  let offersHtml = null;\n  let selectorUsed = -1;\n  for (let i = 0; i < selectors.length; i++) {\n    const match = html.match(selectors[i]);\n    if (match && match[0]) {\n      offersHtml = match[0];\n      selectorUsed = i;\n      break;\n    }\n  }\n  \n  if (!offersHtml) {\n    logger.error('Conteneur des offres non trouv√©', {\n      htmlPreview: html.substring(0, 500),\n      url: config.search_params.url,\n      location: config.search_params.location\n    });\n    throw new Error(`Conteneur des offres non trouv√© dans le HTML pour ${config.search_params.location}`);\n  }\n  \n  logger.info('‚úÖ Conteneur extrait avec succ√®s', {\n    selector: selectorUsed,\n    length: offersHtml.length,\n    location: config.search_params.location,\n    keywords: config.search_params.keywords,\n    url: config.search_params.url\n  });\n  \n  return [{\n    json: {\n      offers_html: offersHtml,\n      config: config,\n      extraction_metadata: {\n        status: 'success',\n        selector_used: selectorUsed,\n        html_length: offersHtml.length,\n        search_location: config.search_params.location,\n        search_keywords: config.search_params.keywords,\n        search_url: config.search_params.url,\n        extracted_at: new Date().toISOString()\n      }\n    }\n  }];\n  \n} catch (error) {\n  logger.error('Erreur extraction', {\n    error: error.message,\n    stack: error.stack?.substring(0, 500)\n  });\n  throw error;\n}"
      },
      "id": "000ca1cc-aa57-40db-b008-12eac703fcb6",
      "name": "üì¶ Extraire Conteneur Offres",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1120,
        160
      ],
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "jsCode": "// SCRAPER LISTE OFFRES OPTIMIS√â AVEC DEBUG AVANC√â\nconst logger = {\n  info: (msg, data = {}) => console.log(`‚ÑπÔ∏è [${new Date().toISOString()}] SCRAPER: ${msg}`, JSON.stringify(data)),\n  error: (msg, error = {}) => console.error(`‚ùå [${new Date().toISOString()}] SCRAPER: ${msg}`, JSON.stringify(error)),\n  debug: (msg, data = {}) => console.log(`üêõ [${new Date().toISOString()}] SCRAPER: ${msg}`, JSON.stringify(data))\n};\n\ntry {\n  const input = $input.item.json;\n  if (!input) { throw new Error('Aucune donn√©e en entr√©e'); }\n  \n  logger.debug('Structure re√ßue', {\n    keys: Object.keys(input),\n    hasConfig: !!input.config,\n    hasOffersHtml: !!input.offers_html\n  });\n  \n  const config = input.config;\n  if (!config || !config.search_params) {\n    logger.error('search_params manquant', { configKeys: Object.keys(config || {}) });\n    throw new Error('Configuration invalide: search_params manquant');\n  }\n  \n  const offers = [];\n  const html = input.offers_html;\n  \n  if (!html) {\n    logger.error('HTML manquant', { inputKeys: Object.keys(input) });\n    throw new Error('HTML des offres manquant');\n  }\n  \n  logger.info('HTML re√ßu', { length: html.length, preview: html.substring(0, 200) });\n  \n  // Essai de diff√©rents s√©lecteurs pour trouver les offres\n  const selectors = [\n    /<li[^>]*data-id-storage-target=\"item\"[^>]*>([\\s\\S]*?)<\\/li>/gi,\n    /<article[^>]*class=\"[^\"]*offer[^\"]*\"[^>]*>([\\s\\S]*?)<\\/article>/gi,\n    /<div[^>]*class=\"[^\"]*job-item[^\"]*\"[^>]*>([\\s\\S]*?)<\\/div>/gi,\n    /<div[^>]*data-testid=\"offer\"[^>]*>([\\s\\S]*?)<\\/div>/gi,\n    /<li[^>]*class=\"[^\"]*offer[^\"]*\"[^>]*>([\\s\\S]*?)<\\/li>/gi\n  ];\n  \n  let offerItems = [];\n  let usedSelector = -1;\n  \n  for (let i = 0; i < selectors.length; i++) {\n    offerItems = html.match(selectors[i]) || [];\n    if (offerItems.length > 0) {\n      usedSelector = i;\n      break;\n    }\n  }\n  \n  logger.info('Recherche d\\'offres', {\n    selectorsTest√©s: selectors.length,\n    selectorUtilis√©: usedSelector,\n    itemsTrouv√©s: offerItems.length\n  });\n  \n  if (offerItems.length === 0) {\n    // Si aucune offre trouv√©e, on examine le HTML pour comprendre la structure\n    const htmlSample = html.substring(0, 2000);\n    logger.error('Aucune offre trouv√©e', {\n      htmlSample: htmlSample,\n      possibleTags: {\n        articles: (html.match(/<article/gi) || []).length,\n        lis: (html.match(/<li/gi) || []).length,\n        divs: (html.match(/<div/gi) || []).length\n      }\n    });\n    \n    // Retourner au moins une structure de base pour le debug\n    return [{\n      json: {\n        debug_info: {\n          html_length: html.length,\n          html_sample: htmlSample,\n          no_offers_found: true,\n          config: config\n        }\n      }\n    }];\n  }\n\n  for (let index = 0; index < offerItems.length; index++) {\n    try {\n      const itemHtml = offerItems[index];\n      logger.debug(`Traitement offre ${index}`, {\n        htmlLength: itemHtml.length,\n        htmlPreview: itemHtml.substring(0, 200)\n      });\n      \n      // S√©lecteurs plus flexibles\n      const titleSelectors = [\n        /<h3[^>]*>\\s*<p[^>]*class=\"tw-typo-l\"[^>]*>([^<]+)<\\/p>/i,\n        /<h3[^>]*>([^<]+)<\\/h3>/i,\n        /<h2[^>]*>([^<]+)<\\/h2>/i,\n        /<a[^>]*data-cy=\"offerTitle\"[^>]*>([^<]+)<\\/a>/i,\n        /<div[^>]*class=\"[^\"]*title[^\"]*\"[^>]*>([^<]+)<\\/div>/i\n      ];\n      \n      const companySelectors = [\n        /<p[^>]*class=\"tw-typo-s\"[^>]*>([^<]+)<\\/p>/i,\n        /<div[^>]*class=\"[^\"]*company[^\"]*\"[^>]*>([^<]+)<\\/div>/i,\n        /<span[^>]*class=\"[^\"]*company[^\"]*\"[^>]*>([^<]+)<\\/span>/i\n      ];\n      \n      let title = null, company = null, link = null;\n      \n      // Essai de chaque s√©lecteur de titre\n      for (const selector of titleSelectors) {\n        const match = itemHtml.match(selector);\n        if (match) {\n          title = match[1].trim();\n          break;\n        }\n      }\n      \n      // Essai de chaque s√©lecteur de soci√©t√©\n      for (const selector of companySelectors) {\n        const match = itemHtml.match(selector);\n        if (match) {\n          company = match[1].trim();\n          break;\n        }\n      }\n      \n      const linkMatch = itemHtml.match(/<a[^>]*href=\"([^\"]+)\"/i);\n      link = linkMatch ? linkMatch[1] : null;\n      \n      const locationMatch = itemHtml.match(/<div[^>]*data-cy=\"localisationCard\"[^>]*>([^<]+)<\\/div>/i) ||\n                           itemHtml.match(/<span[^>]*class=\"[^\"]*location[^\"]*\"[^>]*>([^<]+)<\\/span>/i);\n      \n      const contractMatch = itemHtml.match(/<div[^>]*data-cy=\"contractCard\"[^>]*>([^<]+)<\\/div>/i) ||\n                           itemHtml.match(/<span[^>]*class=\"[^\"]*contract[^\"]*\"[^>]*>([^<]+)<\\/span>/i);\n      \n      const idMatch = itemHtml.match(/data-id-storage-item-id=\"([^\"]+)\"/i) ||\n                     itemHtml.match(/id=\"([^\"]+)\"/i);\n      \n      const offer = {\n        id: idMatch ? idMatch[1] : `offer-${index}`,\n        title: title,\n        company: company,\n        location: locationMatch ? locationMatch[1].trim() : null,\n        contract_type: contractMatch ? contractMatch[1].trim() : null,\n        url: link ? (link.startsWith('http') ? link : config.base_url + link) : null,\n        source_platform: config.site_name,\n        scraped_at: new Date().toISOString(),\n        search_metadata: {\n          source_url: config.search_params.url,\n          keywords: config.search_params.keywords,\n          location_search: config.search_params.location\n        },\n        raw_html_preview: itemHtml.substring(0, 300)\n      };\n      \n      logger.debug(`Offre extraite ${index}`, {\n        title: offer.title,\n        company: offer.company,\n        hasUrl: !!offer.url\n      });\n      \n      // Ajouter m√™me les offres partielles pour le debug\n      if (offer.title || offer.company) {\n        offers.push(offer);\n      }\n      \n    } catch (error) {\n      logger.error(`Erreur extraction offre ${index}`, { error: error.message });\n    }\n  }\n  \n  logger.info('Extraction termin√©e', { \n    totalItems: offerItems.length,\n    offersExtracted: offers.length,\n    sampleOffer: offers[0] || 'Aucune'\n  });\n  \n  // Toujours retourner quelque chose, m√™me si vide\n  if (offers.length === 0) {\n    return [{\n      json: {\n        no_offers_extracted: true,\n        debug_info: {\n          items_found: offerItems.length,\n          html_length: html.length,\n          config: config\n        }\n      }\n    }];\n  }\n  \n  return offers.map(offer => ({ json: offer }));\n  \n} catch (error) {\n  logger.error('Erreur g√©n√©rale du scraper', { error: error.message });\n  // Retourner une erreur structur√©e au lieu de throw\n  return [{\n    json: {\n      error: error.message,\n      debug_info: {\n        input_received: !!$input.item,\n        timestamp: new Date().toISOString()\n      }\n    }\n  }];\n}"
      },
      "id": "5d0a5d6b-57a7-48a4-9016-993a9838f2b1",
      "name": "üï∑Ô∏è Scraper Liste Offres",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -820,
        180
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "has-url",
              "leftValue": "={{ $json.url }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "isNotEmpty"
              }
            },
            {
              "id": "valid-title",
              "leftValue": "={{ $json.title }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "isNotEmpty"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "318b0977-4ff6-47ae-ae1c-425cf19a5777",
      "name": "üîç Filtrer Offres Valides",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -880,
        520
      ],
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "url": "={{ $json.url }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"
            },
            {
              "name": "Accept",
              "value": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"
            }
          ]
        },
        "options": {
          "timeout": 20000
        }
      },
      "id": "2885a373-3f08-4065-b299-cce5a47e22c9",
      "name": "üåê Fetch D√©tail Offre",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -680,
        420
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "jsCode": "const offerBase = $('üîç Filtrer Offres Valides').item.json; const detailResponse = $input.item.json; console.log(`üìÑ === SCRAPING D√âTAIL: ${offerBase.title} ===`); if (!detailResponse || detailResponse.statusCode !== 200) { console.log('‚ùå Erreur r√©cup√©ration d√©tail:', detailResponse.statusCode); return [{ json: { ...offerBase, detail_error: 'FETCH_ERROR' } }]; } const cheerio = require('cheerio'); const $ = cheerio.load(detailResponse.body); try { const jobTitle = $('span[data-cy=\"jobTitle\"]').text().trim(); const company = $('h1#main-content > span.tw-contents').text().trim(); let missions = null; $('h2').each((i, h2) => { const text = $(h2).text().toLowerCase(); if (text.includes('mission')) { const nextP = $(h2).next('p.tw-typo-long-m'); if (nextP.length) { missions = nextP.text().trim(); } } }); let profil = null; $('h2').each((i, h2) => { const text = $(h2).text().toLowerCase(); if (text.includes('profil')) { const nextP = $(h2).next('p.tw-typo-long-m'); if (nextP.length) { profil = nextP.text().trim(); } } }); let avantages = null; $('h2').each((i, h2) => { const text = $(h2).text().toLowerCase(); if (text.includes('compl√©mentaires') || text.includes('avantage')) { const nextP = $(h2).next('p.tw-typo-long-m'); if (nextP.length) { avantages = nextP.text().trim(); } } }); const resumeTags = []; $('section').each((i, section) => { const header = $(section).find('div.tw-typo-xl, div.tw-typo-l').text(); if (header.includes('R√©sum√©')) { $(section).find('li.tw-tag-secondary-s').each((j, tag) => { resumeTags.push($(tag).text().trim()); }); } }); const datePublication = $('span.tw-block.tw-typo-xs.tw-text-grey.tw-break-words').text().trim(); const enrichedOffer = { ...offerBase, detail_scraped: true, detail: { job_title_detail: jobTitle || offerBase.title, company_detail: company || offerBase.company, missions: missions, profil_recherche: profil, avantages: avantages, resume_tags: resumeTags, date_publication_detail: datePublication, scraped_detail_at: new Date().toISOString() }, enriched_analysis: { has_detailed_description: !!(missions || profil), description_length: (missions || '').length + (profil || '').length, has_advantages: !!avantages, tags_count: resumeTags.length } }; console.log(`‚úÖ D√©tail extrait pour: ${enrichedOffer.title}`); console.log(`üìã Missions: ${missions ? 'Oui' : 'Non'}`); console.log(`üë§ Profil: ${profil ? 'Oui' : 'Non'}`); console.log(`üéÅ Avantages: ${avantages ? 'Oui' : 'Non'}`); return [{ json: enrichedOffer }]; } catch (error) { console.log(`‚ùå Erreur extraction d√©tail:`, error.message); return [{ json: { ...offerBase, detail_error: error.message } }]; }"
      },
      "id": "4f333f20-43bc-4cf0-b8d9-887e1d0a70f7",
      "name": "üìÑ Scraper D√©tail Offre",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -440,
        340
      ]
    },
    {
      "parameters": {
        "jsCode": "// PR√âPARATION CLASSIFICATION MISTRAL AVEC DONN√âES ENRICHIES\nconst offer = $input.item.json;\n\nconsole.log(`ü§ñ === PR√âPARATION MISTRAL: ${offer.title} ===`);\n\n// Construction du prompt avec toutes les donn√©es disponibles\nconst fullDescription = [\n  offer.title,\n  offer.detail?.missions || '',\n  offer.detail?.profil_recherche || '',\n  offer.detail?.avantages || ''\n].filter(Boolean).join('\\n\\n');\n\nconst expertPrompt = `EXPERT CLASSIFICATION ALTERNANCE CYBERS√âCURIT√â\n\n=== OFFRE COMPL√àTE √Ä ANALYSER ===\nTITRE: ${offer.title}\nENTREPRISE: ${offer.company}\nLIEU: ${offer.location}\nTYPE CONTRAT: ${offer.contract_type}\nDUR√âE: ${offer.duration || 'Non sp√©cifi√©e'}\nSALAIRE: ${offer.salary_range || 'Non communiqu√©'}\n\n=== DESCRIPTION COMPL√àTE ===\n${fullDescription}\n\n=== TAGS R√âSUM√â ===\n${offer.detail?.resume_tags ? offer.detail.resume_tags.join(', ') : 'Aucun'}\n\n=== CRIT√àRES VALIDATION STRICTE ===\n\n1. üéØ TYPE CONTRAT (OBLIGATOIRE):\n   ‚úÖ VALIDE: alternance, apprentissage, contrat professionnalisation\n   ‚ùå INVALIDE: stage, CDI, CDD, mission, freelance\n\n2. üõ°Ô∏è DOMAINE CYBERS√âCURIT√â/R√âSEAU (OBLIGATOIRE):\n   ‚úÖ VALIDE: cybers√©curit√©, s√©curit√© informatique, SOC, SIEM, pentest, audit s√©curit√©\n   ‚úÖ VALIDE: r√©seau, t√©l√©com, infrastructure, syst√®mes\n   ‚ùå INVALIDE: d√©veloppement g√©n√©ral, marketing, commercial, RH\n\n3. üìö NIVEAU FORMATION (IMPORTANT):\n   ‚úÖ PR√âF√âR√â: master, bac+4, bac+5, junior, d√©butant, formation\n   ‚ùå EXCLUSION: senior 5+ ans, expert, manager\n\n4. üéì DUR√âE APPROPRI√âE:\n   ‚úÖ VALIDE: 1 an, 2 ans, 12-24 mois\n   ‚ùå INVALIDE: < 6 mois, > 3 ans\n\n=== FORMAT R√âPONSE OBLIGATOIRE ===\nCLASSIFICATION: VALIDE ou INVALIDE\nJUSTIFICATION: [Explication pr√©cise en 1 phrase]\nCONFIANCE: [0.1 √† 1.0]\n\nAnalyse cette offre maintenant.`;\n\nconst mistralPayload = {\n  model: \"mistral-large-latest\",\n  messages: [\n    {\n      role: \"system\",\n      content: \"Tu es un expert RH sp√©cialis√© dans l'analyse d'offres d'alternance en cybers√©curit√© et r√©seaux/t√©l√©com. Tu appliques des crit√®res stricts et √©values la pertinence pour un √©tudiant en Master cybers√©curit√©.\"\n    },\n    {\n      role: \"user\",\n      content: expertPrompt\n    }\n  ],\n  temperature: 0.05,\n  max_tokens: 300\n};\n\nconsole.log('üìã Payload Mistral pr√©par√©');\nconsole.log('üìä Longueur description:', fullDescription.length);\n\nreturn {\n  json: {\n    ...offer,\n    mistral_request: {\n      payload_json: JSON.stringify(mistralPayload),\n      model: mistralPayload.model,\n      prompt_length: expertPrompt.length,\n      has_full_description: !!offer.detail?.missions\n    },\n    classification_prompt: expertPrompt,\n    prepared_at: new Date().toISOString()\n  }\n};"
      },
      "id": "70fcb90c-ffa7-4206-b943-7584d9d069e0",
      "name": "üéØ Pr√©parer Mistral",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -100,
        240
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.mistral.ai/v1/chat/completions",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer fe8GdBIIBwYk8Dj1GvclASPE3j0Zbt95"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "contentType": "raw",
        "body": "={{ $json.mistral_request.payload_json }}",
        "options": {
          "timeout": 30000
        }
      },
      "id": "7b83ae1e-6888-423c-8ca4-324c09088683",
      "name": "üß† API Mistral",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -80,
        420
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "jsCode": "// STOCKAGE FINAL DES OFFRES ANALYS√âES\nconst offer = $('üéØ Pr√©parer Mistral').item.json;\nconst mistralResponse = $input.item.json;\n\nconsole.log(`üíæ === STOCKAGE FINAL: ${offer.title} ===`);\n\n// Traitement de la r√©ponse Mistral\nlet classification = 'ERREUR';\nlet justification = 'Erreur traitement';\nlet confidence = 0;\nlet isValid = false;\n\nif (mistralResponse && mistralResponse.choices && mistralResponse.choices[0]) {\n  const content = mistralResponse.choices[0].message.content;\n  \n  // Parsing de la r√©ponse\n  const classMatch = content.match(/CLASSIFICATION:\\s*(VALIDE|INVALIDE)/i);\n  const justifMatch = content.match(/JUSTIFICATION:\\s*([^\\n]+)/i);\n  const confMatch = content.match(/CONFIANCE:\\s*([0-9.]+)/i);\n  \n  classification = classMatch ? classMatch[1].toUpperCase() : 'INCERTAIN';\n  justification = justifMatch ? justifMatch[1].trim() : 'Non trouv√©e';\n  confidence = confMatch ? parseFloat(confMatch[1]) : 0.5;\n  isValid = classification === 'VALIDE';\n}\n\n// Cr√©ation de l'objet final complet\nconst finalOffer = {\n  // M√©tadonn√©es\n  id: offer.id,\n  scraped_at: offer.scraped_at,\n  source_platform: offer.source_platform,\n  source_url: offer.url,\n  search_metadata: offer.search_metadata,\n  \n  // Donn√©es de base\n  title: offer.title,\n  company: offer.company,\n  location: offer.location,\n  contract_type: offer.contract_type,\n  salary_range: offer.salary_range,\n  duration: offer.duration,\n  posted_date: offer.posted_date,\n  \n  // D√©tails enrichis\n  detail: offer.detail || {},\n  \n  // Analyse IA\n  ai_classification: {\n    classification: classification,\n    justification: justification,\n    confidence: confidence,\n    is_valid_offer: isValid,\n    mistral_model: 'mistral-large-latest',\n    classified_at: new Date().toISOString()\n  },\n  \n  // Analyses pr√©liminaires\n  preliminary_analysis: offer.preliminary_analysis,\n  enriched_analysis: offer.enriched_analysis,\n  \n  // Score final\n  final_score: {\n    matches_criteria: isValid,\n    overall_quality: confidence,\n    has_full_details: !!offer.detail?.missions,\n    recommended: isValid && confidence > 0.7\n  }\n};\n\n// Log du r√©sultat\nif (isValid) {\n  console.log('üéâ ‚úÖ OFFRE VALID√âE ET STOCK√âE');\n  console.log(`üè¢ ${offer.company}`);\n  console.log(`üìç ${offer.location}`);\n  console.log(`üìä Confiance: ${confidence}`);\n} else {\n  console.log(`‚ùå OFFRE REJET√âE: ${justification}`);\n}\n\nreturn { json: finalOffer };"
      },
      "id": "b918eaa7-5c43-4561-abea-b4e824da417d",
      "name": "üíæ Stocker Offre Finale",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        140,
        420
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "c6ac049a-52a9-428b-81aa-f6b2ecd1e2f2",
      "name": "üìã Split Configs",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -1260,
        540
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "error-type",
              "name": "error_type",
              "value": "INVALID_OFFER",
              "type": "string"
            },
            {
              "id": "error-title",
              "name": "title",
              "value": "={{ $json.title }}",
              "type": "string"
            },
            {
              "id": "error-reason",
              "name": "error_reason",
              "value": "Offre invalide ou URL manquante",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "1ec336df-aacf-4c5e-a7f3-1092860f560e",
      "name": "‚ùå G√©rer Erreurs",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -660,
        780
      ]
    },
    {
      "parameters": {
        "jsCode": "console.log('‚úÖ Fin de boucle Split Configs : toutes les configurations ont √©t√© trait√©es.');\nreturn [{ json: { message: 'Fin de boucle : toutes les configurations ont √©t√© trait√©es', finished_at: new Date().toISOString() } }];"
      },
      "id": "4ac149fd-21bb-46ed-802f-874a2a0827ae",
      "name": "‚úÖ Fin de Boucle",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -400,
        160
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://localhost:8765/save/fin_de_boucle_output",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": []
        },
        "jsonBody": "={{ JSON.stringify($input.item.json) }}",
        "options": {
          "timeout": 10000,
          "redirect": {},
          "response": {
            "response": {
              "neverError": true,
              "responseFormat": "json"
            }
          }
        }
      },
      "id": "f21a462e-77c9-4fc6-9679-eb9cc7786255",
      "name": "üíæ Save Fin de Boucle Output",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -200,
        160
      ],
      "alwaysOutputData": true,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://localhost:8765/save/config_hellowork_output",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": []
        },
        "jsonBody": "={{ JSON.stringify($input.item.json) }}",
        "options": {
          "timeout": 10000,
          "redirect": {},
          "response": {
            "response": {
              "neverError": true,
              "responseFormat": "json"
            }
          }
        }
      },
      "id": "515e21b7-de6c-4c7c-aa44-c3a631283c9f",
      "name": "üíæ Save Config HelloWork Output",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1380,
        500
      ],
      "alwaysOutputData": true,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://localhost:8765/save/fetch_page_output",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": []
        },
        "jsonBody": "={{ JSON.stringify($input.item.json) }}",
        "options": {
          "timeout": 10000,
          "redirect": {},
          "response": {
            "response": {
              "neverError": true,
              "responseFormat": "json"
            }
          }
        }
      },
      "id": "e9de00ad-8d52-419f-8905-97d9a9c371fd",
      "name": "üíæ Save Fetch Page Output",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1200,
        300
      ],
      "alwaysOutputData": true,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://localhost:8765/save/extraire_conteneur_offres_output",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": []
        },
        "jsonBody": "={{ JSON.stringify($input.item.json) }}",
        "options": {
          "timeout": 10000,
          "redirect": {},
          "response": {
            "response": {
              "neverError": true,
              "responseFormat": "json"
            }
          }
        }
      },
      "id": "f4762b7f-5784-458a-975e-d7827a5db2cf",
      "name": "üíæ Save Extraire Conteneur Output",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -920,
        260
      ],
      "alwaysOutputData": true,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://localhost:8765/save/scraper_liste_offres_output",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": []
        },
        "jsonBody": "={{ JSON.stringify($input.item.json) }}",
        "options": {
          "timeout": 10000,
          "redirect": {},
          "response": {
            "response": {
              "neverError": true,
              "responseFormat": "json"
            }
          }
        }
      },
      "id": "ea7973c5-fe9b-4cca-a0c2-056ffe7b9928",
      "name": "üíæ Save Scraper Liste Offres Output",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -620,
        280
      ],
      "alwaysOutputData": true,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://localhost:8765/save/filtrer_offres_valides_output",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": []
        },
        "jsonBody": "={{ JSON.stringify($input.item.json) }}",
        "options": {
          "timeout": 10000,
          "redirect": {},
          "response": {
            "response": {
              "neverError": true,
              "responseFormat": "json"
            }
          }
        }
      },
      "id": "80b51eab-4993-40a2-aa8c-99aaa0c6fddb",
      "name": "üíæ Save Filtrer Offres Valides Output",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -680,
        620
      ],
      "alwaysOutputData": true,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://localhost:8765/save/fetch_detail_offre_output",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": []
        },
        "jsonBody": "={{ JSON.stringify($input.item.json) }}",
        "options": {
          "timeout": 10000,
          "redirect": {},
          "response": {
            "response": {
              "neverError": true,
              "responseFormat": "json"
            }
          }
        }
      },
      "id": "4f7d0f07-8c9d-4306-8ba7-5e88de450918",
      "name": "üíæ Save Fetch Detail Offre Output",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -480,
        520
      ],
      "alwaysOutputData": true,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://localhost:8765/save/scraper_detail_offre_output",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": []
        },
        "jsonBody": "={{ JSON.stringify($input.item.json) }}",
        "options": {
          "timeout": 10000,
          "redirect": {},
          "response": {
            "response": {
              "neverError": true,
              "responseFormat": "json"
            }
          }
        }
      },
      "id": "f2f006c8-11ac-45d6-b669-aa2b2449e0fe",
      "name": "üíæ Save Scraper Detail Offre Output",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -240,
        440
      ],
      "alwaysOutputData": true,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://localhost:8765/save/preparer_mistral_output",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": []
        },
        "jsonBody": "={{ JSON.stringify($input.item.json) }}",
        "options": {
          "timeout": 10000,
          "redirect": {},
          "response": {
            "response": {
              "neverError": true,
              "responseFormat": "json"
            }
          }
        }
      },
      "id": "1cd227bf-fe6b-4b54-8b0c-b6962f527d2c",
      "name": "üíæ Save Preparer Mistral Output",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        100,
        340
      ],
      "alwaysOutputData": true,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://localhost:8765/save/api_mistral_output",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": []
        },
        "jsonBody": "={{ JSON.stringify($input.item.json) }}",
        "options": {
          "timeout": 10000,
          "redirect": {},
          "response": {
            "response": {
              "neverError": true,
              "responseFormat": "json"
            }
          }
        }
      },
      "id": "eee738bf-7921-4f86-8c8d-41a6075a6a85",
      "name": "üíæ Save API Mistral Output",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        120,
        520
      ],
      "alwaysOutputData": true,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://localhost:8765/save/stocker_offre_finale_output",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": []
        },
        "jsonBody": "={{ JSON.stringify($input.item.json) }}",
        "options": {
          "timeout": 10000,
          "redirect": {},
          "response": {
            "response": {
              "neverError": true,
              "responseFormat": "json"
            }
          }
        }
      },
      "id": "1b959971-d798-458a-98de-c0d6070ba5a6",
      "name": "üíæ Save Stocker Offre Finale Output",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        340,
        520
      ],
      "alwaysOutputData": true,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://localhost:8765/save/gerer_erreurs_output",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": []
        },
        "jsonBody": "={{ JSON.stringify($input.item.json) }}",
        "options": {
          "timeout": 10000,
          "redirect": {},
          "response": {
            "response": {
              "neverError": true,
              "responseFormat": "json"
            }
          }
        }
      },
      "id": "b2a769a1-7ecc-4bef-bee0-90076ef3bad4",
      "name": "üíæ Save G√©rer Erreurs Output",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -460,
        880
      ],
      "alwaysOutputData": true,
      "onError": "continueErrorOutput"
    }
  ],
  "pinData": {},
  "connections": {
    "üöÄ Start": {
      "main": [
        [
          {
            "node": "‚öôÔ∏è Config HelloWork",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "‚öôÔ∏è Config HelloWork": {
      "main": [
        [
          {
            "node": "üìã Split Configs",
            "type": "main",
            "index": 0
          },
          {
            "node": "üíæ Save Config HelloWork Output",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üìã Split Configs": {
      "main": [
        [
          {
            "node": "üíæ Save Fin de Boucle Output",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "üåê Fetch Page",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üåê Fetch Page": {
      "main": [
        [
          {
            "node": "üì¶ Extraire Conteneur Offres",
            "type": "main",
            "index": 0
          },
          {
            "node": "üíæ Save Fetch Page Output",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "‚ùå G√©rer Erreurs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üì¶ Extraire Conteneur Offres": {
      "main": [
        [
          {
            "node": "üï∑Ô∏è Scraper Liste Offres",
            "type": "main",
            "index": 0
          },
          {
            "node": "üíæ Save Extraire Conteneur Output",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üï∑Ô∏è Scraper Liste Offres": {
      "main": [
        [
          {
            "node": "üîç Filtrer Offres Valides",
            "type": "main",
            "index": 0
          },
          {
            "node": "üíæ Save Scraper Liste Offres Output",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üîç Filtrer Offres Valides": {
      "main": [
        [
          {
            "node": "üåê Fetch D√©tail Offre",
            "type": "main",
            "index": 0
          },
          {
            "node": "üíæ Save Filtrer Offres Valides Output",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "‚ùå G√©rer Erreurs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üåê Fetch D√©tail Offre": {
      "main": [
        [
          {
            "node": "üìÑ Scraper D√©tail Offre",
            "type": "main",
            "index": 0
          },
          {
            "node": "üíæ Save Fetch Detail Offre Output",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "‚ùå G√©rer Erreurs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üìÑ Scraper D√©tail Offre": {
      "main": [
        [
          {
            "node": "üéØ Pr√©parer Mistral",
            "type": "main",
            "index": 0
          },
          {
            "node": "üíæ Save Scraper Detail Offre Output",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üéØ Pr√©parer Mistral": {
      "main": [
        [
          {
            "node": "üß† API Mistral",
            "type": "main",
            "index": 0
          },
          {
            "node": "üíæ Save Preparer Mistral Output",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üß† API Mistral": {
      "main": [
        [
          {
            "node": "üíæ Stocker Offre Finale",
            "type": "main",
            "index": 0
          },
          {
            "node": "üíæ Save API Mistral Output",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üíæ Stocker Offre Finale": {
      "main": [
        [
          {
            "node": "üíæ Save Stocker Offre Finale Output",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "‚ùå G√©rer Erreurs": {
      "main": [
        [
          {
            "node": "üíæ Save G√©rer Erreurs Output",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "a4d99d72-d443-49ff-aa7a-67559a8c781d",
  "meta": {
    "instanceId": "77649bb8ece500ac0c757974f51e9cabb1d2bb2ab3e605617a5d419377d2a6a4"
  },
  "id": "CHFlquhL6eeifX0D",
  "tags": []
}