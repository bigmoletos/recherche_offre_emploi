{
  "name": "üéØ HelloWork - Alternance Cybers√©curit√©",
  "nodes": [
    {
      "parameters": {},
      "id": "start-hellowork",
      "name": "üöÄ Start",
      "type": "n8n-nodes-base.start",
      "typeVersion": 1,
      "position": [
        0,
        100
      ]
    },
    {
      "parameters": {
        "jsCode": "// CONFIGURATION HELLOWORK CYBERS√âCURIT√â\nconsole.log('üîç === RECHERCHE HELLOWORK CYBERS√âCURIT√â ===');\n\nconst searchConfig = {\n  site_name: 'HelloWork',\n  base_url: 'https://www.hellowork.com',\n  search_params: {\n    // URL pour alternance cybers√©curit√©\n    url: 'https://www.hellowork.com/fr-fr/emploi/recherche.html?k=cybers√©curit√©%20alternance&l=France&c=apprentissage,contrat-professionnalisation',\n    keywords: ['cybers√©curit√©', 'alternance', 'apprentissage'],\n    location: 'France',\n    contract_types: ['apprentissage', 'contrat-professionnalisation'],\n    experience_level: 'd√©butant'\n  },\n  scraping_config: {\n    timeout: 30000,\n    retry_attempts: 3,\n    user_agent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',\n    headers: {\n      'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',\n      'Accept-Language': 'fr-FR,fr;q=0.9,en;q=0.8',\n      'Accept-Encoding': 'gzip, deflate, br',\n      'DNT': '1',\n      'Connection': 'keep-alive',\n      'Upgrade-Insecure-Requests': '1'\n    }\n  },\n  expected_results: {\n    min_offers: 1,\n    max_offers: 20,\n    target_alternance: true,\n    target_cybersecurity: true\n  }\n};\n\nconsole.log('üéØ Site cible:', searchConfig.site_name);\nconsole.log('üîó URL recherche:', searchConfig.search_params.url);\nconsole.log('üìã Mots-cl√©s:', searchConfig.search_params.keywords.join(', '));\n\nreturn { json: searchConfig };"
      },
      "id": "config-hellowork",
      "name": "‚öôÔ∏è Config HelloWork",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        200,
        100
      ]
    },
    {
      "parameters": {
        "jsCode": "// SIMULATION SCRAPING HELLOWORK (donn√©es r√©alistes)\nconst config = $input.item.json;\n\nconsole.log(`üåê === SCRAPING ${config.site_name} ===`);\nconsole.log('üéØ URL:', config.search_params.url);\n\n// Simulation offres HelloWork r√©alistes\nconst mockOffersHelloWork = [\n  {\n    id: 'hw-cyber-001-2025',\n    title: 'Alternance - Analyste Cybers√©curit√© SOC L1/L2',\n    company: 'Orange Cyberd√©fense',\n    location: 'Issy-les-Moulineaux (92)',\n    contract_type: 'Contrat d\\'apprentissage',\n    duration: '24 mois',\n    salary_range: '1200-1500‚Ç¨/mois',\n    start_date: '2025-09-01',\n    description: 'Rejoignez notre √©quipe SOC en alternance ! Formation Master cybers√©curit√©. Missions : surveillance 24/7, analyse incidents s√©curit√©, utilisation SIEM (Splunk, QRadar). Encadrement par experts cybers√©curit√©.',\n    requirements: ['Master 1/2 cybers√©curit√©', 'Bases r√©seaux/syst√®mes', 'Motivation s√©curit√©', 'Anglais technique'],\n    benefits: ['Formation certifiante', 'Encadrement expert', 'Possibilit√© CDI'],\n    posted_date: '2025-06-10',\n    expires_date: '2025-07-10',\n    reference: 'ORANGE-CYBER-ALT-2025',\n    url: 'https://www.hellowork.com/fr-fr/emploi/orange-cyberdefense-alternance-analyste-cybersecurite-soc.html',\n    source_platform: 'HelloWork'\n  },\n  {\n    id: 'hw-cyber-002-2025',\n    title: 'Apprentissage D√©veloppeur S√©curit√© - Outils Cybers√©curit√©',\n    company: 'Thales Defence',\n    location: 'Toulouse (31)',\n    contract_type: 'Contrat d\\'apprentissage',\n    duration: '36 mois',\n    salary_range: '1400-1700‚Ç¨/mois',\n    start_date: '2025-08-15',\n    description: 'Formation d√©veloppement d\\'outils cybers√©curit√© d√©fense. Stack : Python, C++, cryptographie. Projets : outils audit s√©curit√©, solutions chiffrement, analyse malware. Habilitation d√©fense requise.',\n    requirements: ['Bac+3 informatique', 'Python/C++', 'Cryptographie', 'Nationalit√© fran√ßaise'],\n    benefits: ['Habilitation d√©fense', 'Projets strat√©giques', '√âvolution carri√®re'],\n    posted_date: '2025-06-08',\n    expires_date: '2025-08-01',\n    reference: 'THALES-DEV-CYBER-2025',\n    url: 'https://www.hellowork.com/fr-fr/emploi/thales-apprentissage-developpeur-securite-outils.html',\n    source_platform: 'HelloWork'\n  },\n  {\n    id: 'hw-stage-001-2025',\n    title: 'Stage Communication Digitale - 6 mois',\n    company: 'Agence WebCom',\n    location: 'Lyon (69)',\n    contract_type: 'Stage',\n    duration: '6 mois',\n    salary_range: '600‚Ç¨/mois',\n    start_date: '2025-07-01',\n    description: 'Stage communication digitale. Gestion r√©seaux sociaux, cr√©ation contenu, √©v√©nementiel. Aucun lien avec cybers√©curit√©. Recherche √©tudiant communication/marketing.',\n    requirements: ['Bac+3 communication', 'R√©seaux sociaux', 'Cr√©ativit√©'],\n    benefits: ['Ambiance startup', 'Formation digitale'],\n    posted_date: '2025-06-05',\n    expires_date: '2025-06-25',\n    reference: 'WEBCOM-STAGE-2025',\n    url: 'https://www.hellowork.com/fr-fr/emploi/agence-webcom-stage-communication-digitale.html',\n    source_platform: 'HelloWork'\n  },\n  {\n    id: 'hw-cdi-001-2025',\n    title: 'Ing√©nieur Cybers√©curit√© Senior - Expert Pentest',\n    company: 'Devoteam Cybertrust',\n    location: 'Paris (75)',\n    contract_type: 'CDI',\n    duration: 'Ind√©termin√©e',\n    salary_range: '60000-80000‚Ç¨/an',\n    start_date: '2025-07-15',\n    description: 'Recherchons ing√©nieur cybers√©curit√© senior 5+ ans exp√©rience. Missions : audits s√©curit√©, pentests applicatifs/infrastructure, conseil client. Expertise avanc√©e requise.',\n    requirements: ['Bac+5 cybers√©curit√©', '5+ ans pentest', 'Certifications OSCP/CEH', 'Autonomie'],\n    benefits: ['Salaire attractif', 'Projets vari√©s', 'Formation continue'],\n    posted_date: '2025-06-07',\n    expires_date: '2025-08-07',\n    reference: 'DEVOTEAM-SENIOR-2025',\n    url: 'https://www.hellowork.com/fr-fr/emploi/devoteam-ingenieur-cybersecurite-senior-pentest.html',\n    source_platform: 'HelloWork'\n  }\n];\n\nconsole.log(`üìã Offres HelloWork trouv√©es: ${mockOffersHelloWork.length}`);\n\n// Enrichissement avec m√©tadonn√©es scraping\nconst enrichedOffers = mockOffersHelloWork.map((offer, index) => {\n  // Analyse pr√©liminaire\n  const isAlternanceContract = ['apprentissage', 'alternance', 'professionnalisation']\n    .some(type => offer.contract_type.toLowerCase().includes(type));\n  \n  const isCyberSecurity = ['cyber', 's√©curit√©', 'security', 'soc', 'pentest']\n    .some(keyword => \n      (offer.title + ' ' + offer.description).toLowerCase().includes(keyword)\n    );\n  \n  const expectedClassification = (isAlternanceContract && isCyberSecurity) ? 'VALIDE' : 'INVALIDE';\n  \n  return {\n    ...offer,\n    scraped_at: new Date().toISOString(),\n    scraping_metadata: {\n      source: config.site_name,\n      search_url: config.search_params.url,\n      extraction_method: 'simulation_realistic',\n      offer_index: index\n    },\n    preliminary_analysis: {\n      is_alternance_contract: isAlternanceContract,\n      is_cybersecurity_domain: isCyberSecurity,\n      expected_mistral_classification: expectedClassification,\n      confidence_preliminary: (isAlternanceContract && isCyberSecurity) ? 0.9 : 0.8\n    },\n    ready_for_mistral: true\n  };\n});\n\nconsole.log('‚úÖ Enrichissement termin√©');\nenrichedOffers.forEach((offer, idx) => {\n  const status = offer.preliminary_analysis.expected_mistral_classification;\n  console.log(`${idx + 1}. ${offer.title} ‚Üí ${status}`);\n});\n\nreturn enrichedOffers.map(offer => ({ json: offer }));"
      },
      "id": "scraper-hellowork",
      "name": "üï∑Ô∏è Scraper HelloWork",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        400,
        100
      ]
    },
    {
      "parameters": {
        "jsCode": "// PR√âPARATION CLASSIFICATION MISTRAL OPTIMIS√âE\nconst offer = $input.item.json;\n\nconsole.log(`ü§ñ === PR√âPARATION MISTRAL: ${offer.title} ===`);\nconsole.log('üè¢ Entreprise:', offer.company);\nconsole.log('üíº Contrat:', offer.contract_type);\nconsole.log('üéØ Classification attendue:', offer.preliminary_analysis.expected_mistral_classification);\n\n// Prompt expert sp√©cialis√© alternance cybers√©curit√©\nconst expertPrompt = `EXPERT CLASSIFICATION ALTERNANCE CYBERS√âCURIT√â\n\n=== OFFRE √Ä ANALYSER ===\nTITRE: ${offer.title}\nENTREPRISE: ${offer.company}\nTYPE CONTRAT: ${offer.contract_type}\nLIEU: ${offer.location}\nDUR√âE: ${offer.duration}\nSALAIRE: ${offer.salary_range}\nDESCRIPTION: ${offer.description}\nEXIGENCES: ${offer.requirements ? offer.requirements.join(', ') : 'Non sp√©cifi√©es'}\n\n=== CRIT√àRES VALIDATION STRICTE ===\n\n1. üéØ TYPE CONTRAT (OBLIGATOIRE):\n   ‚úÖ VALIDE: apprentissage, alternance, contrat professionnalisation\n   ‚ùå INVALIDE: stage, CDI, CDD, mission, freelance\n\n2. üõ°Ô∏è DOMAINE CYBERS√âCURIT√â (OBLIGATOIRE):\n   ‚úÖ VALIDE: cybers√©curit√©, s√©curit√© informatique, SOC, SIEM, pentest, audit s√©curit√©, analyse s√©curit√©\n   ‚ùå INVALIDE: d√©veloppement g√©n√©ral, marketing, communication, commercial, RH\n\n3. üìö NIVEAU FORMATION (IMPORTANT):\n   ‚úÖ PR√âF√âR√â: junior, d√©butant, formation, √©tudiant\n   ‚ùå EXCLUSION: senior 5+ ans, expert, manager\n\n=== EXCLUSIONS AUTOMATIQUES ===\n- Stages (m√™me en cybers√©curit√©)\n- Postes seniors/experts (5+ ans exp√©rience)\n- CDI/CDD classiques sans formation\n- Domaines non-cybers√©curit√©\n\n=== FORMAT R√âPONSE OBLIGATOIRE ===\nCLASSIFICATION: VALIDE ou INVALIDE\nJUSTIFICATION: [Explication pr√©cise en 1 phrase]\nCONFIANCE: [0.1 √† 1.0]\n\nAnalyse maintenant cette offre.`;\n\n// Configuration Mistral optimis√©e\nconst mistralPayload = {\n  model: \"mistral-large-latest\",\n  messages: [\n    {\n      role: \"system\",\n      content: \"Tu es un expert RH sp√©cialis√© dans l'analyse d'offres d'alternance en cybers√©curit√©. Tu appliques des crit√®res stricts : SEULES les vraies alternances/apprentissages EN cybers√©curit√© pour d√©butants sont VALIDES. Sois tr√®s pr√©cis dans tes classifications.\"\n    },\n    {\n      role: \"user\",\n      content: expertPrompt\n    }\n  ],\n  temperature: 0.05,\n  max_tokens: 300\n};\n\nconsole.log('üìã Payload Mistral Large cr√©√©');\nconsole.log('üå°Ô∏è Temp√©rature:', mistralPayload.temperature);\nconsole.log('üìè Max tokens:', mistralPayload.max_tokens);\n\nreturn {\n  json: {\n    ...offer,\n    mistral_request: {\n      payload_json: JSON.stringify(mistralPayload),\n      model: mistralPayload.model,\n      temperature: mistralPayload.temperature,\n      max_tokens: mistralPayload.max_tokens,\n      prompt_length: expertPrompt.length\n    },\n    classification_prompt: expertPrompt,\n    prepared_at: new Date().toISOString(),\n    processing_status: 'READY_FOR_MISTRAL_CLASSIFICATION'\n  }\n};"
      },
      "id": "prepare-mistral",
      "name": "üéØ Pr√©parer Mistral",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        600,
        100
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.mistral.ai/v1/chat/completions",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer fe8GdBIIBwYk8Dj1GvclASPE3j0Zbt95"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "contentType": "raw",
        "body": "={{ $json.mistral_request.payload_json }}",
        "options": {
          "timeout": 30000
        }
      },
      "id": "api-mistral",
      "name": "üß† API Mistral",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        800,
        100
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition-valid-offer",
              "leftValue": "={{ $json.mistral_result.is_valid_offer }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "is true"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "filter-valid",
      "name": "üîç Filtrer Valides",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        1200,
        100
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "action-type",
              "name": "action",
              "value": "ALTERNANCE_CYBERSECURITE_TROUVEE",
              "type": "string"
            },
            {
              "id": "offer-title",
              "name": "titre",
              "value": "{{ $json.title }}",
              "type": "string"
            },
            {
              "id": "offer-company",
              "name": "entreprise",
              "value": "{{ $json.company }}",
              "type": "string"
            },
            {
              "id": "offer-contract",
              "name": "contrat",
              "value": "{{ $json.contract_type }}",
              "type": "string"
            },
            {
              "id": "offer-location",
              "name": "lieu",
              "value": "{{ $json.location }}",
              "type": "string"
            },
            {
              "id": "offer-salary",
              "name": "salaire",
              "value": "{{ $json.salary_range }}",
              "type": "string"
            },
            {
              "id": "offer-duration",
              "name": "duree",
              "value": "{{ $json.duration }}",
              "type": "string"
            },
            {
              "id": "offer-url",
              "name": "lien_candidature",
              "value": "{{ $json.url }}",
              "type": "string"
            },
            {
              "id": "mistral-justification",
              "name": "justification_ia",
              "value": "{{ $json.mistral_result.justification }}",
              "type": "string"
            },
            {
              "id": "confidence-score",
              "name": "score_confiance",
              "value": "{{ $json.mistral_result.confidence }}",
              "type": "number"
            },
            {
              "id": "summary",
              "name": "resume_offre",
              "value": "‚úÖ {{ $json.title }} chez {{ $json.company }} - {{ $json.contract_type }} ({{ $json.duration }}) √† {{ $json.location }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "format-valid",
      "name": "‚úÖ Formater Offres Retenues",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1400,
        0
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "action-rejected",
              "name": "action",
              "value": "OFFRE_REJETEE",
              "type": "string"
            },
            {
              "id": "rejected-title",
              "name": "titre",
              "value": "{{ $json.title }}",
              "type": "string"
            },
            {
              "id": "rejected-company",
              "name": "entreprise",
              "value": "{{ $json.company }}",
              "type": "string"
            },
            {
              "id": "rejection-reason",
              "name": "raison_rejet",
              "value": "{{ $json.mistral_result.classification }} - {{ $json.mistral_result.justification }}",
              "type": "string"
            },
            {
              "id": "contract-issue",
              "name": "probleme_contrat",
              "value": "{{ $json.contract_type }} (attendu: alternance/apprentissage)",
              "type": "string"
            },
            {
              "id": "summary-rejected",
              "name": "resume",
              "value": "‚ùå {{ $json.title }} chez {{ $json.company }} - Rejet√©: {{ $json.mistral_result.classification }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "format-rejected",
      "name": "‚ùå Formater Offres Rejet√©es",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1400,
        200
      ]
    },
    {
      "parameters": {
        "jsCode": "// TRAITEMENT R√âPONSE MISTRAL AVEC PARSING ROBUSTE\nconst originalOffer = $('üéØ Pr√©parer Mistral').item.json;\nconst mistralResponse = $input.item.json;\n\nconsole.log(`‚úÖ === CLASSIFICATION R√âUSSIE: ${originalOffer.title} ===`);\nconsole.log('üè¢ Entreprise:', originalOffer.company);\nconsole.log('üíº Type contrat:', originalOffer.contract_type);\n\n// Validation structure r√©ponse Mistral\nif (!mistralResponse.choices || !mistralResponse.choices[0] || !mistralResponse.choices[0].message) {\n  console.log('‚ùå Structure r√©ponse Mistral invalide');\n  return {\n    json: {\n      ...originalOffer,\n      mistral_result: {\n        classification: 'ERREUR_STRUCTURE',\n        justification: 'R√©ponse API Mistral malform√©e',\n        confidence: 0,\n        is_valid_offer: false,\n        error_type: 'INVALID_API_RESPONSE'\n      }\n    }\n  };\n}\n\nconst mistralContent = mistralResponse.choices[0].message.content.trim();\nconsole.log('üìù R√©ponse Mistral compl√®te:', mistralContent);\n\n// Parsing robuste avec regex\nlet classification = 'INCERTAIN';\nlet justification = 'Non trouv√©e';\nlet confidence = 0.5;\n\n// Extraction CLASSIFICATION avec patterns multiples\nconst classificationPatterns = [\n  /CLASSIFICATION:\\s*(VALIDE|INVALIDE)/i,\n  /^(VALIDE|INVALIDE)/i,\n  /(VALIDE|INVALIDE)(?!.*INVALIDE|.*VALIDE)/i\n];\n\nfor (const pattern of classificationPatterns) {\n  const match = mistralContent.match(pattern);\n  if (match) {\n    classification = match[1].toUpperCase();\n    console.log('üéØ Classification extraite:', classification);\n    break;\n  }\n}\n\n// Extraction JUSTIFICATION\nconst justificationPatterns = [\n  /JUSTIFICATION:\\s*([^\\n]+)/i,\n  /(?:VALIDE|INVALIDE)[^\\n]*:\\s*([^\\n]+)/i\n];\n\nfor (const pattern of justificationPatterns) {\n  const match = mistralContent.match(pattern);\n  if (match) {\n    justification = match[1].trim();\n    console.log('üìã Justification extraite:', justification);\n    break;\n  }\n}\n\n// Extraction CONFIANCE\nconst confidencePatterns = [\n  /CONFIANCE:\\s*([0-9.]+)/i,\n  /CONFIDENCE:\\s*([0-9.]+)/i\n];\n\nfor (const pattern of confidencePatterns) {\n  const match = mistralContent.match(pattern);\n  if (match) {\n    confidence = parseFloat(match[1]);\n    console.log('üìä Confiance extraite:', confidence);\n    break;\n  }\n}\n\n// Validation coh√©rence\nconst isValid = classification === 'VALIDE';\nconst expectedClassification = originalOffer.preliminary_analysis.expected_mistral_classification;\nconst isCorrectPrediction = classification === expectedClassification;\nconst finalConfidence = classification !== 'INCERTAIN' ? Math.max(confidence, 0.8) : 0.3;\n\n// V√©rification suppl√©mentaire pour alternance cybers√©curit√©\nconst isAlternanceContract = ['apprentissage', 'alternance', 'professionnalisation']\n  .some(type => originalOffer.contract_type.toLowerCase().includes(type));\n\nconst isCyberSecurity = ['cyber', 's√©curit√©', 'security', 'soc', 'pentest']\n  .some(keyword => \n    (originalOffer.title + ' ' + originalOffer.description).toLowerCase().includes(keyword)\n  );\n\nconst isAlternanceCybersecurity = isAlternanceContract && isCyberSecurity;\n\nconsole.log(`üéØ Classification finale: ${classification}`);\nconsole.log(`üìä Offre valide: ${isValid}`);\nconsole.log(`‚úÖ Pr√©diction correcte: ${isCorrectPrediction}`);\nconsole.log(`üìä Confiance finale: ${finalConfidence}`);\nconsole.log(`üéì Alternance Cybers√©curit√©: ${isAlternanceCybersecurity}`);\n\n// R√âSULTAT FINAL STRUCTUR√â\nconst finalResult = {\n  // Identifiants offre\n  offer_id: originalOffer.id,\n  title: originalOffer.title,\n  company: originalOffer.company,\n  contract_type: originalOffer.contract_type,\n  location: originalOffer.location,\n  duration: originalOffer.duration,\n  salary_range: originalOffer.salary_range,\n  url: originalOffer.url,\n  source_platform: originalOffer.source_platform,\n  \n  // R√©sultat classification Mistral\n  mistral_result: {\n    classification: classification,\n    justification: justification,\n    confidence: finalConfidence,\n    is_valid_offer: isValid,\n    expected_classification: expectedClassification,\n    is_correct_prediction: isCorrectPrediction,\n    processing_status: 'CLASSIFIED_SUCCESS'\n  },\n  \n  // M√©tadonn√©es techniques\n  technical_metadata: {\n    model_used: mistralResponse.model,\n    tokens_used: mistralResponse.usage,\n    raw_mistral_response: mistralContent,\n    classified_at: new Date().toISOString(),\n    processing_source: 'HelloWork_workflow'\n  },\n  \n  // Flags pour suite du traitement\n  is_alternance_cybersecurity: isAlternanceCybersecurity,\n  needs_manual_review: classification === 'INCERTAIN',\n  quality_score: finalConfidence\n};\n\nif (isValid) {\n  console.log('üéâ ‚úÖ OFFRE VALID√âE POUR ALTERNANCE CYBERS√âCURIT√â');\n} else {\n  console.log(`‚ùå OFFRE REJET√âE: ${justification}`);\n}\n\nreturn { json: finalResult };"
      },
      "id": "process-success",
      "name": "‚úÖ Traiter Succ√®s",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1000,
        0
      ]
    },
    {
      "parameters": {
        "jsCode": "// TRAITEMENT ERREUR MISTRAL\nconst originalOffer = $('üéØ Pr√©parer Mistral').item.json;\nconst errorData = $input.item;\n\nconsole.log(`‚ùå === ERREUR MISTRAL: ${originalOffer.title} ===`);\nconsole.log('üîç Code erreur:', errorData.httpCode);\nconsole.log('üìã Message:', errorData.message);\n\n// Classification erreur\nlet errorType = 'UNKNOWN_ERROR';\nswitch(errorData.httpCode) {\n  case 401: errorType = 'AUTH_ERROR'; break;\n  case 422: errorType = 'VALIDATION_ERROR'; break;\n  case 429: errorType = 'RATE_LIMIT'; break;\n  case 500: errorType = 'SERVER_ERROR'; break;\n  default: errorType = 'NETWORK_ERROR';\n}\n\nconst errorResult = {\n  offer_id: originalOffer.id,\n  title: originalOffer.title,\n  company: originalOffer.company,\n  contract_type: originalOffer.contract_type,\n  source_platform: originalOffer.source_platform,\n  url: originalOffer.url,\n  \n  mistral_result: {\n    classification: 'ERREUR_API',\n    justification: `Erreur ${errorType}: ${errorData.message || 'Erreur inconnue'}`,\n    confidence: 0,\n    is_valid_offer: false,\n    processing_status: 'CLASSIFICATION_ERROR'\n  },\n  \n  error_details: {\n    error_type: errorType,\n    error_code: errorData.httpCode,\n    error_message: errorData.message,\n    error_timestamp: new Date().toISOString()\n  },\n  \n  is_alternance_cybersecurity: false,\n  needs_manual_review: true\n};\n\nconsole.log('üìä Erreur document√©e');\nreturn { json: errorResult };"
      },
      "id": "process-error",
      "name": "‚ùå Traiter Erreur",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1000,
        200
      ]
    }
  ],
  "pinData": {},
  "connections": {
    "üöÄ Start": {
      "main": [
        [
          {
            "node": "‚öôÔ∏è Config HelloWork",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "‚öôÔ∏è Config HelloWork": {
      "main": [
        [
          {
            "node": "üï∑Ô∏è Scraper HelloWork",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üï∑Ô∏è Scraper HelloWork": {
      "main": [
        [
          {
            "node": "üéØ Pr√©parer Mistral",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üéØ Pr√©parer Mistral": {
      "main": [
        [
          {
            "node": "üß† API Mistral",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üß† API Mistral": {
      "main": [
        [
          {
            "node": "‚úÖ Traiter Succ√®s",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "‚ùå Traiter Erreur",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "‚úÖ Traiter Succ√®s": {
      "main": [
        [
          {
            "node": "üîç Filtrer Valides",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "‚ùå Traiter Erreur": {
      "main": [
        [
          {
            "node": "üîç Filtrer Valides",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üîç Filtrer Valides": {
      "main": [
        [
          {
            "node": "‚úÖ Formater Offres Retenues",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "‚ùå Formater Offres Rejet√©es",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "meta": {
    "instanceId": "workflow-hellowork-cybersecurite"
  },
  "tags": [
    "alternance",
    "cybersecurite",
    "hellowork",
    "mistral"
  ]
}