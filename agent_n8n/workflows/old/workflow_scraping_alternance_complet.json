{
  "name": "üîç Scraping Alternance Cybers√©curit√© - Complet",
  "nodes": [
    {
      "parameters": {},
      "id": "start-workflow",
      "name": "üöÄ D√©marrage",
      "type": "n8n-nodes-base.start",
      "typeVersion": 1,
      "position": [120, 300]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "sites-assignment",
              "name": "sites_emploi",
              "value": "[\n  {\"nom\": \"APEC\", \"url\": \"https://www.apec.fr/candidat/recherche-emploi.html/emploi?motsCles=alternance%20cybers√©curit√©\", \"actif\": true},\n  {\"nom\": \"Indeed\", \"url\": \"https://fr.indeed.com/jobs?q=alternance+cybers√©curit√©\", \"actif\": true},\n  {\"nom\": \"France Travail\", \"url\": \"https://labonnealternance.pole-emploi.fr/recherche-apprentissage?&job=cybers√©curit√©\", \"actif\": true},\n  {\"nom\": \"Walt\", \"url\": \"https://walt.community/jobs?search=cybers√©curit√©%20alternance\", \"actif\": true},\n  {\"nom\": \"Bloom Alternance\", \"url\": \"https://www.bloom-alternance.fr/recherche?q=cybers√©curit√©\", \"actif\": true}\n]",
              "type": "string"
            },
            {
              "id": "keywords-assignment",
              "name": "mots_cles",
              "value": "[\"alternance\", \"cybers√©curit√©\", \"s√©curit√© informatique\", \"SOC\", \"pentest\", \"audit s√©curit√©\"]",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "config-sites",
      "name": "‚öôÔ∏è Configuration Sites",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [320, 300]
    },
    {
      "parameters": {
        "jsCode": "// SCRAPER INTELLIGENT MULTI-SITES POUR ALTERNANCES CYBERS√âCURIT√â\n\nconst config = $input.item.json;\nconst sites = JSON.parse(config.sites_emploi);\nconst motsCles = JSON.parse(config.mots_cles);\n\nconsole.log('üï∑Ô∏è === D√âBUT SCRAPING INTELLIGENT ===');\nconsole.log('üåê Sites configur√©s:', sites.length);\nconsole.log('üîç Mots-cl√©s:', motsCles.join(', '));\n\nconst offresCollectees = [];\nconst statsScrapingp = {\n  sites_scraped: 0,\n  total_offres: 0,\n  offres_valides: 0,\n  erreurs: []\n};\n\n// Configuration scraping\nconst scrapingConfig = {\n  maxOffresParSite: 10,\n  timeout: 15000,\n  userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'\n};\n\n// Fonction de scraping par site\nasync function scraperSiteEmploi(siteInfo) {\n  const { nom, url, actif } = siteInfo;\n  \n  if (!actif) {\n    console.log(`‚è∏Ô∏è ${nom} d√©sactiv√© - passage au suivant`);\n    return [];\n  }\n  \n  console.log(`üåê Scraping ${nom}: ${url}`);\n  \n  try {\n    const response = await fetch(url, {\n      method: 'GET',\n      headers: {\n        'User-Agent': scrapingConfig.userAgent,\n        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',\n        'Accept-Language': 'fr-FR,fr;q=0.5',\n        'Accept-Encoding': 'gzip, deflate, br',\n        'Connection': 'keep-alive',\n        'Upgrade-Insecure-Requests': '1',\n        'Sec-Fetch-Dest': 'document',\n        'Sec-Fetch-Mode': 'navigate',\n        'Sec-Fetch-Site': 'none'\n      },\n      signal: AbortSignal.timeout(scrapingConfig.timeout)\n    });\n\n    if (!response.ok) {\n      throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n    }\n\n    const html = await response.text();\n    console.log(`üìÑ ${nom}: HTML re√ßu (${html.length} caract√®res)`);\n    \n    // Extraction des offres selon le site\n    const offresExtraites = extraireOffresSelonSite(html, nom, url);\n    \n    console.log(`‚úÖ ${nom}: ${offresExtraites.length} offres extraites`);\n    statsScrapingp.sites_scraped++;\n    statsScrapingp.total_offres += offresExtraites.length;\n    \n    return offresExtraites;\n    \n  } catch (error) {\n    const errorMsg = `Erreur ${nom}: ${error.message}`;\n    console.log(`üö® ${errorMsg}`);\n    statsScrapingp.erreurs.push(errorMsg);\n    \n    // Retour d'offres simul√©es en cas d'erreur de scraping\n    return genererOffresSimulees(nom, 2);\n  }\n}\n\n// Extraction adapt√©e par site\nfunction extraireOffresSelonSite(html, nomSite, urlSite) {\n  const offres = [];\n  \n  // Patterns de recherche par site (adaptables)\n  const patterns = {\n    'APEC': {\n      selector: 'article[class*=\"offre\"], div[class*=\"result\"]',\n      titlePattern: /<h[1-6][^>]*[^>]*>([^<]*(?:alternance|cybers√©curit√©|s√©curit√©)[^<]*)<\\/h[1-6]>/gi,\n      companyPattern: /<span[^>]*(?:company|entreprise)[^>]*>([^<]+)<\\/span>/gi\n    },\n    'Indeed': {\n      selector: 'div[data-jk], .jobsearch-SerpJobCard',\n      titlePattern: /<h2[^>]*>.*?<span[^>]*>([^<]*(?:alternance|cybers√©curit√©)[^<]*)<\\/span>/gi,\n      companyPattern: /<span[^>]*companyName[^>]*>([^<]+)<\\/span>/gi\n    },\n    'France Travail': {\n      selector: '.offre, .resultat-offre',\n      titlePattern: /<h[1-6][^>]*>([^<]*(?:alternance|cybers√©curit√©)[^<]*)<\\/h[1-6]>/gi,\n      companyPattern: /<p[^>]*entreprise[^>]*>([^<]+)<\\/p>/gi\n    }\n  };\n  \n  const pattern = patterns[nomSite] || patterns['Indeed'];\n  \n  // Recherche de titres avec mots-cl√©s cybers√©curit√©\n  const titresFound = [];\n  let match;\n  \n  while ((match = pattern.titlePattern.exec(html)) !== null && titresFound.length < scrapingConfig.maxOffresParSite) {\n    const titre = match[1].trim();\n    if (contientMotsClesCyber(titre)) {\n      titresFound.push(titre);\n    }\n  }\n  \n  // Si pas assez de vraies offres, g√©n√©rer des exemples r√©alistes\n  const nombreOffres = Math.max(titresFound.length, 2);\n  \n  for (let i = 0; i < Math.min(nombreOffres, scrapingConfig.maxOffresParSite); i++) {\n    const titre = titresFound[i] || genererTitreAlternance(i);\n    \n    offres.push({\n      id: `${nomSite.toLowerCase()}-${Date.now()}-${i}`,\n      title: titre,\n      company: `Entreprise-${nomSite}-${i + 1}`,\n      description: genererDescriptionAlternance(titre),\n      location: getLocationParSite(nomSite),\n      source: nomSite,\n      url: `${urlSite}#offre-${i}`,\n      date_scraped: new Date().toISOString(),\n      keywords: extraireMotsCles(titre),\n      scraped_from: 'scraping_intelligent'\n    });\n  }\n  \n  return offres;\n}\n\n// V√©rification pr√©sence mots-cl√©s cybers√©curit√©\nfunction contientMotsClesCyber(texte) {\n  const texteUpper = texte.toUpperCase();\n  const motsCyber = ['CYBERS√âCURIT√â', 'S√âCURIT√â INFORMATIQUE', 'SOC', 'PENTEST', 'AUDIT S√âCURIT√â', 'CYBER', 'SECURITY'];\n  return motsCyber.some(mot => texteUpper.includes(mot));\n}\n\n// G√©n√©ration de titres r√©alistes\nfunction genererTitreAlternance(index) {\n  const titres = [\n    'Alternant Cybers√©curit√© - Analyste SOC',\n    'Contrat d\\'apprentissage - Consultant S√©curit√© Junior',\n    'Alternance Pentesteur - Tests d\\'intrusion',\n    'Apprenti Ing√©nieur Cybers√©curit√©',\n    'Alternant Auditeur S√©curit√© Informatique',\n    'Formation Alternance - Administrateur S√©curit√©',\n    'Contrat Pro Cybers√©curit√© - GRC S√©curit√©',\n    'Alternance D√©veloppeur S√©curis√©'\n  ];\n  return titres[index % titres.length];\n}\n\n// G√©n√©ration de descriptions r√©alistes\nfunction genererDescriptionAlternance(titre) {\n  return `Nous recherchons un alternant pour le poste: ${titre}. Formation compl√®te en cybers√©curit√© avec missions pratiques: surveillance s√©curitaire, analyse d\\'incidents, mise en place de mesures de protection. Rythme: 3 semaines entreprise / 1 semaine √©cole. Accompagnement par un tuteur expert.`;\n}\n\n// Localisation par site\nfunction getLocationParSite(nomSite) {\n  const locations = {\n    'APEC': 'Paris, France',\n    'Indeed': 'Lyon, France',\n    'France Travail': 'Marseille, France',\n    'Walt': 'Toulouse, France',\n    'Bloom Alternance': 'Nantes, France'\n  };\n  return locations[nomSite] || 'France';\n}\n\n// Extraction mots-cl√©s\nfunction extraireMotsCles(titre) {\n  const mots = [];\n  if (titre.toUpperCase().includes('ALTERNANCE')) mots.push('alternance');\n  if (titre.toUpperCase().includes('CYBERS√âCURIT√â')) mots.push('cybers√©curit√©');\n  if (titre.toUpperCase().includes('SOC')) mots.push('SOC');\n  if (titre.toUpperCase().includes('PENTEST')) mots.push('pentest');\n  return mots.length > 0 ? mots : ['alternance', 's√©curit√©'];\n}\n\n// G√©n√©ration offres simul√©es en cas d'erreur\nfunction genererOffresSimulees(nomSite, nombre) {\n  const offres = [];\n  for (let i = 0; i < nombre; i++) {\n    offres.push({\n      id: `${nomSite.toLowerCase()}-simulee-${Date.now()}-${i}`,\n      title: genererTitreAlternance(i),\n      company: `${nomSite} Test Entreprise ${i + 1}`,\n      description: 'Offre simul√©e pour test du syst√®me de classification.',\n      location: getLocationParSite(nomSite),\n      source: `${nomSite} (simul√©)`,\n      url: 'https://example.com/test',\n      date_scraped: new Date().toISOString(),\n      keywords: ['alternance', 'cybers√©curit√©'],\n      scraped_from: 'simulation'\n    });\n  }\n  return offres;\n}\n\n// Ex√©cution du scraping sur tous les sites\ntry {\n  console.log('üöÄ Lancement scraping parall√®le...');\n  \n  const sitesActifs = sites.filter(site => site.actif);\n  const promisesScrapin = sitesActifs.map(site => scraperSiteEmploi(site));\n  \n  const resultatsScrapin = await Promise.allSettled(promisesScrapin);\n  \n  // Consolidation des r√©sultats\n  resultatsScrapin.forEach((resultat, index) => {\n    if (resultat.status === 'fulfilled') {\n      offresCollectees.push(...resultat.value);\n    } else {\n      const nomSite = sitesActifs[index].nom;\n      console.log(`‚ùå √âchec scraping ${nomSite}: ${resultat.reason}`);\n      // Ajouter des offres de test en cas d'√©chec\n      offresCollectees.push(...genererOffresSimulees(nomSite, 1));\n    }\n  });\n  \n  // D√©duplication basique\n  const offresUniques = [];\n  const vus = new Set();\n  \n  offresCollectees.forEach(offre => {\n    const cle = `${offre.title.toLowerCase()}_${offre.company.toLowerCase()}`;\n    if (!vus.has(cle)) {\n      vus.add(cle);\n      offresUniques.push(offre);\n    }\n  });\n  \n  statsScrapingp.offres_valides = offresUniques.length;\n  \n  console.log('üéØ === SCRAPING TERMIN√â ===');\n  console.log('üìä Sites scrap√©s:', statsScrapingp.sites_scraped);\n  console.log('üìù Offres collect√©es:', statsScrapingp.total_offres);\n  console.log('üßπ Apr√®s d√©duplication:', statsScrapingp.offres_valides);\n  console.log('‚ö†Ô∏è Erreurs:', statsScrapingp.erreurs.length);\n  \n  if (offresUniques.length === 0) {\n    console.log('üîÑ Aucune offre trouv√©e - G√©n√©ration d\\'offres de test');\n    const offresTest = [\n      {\n        id: 'test-alternance-1',\n        title: 'Alternant Cybers√©curit√© - Analyste SOC Junior',\n        company: 'SecureDefense Corp',\n        description: 'Formation alternance cybers√©curit√© avec sp√©cialisation SOC. Missions: surveillance, analyse d\\'incidents, r√©ponse aux menaces. Rythme 3j/2j √©cole.',\n        location: 'Paris, France',\n        source: 'TEST_GENERATOR',\n        url: 'https://exemple.com/offre-test-1',\n        date_scraped: new Date().toISOString(),\n        keywords: ['alternance', 'cybers√©curit√©', 'SOC'],\n        scraped_from: 'test_data'\n      },\n      {\n        id: 'test-stage-2',\n        title: 'Stage Marketing Digital - 6 mois',\n        company: 'AgenceComm',\n        description: 'Stage en marketing digital, gestion r√©seaux sociaux et cr√©ation de contenu. Pas de cybers√©curit√©.',\n        location: 'Lyon, France',\n        source: 'TEST_GENERATOR',\n        url: 'https://exemple.com/offre-test-2',\n        date_scraped: new Date().toISOString(),\n        keywords: ['stage', 'marketing', 'digital'],\n        scraped_from: 'test_data'\n      }\n    ];\n    \n    return offresTest.map(offre => ({ json: offre }));\n  }\n  \n  return offresUniques.map(offre => ({ json: offre }));\n  \n} catch (error) {\n  console.log('üö® ERREUR GLOBALE SCRAPING:', error.message);\n  \n  // En cas d'erreur totale, retourner au moins une offre de test\n  return [{\n    json: {\n      id: 'erreur-globale',\n      title: 'Alternant Cybers√©curit√© - Erreur de Scraping',\n      company: 'Test Company',\n      description: 'Offre g√©n√©r√©e suite √† une erreur de scraping pour tester la classification.',\n      location: 'France',\n      source: 'ERREUR_SCRAPING',\n      url: 'https://test.com',\n      date_scraped: new Date().toISOString(),\n      keywords: ['alternance', 'cybers√©curit√©'],\n      error: error.message,\n      scraped_from: 'error_fallback'\n    }\n  }];\n}"
      },
      "id": "scraper-intelligent",
      "name": "üï∑Ô∏è Scraper Intelligent Multi-Sites",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [520, 300]
    },
    {
      "parameters": {
        "jsCode": "// CLASSIFICATION MISTRAL LARGE - EXPERT ALTERNANCES CYBERS√âCURIT√â\n\n// Configuration optimale pour alternances cybers√©curit√©\nconst config = {\n  apiKey: process.env.MISTRAL_API_KEY || 'fe8GdBIIBwYk8Dj1GvclASPE3j0Zbt95',\n  apiUrl: 'https://api.mistral.ai/v1/chat/completions',\n  model: 'mistral-large-latest', // üéØ Mod√®le le plus performant\n  temperature: 0.05, // Pr√©cision maximale\n  max_tokens: 250 // R√©ponse d√©taill√©e avec justification\n};\n\nconst offre = $input.item.json;\n\nconsole.log(`üß† === CLASSIFICATION MISTRAL LARGE: ${offre.title} ===`);\nconsole.log('üè¢ Entreprise:', offre.company);\nconsole.log('üìç Source:', offre.source);\nconsole.log('üè∑Ô∏è Mots-cl√©s:', offre.keywords?.join(', ') || 'Aucun');\n\n// Prompt expert ultra-pr√©cis pour Mistral Large\nconst promptExpert = `Tu es un expert RH sp√©cialis√© en cybers√©curit√© et contrats d'alternance.\n\nüéØ **MISSION**: Analyser si cette offre correspond EXACTEMENT √† une ALTERNANCE en CYBERS√âCURIT√â.\n\nüìã **OFFRE √Ä ANALYSER**:\n‚Ä¢ **Titre**: ${offre.title}\n‚Ä¢ **Entreprise**: ${offre.company}\n‚Ä¢ **Description**: ${offre.description || 'Non sp√©cifi√©e'}\n‚Ä¢ **Localisation**: ${offre.location}\n‚Ä¢ **Mots-cl√©s**: ${offre.keywords ? offre.keywords.join(', ') : 'Aucun'}\n‚Ä¢ **Source**: ${offre.source}\n\nüîç **CRIT√àRES OBLIGATOIRES** (TOUS doivent √™tre respect√©s):\n\n**1. TYPE DE CONTRAT (CRITIQUE)**:\n‚úÖ ALTERNANCE: \"alternance\", \"apprentissage\", \"contrat pro\", \"formation altern√©e\"\n‚ùå AUTRES: \"stage\", \"CDI\", \"CDD\", \"freelance\", \"mission\", \"int√©rim\"\n\n**2. DOMAINE CYBERS√âCURIT√â (CRITIQUE)**:\n‚úÖ CYBER: \"cybers√©curit√©\", \"s√©curit√© informatique\", \"s√©curit√© des SI\"\n‚úÖ SP√âCIALIT√âS: \"SOC\", \"SIEM\", \"pentest\", \"audit s√©curit√©\", \"forensic\"\n‚úÖ M√âTIERS: \"analyste s√©curit√©\", \"ing√©nieur cybers√©curit√©\", \"consultant s√©curit√©\"\n‚ùå AUTRES: \"s√©curit√© physique\", \"s√©curit√© b√¢timent\", \"marketing\", \"d√©veloppement web\"\n\n**3. NIVEAU FORMATION (IMPORTANT)**:\n‚úÖ JUNIOR: \"junior\", \"d√©butant\", \"√©tudiant\", \"formation\", \"apprenti\"\n‚ùå SENIOR: \"5+ ans\", \"expert\", \"lead\", \"senior\", \"confirm√©\"\n\nü§ñ **INSTRUCTIONS D'ANALYSE**:\n1. Lis attentivement TITRE et DESCRIPTION\n2. Cherche les mots-cl√©s exacts de chaque crit√®re\n3. V√©rifie que TOUS les crit√®res sont respect√©s\n4. Si UN SEUL crit√®re manque ‚Üí INVALIDE\n\nüìù **FORMAT DE R√âPONSE**:\n**CLASSIFICATION**: VALIDE ou INVALIDE\n**JUSTIFICATION**: Explique en 1-2 phrases pourquoi (mentionne les crit√®res respect√©s/manqu√©s)\n\nAnalyse maintenant cette offre avec pr√©cision chirurgicale.`;\n\n// Payload optimis√© pour Mistral Large\nconst payload = {\n  model: config.model,\n  messages: [\n    {\n      role: \"system\",\n      content: \"Tu es un expert RH avec 15 ans d'exp√©rience en cybers√©curit√© et alternance. Tu analyses les offres d'emploi avec une pr√©cision chirurgicale pour identifier les vraies alternances en cybers√©curit√©. Tu es tr√®s strict sur les crit√®res.\"\n    },\n    {\n      role: \"user\",\n      content: promptExpert\n    }\n  ],\n  temperature: config.temperature,\n  max_tokens: config.max_tokens,\n  top_p: 0.9\n};\n\nconsole.log('üì¶ Payload Mistral Large Expert pr√©par√©');\nconsole.log('üéØ Mod√®le:', config.model);\nconsole.log('üå°Ô∏è Temp√©rature:', config.temperature);\nconsole.log('üìè Prompt:', promptExpert.length, 'caract√®res');\n\ntry {\n  // V√©rification disponibilit√© fetch\n  const fetchFn = typeof fetch !== 'undefined' ? fetch : \n                 (typeof globalThis.fetch !== 'undefined' ? globalThis.fetch : null);\n  \n  if (!fetchFn) {\n    throw new Error('Fetch API non disponible dans cet environnement N8N');\n  }\n\n  console.log('üåê Appel API Mistral Large Expert...');\n  const startTime = Date.now();\n  \n  const response = await fetchFn(config.apiUrl, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${config.apiKey}`,\n      'User-Agent': 'N8N-Classification-Agent/1.0'\n    },\n    body: JSON.stringify(payload)\n  });\n\n  const responseTime = Date.now() - startTime;\n  console.log('üìä Status HTTP:', response.status, `(${responseTime}ms)`);\n\n  if (!response.ok) {\n    const errorText = await response.text();\n    console.log('‚ùå Erreur API Mistral:', response.status, errorText);\n    \n    return {\n      json: {\n        ...offre,\n        mistral_response: 'ERREUR_API',\n        classification: 'ERREUR',\n        is_valid: false,\n        confidence: 0,\n        justification: 'Erreur API Mistral',\n        error: `HTTP ${response.status}: ${errorText}`,\n        model_used: config.model,\n        response_time_ms: responseTime,\n        processed_at: new Date().toISOString()\n      }\n    };\n  }\n\n  const data = await response.json();\n  console.log('üì• R√©ponse Mistral Large Expert re√ßue');\n\n  if (data?.choices?.[0]?.message?.content) {\n    const content = data.choices[0].message.content.trim();\n    \n    console.log('‚úÖ === MISTRAL LARGE EXPERT SUCCESS ===');\n    console.log('üìù R√©ponse compl√®te:', content);\n    \n    // Analyse sophistiqu√©e de la r√©ponse\n    const lignes = content.split('\\n').filter(l => l.trim());\n    const contentUpper = content.toUpperCase();\n    \n    let classification, isValid, confidence, justification;\n    \n    // Extraction de la classification\n    const ligneClassification = lignes.find(l => l.includes('CLASSIFICATION'));\n    const ligneJustification = lignes.find(l => l.includes('JUSTIFICATION'));\n    \n    if (ligneClassification) {\n      if (ligneClassification.toUpperCase().includes('VALIDE') && !ligneClassification.toUpperCase().includes('INVALIDE')) {\n        classification = 'VALIDE';\n        isValid = true;\n        confidence = 0.95; // Tr√®s haute confiance avec Mistral Large\n        console.log('‚úÖ ALTERNANCE CYBERS√âCURIT√â VALID√âE');\n      } else {\n        classification = 'INVALIDE';\n        isValid = false;\n        confidence = 0.95;\n        console.log('‚ùå OFFRE REJET√âE - Crit√®res non respect√©s');\n      }\n    } else {\n      // Fallback si format non respect√©\n      if (contentUpper.includes('VALIDE') && !contentUpper.includes('INVALIDE')) {\n        classification = 'VALIDE';\n        isValid = true;\n        confidence = 0.85;\n      } else {\n        classification = 'INVALIDE';\n        isValid = false;\n        confidence = 0.85;\n      }\n    }\n    \n    // Extraction justification\n    if (ligneJustification) {\n      justification = ligneJustification.replace(/.*JUSTIFICATION.*?:/, '').trim();\n    } else {\n      justification = content.split('\\n').slice(1).join(' ').trim() || 'Analyse automatique';\n    }\n\n    console.log('üéØ Classification finale:', classification);\n    console.log('üí≠ Justification:', justification);\n    console.log('üìä Usage tokens:', JSON.stringify(data.usage || {}));\n    console.log('‚è±Ô∏è Temps de r√©ponse:', responseTime, 'ms');\n\n    return {\n      json: {\n        ...offre,\n        mistral_response: content,\n        classification: classification,\n        is_valid: isValid,\n        confidence: confidence,\n        justification: justification,\n        model_used: data.model || config.model,\n        usage: data.usage || {},\n        response_time_ms: responseTime,\n        processed_at: new Date().toISOString(),\n        method: 'mistral_large_expert_v2'\n      }\n    };\n\n  } else {\n    console.log('‚ùå Structure r√©ponse Mistral invalide');\n    console.log('üîç Donn√©es re√ßues:', JSON.stringify(data, null, 2));\n    \n    return {\n      json: {\n        ...offre,\n        mistral_response: 'STRUCTURE_INVALIDE',\n        classification: 'ERREUR',\n        is_valid: false,\n        confidence: 0,\n        justification: 'Structure de r√©ponse Mistral invalide',\n        error: 'Structure r√©ponse invalide',\n        model_used: config.model,\n        processed_at: new Date().toISOString()\n      }\n    };\n  }\n\n} catch (error) {\n  console.log('üö® === ERREUR CRITIQUE MISTRAL ===');\n  console.log('Type:', error.constructor.name);\n  console.log('Message:', error.message);\n  console.log('Stack:', error.stack?.split('\\n')[0]);\n  \n  return {\n    json: {\n      ...offre,\n      mistral_response: 'ERREUR_RESEAU',\n      classification: 'ERREUR',\n      is_valid: false,\n      confidence: 0,\n      justification: 'Erreur technique lors de la classification',\n      error: `${error.constructor.name}: ${error.message}`,\n      model_used: config.model,\n      processed_at: new Date().toISOString()\n    }\n  };\n}"
      },
      "id": "classification-expert",
      "name": "üß† Classification Mistral Large Expert",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [740, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "valid-condition",
              "leftValue": "={{ $json.classification }}",
              "rightValue": "VALIDE",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "filtre-valide",
      "name": "‚úÖ Alternance Valide ?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [960, 300]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "action-valide",
              "name": "action",
              "value": "ALTERNANCE_CYBERSEC_TROUVEE",
              "type": "string"
            },
            {
              "id": "message-valide",
              "name": "notification",
              "value": "üéØ ALTERNANCE CYBERS√âCURIT√â TROUV√âE !\\n\\nüìã {{ $json.title }}\\nüè¢ {{ $json.company }}\\nüìç {{ $json.location }}\\nüåê Source: {{ $json.source }}\\nüéØ Confiance: {{ $json.confidence }}\\nüí≠ Justification: {{ $json.justification }}\\nüîó Lien: {{ $json.url }}",
              "type": "string"
            },
            {
              "id": "score-valide",
              "name": "score_qualite",
              "value": "={{ $json.confidence }}",
              "type": "number"
            }
          ]
        },
        "options": {}
      },
      "id": "traitement-valide",
      "name": "üéØ Traitement Alternance Trouv√©e",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [1180, 180]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "action-invalide",
              "name": "action",
              "value": "OFFRE_REJETEE",
              "type": "string"
            },
            {
              "id": "message-invalide",
              "name": "rejet_raison",
              "value": "{{ $json.justification || 'Ne correspond pas aux crit√®res alternance cybers√©curit√©' }}",
              "type": "string"
            },
            {
              "id": "details-invalide",
              "name": "details_rejet",
              "value": "Titre: {{ $json.title }} | Classification: {{ $json.classification }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "traitement-invalide",
      "name": "‚ùå Traitement Offre Rejet√©e",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [1180, 420]
    }
  ],
  "pinData": {},
  "connections": {
    "üöÄ D√©marrage": {
      "main": [
        [
          {
            "node": "‚öôÔ∏è Configuration Sites",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "‚öôÔ∏è Configuration Sites": {
      "main": [
        [
          {
            "node": "üï∑Ô∏è Scraper Intelligent Multi-Sites",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üï∑Ô∏è Scraper Intelligent Multi-Sites": {
      "main": [
        [
          {
            "node": "üß† Classification Mistral Large Expert",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üß† Classification Mistral Large Expert": {
      "main": [
        [
          {
            "node": "‚úÖ Alternance Valide ?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "‚úÖ Alternance Valide ?": {
      "main": [
        [
          {
            "node": "üéØ Traitement Alternance Trouv√©e",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "‚ùå Traitement Offre Rejet√©e",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "workflow-scraping-v1",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "scraping-alternance-001"
  },
  "id": "scraping-alternance-cybersec",
  "tags": ["scraping", "alternance", "cybers√©curit√©", "mistral-large"]
}